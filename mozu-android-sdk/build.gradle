apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'signing'

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.9.+'
    }
}
apply plugin: 'android-library'

sourceCompatibility = 1.6
archivesBaseName='mozu-api-android'
if (hasProperty("teamcity")) {
    version = teamcity["build.number"]
    println "TeamCity build number passed into gradle is " + version
} else {
    // Manually insert the version numbers here when building outside of TeamCity
    version = '1.13.0'
}

ext.isReleaseVersion = !version.endsWith("SNAPSHOT")
group='com.mozu'

task wrapper(type: Wrapper) {
    gradleVersion = '1.11'
}

repositories {
    mavenLocal()
    mavenCentral()
}

android {
    compileSdkVersion 19
    buildToolsVersion "19.0.0"

    defaultConfig {
        minSdkVersion 7
        targetSdkVersion 19
    }
    lintOptions {
          abortOnError false
    }
    buildTypes {
        release {
            runProguard false
            proguardFile getDefaultProguardFile('proguard-android.txt')
        }
    }
}

dependencies {
    compile ("org.apache.httpcomponents:httpcore:4.3.3")
    compile ("org.apache.httpcomponents:httpclient:4.3.5")
    compile ("com.android.support:support-v4:19.0.0")
    compile ("com.android.support:gridlayout-v7:19.0.0")
    compile ("com.android.support:appcompat-v7:19.0.0")

    compile ("com.mozu:mozu-api-core:"+version) {
        exclude group: 'mysql'
        exclude group: 'xerces'
        exclude group: 'berkeleydb'
        exclude group: 'hsqldb'
        exclude group: 'tomcat'
        exclude group: 'commons-logging'
        
        changing = true
    }
}

publishing {
    publications {
         maven(MavenPublication){
            artifactId project.archivesBaseName
            artifact file("build/libs/${project.archivesBaseName}-${project.version}.aar")
            pom.withXml {
            }
    }
 }
}

signing {
    required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

if (hasProperty("sonatypeUsername")) {
    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
     
                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2") {
                  authentication(userName: sonatypeUsername, password: sonatypePassword)
                }
                snapshotRepository (url: "https://oss.sonatype.org/content/repositories/snapshots") {
                  authentication(userName: sonatypeUsername, password: sonatypePassword)
                }
                pom.project {
                   name 'mozu-android-sdk'
                   packaging 'aar'
                   description 'Mozu Android is a SDK that enables you to create robust Android applications that integrate with the Mozu platform'
                   url 'https://github.com/Mozu/mozu-java.git'
     
                   scm {
                       url 'scm:git@github.com:Mozu/mozu-java.git'
                       connection 'scm:git@github.com:Mozu/mozu-java.git'
                       developerConnection 'scm:git@github.com:Mozu/mozu-java.git'
                   }
     
                   licenses {
                       license {
                           name 'The MIT License (MIT)'
                           url 'http://http://opensource.org/licenses/MIT'
                           distribution 'repo'
                       }
                   }
     
                   developers {
                       developer {
                           id 'bob_hewett'
                           name 'Bob Hewett'
                       }
                       developer {
                           id 'john_gatti'
                           name 'John Gatti'
                       }
                       developer {
                           id 'sanjay_mandadi'
                           name 'Sanjay Mandadi'
                       }
                       
                   }
               }
            }
        }
    }
}

// Hack to get the SDK to compile within Eclipse. Not for use in production.

task copyJarDependencies(type: Copy) {
    description = 'Used for Eclipse. Copies all dependencies to the libs directory. If there are any AAR files it will extract the classes.jar and rename it the same as the AAR file but with a .jar on the end.'
    libDir = new File(project.projectDir, '/libs')
    println libDir
    println 'Adding dependencies from compile configuration'
    configurations.compile.filter {it.name.endsWith 'jar'}.each { File file -> moveJarIntoLibs(file)}
    println 'Extracting dependencies from compile configuration'
    configurations.compile.filter {it.name.endsWith 'aar'}.each { File file -> moveAndRenameAar(file) }
}

void moveJarIntoLibs(File file){
    println 'Added jar ' + file
        copy{
            from file
            into 'libs'
        }
}

void moveAndRenameAar(File file){
    println 'Added aar ' + file
    def baseFilename = file.name.lastIndexOf('.').with {it != -1 ? file.name[0..<it] : file.name}

    // directory excluding the classes.jar
    copy{
        from zipTree(file)
        exclude 'classes.jar'
        into 'libs/'+baseFilename
    }

    // Copies the classes.jar into the libs directory of the expoded AAR.
    // In Eclipse you can then import this exploded ar as an Android project
    // and then reference not only the classes but also the android resources :D 
    copy{
        from zipTree(file)
        include 'classes.jar'
        into 'libs/' + baseFilename +'/libs'
        rename { String fileName ->
            fileName.replace('classes.jar', baseFilename + '.jar')
        }
    }
}
