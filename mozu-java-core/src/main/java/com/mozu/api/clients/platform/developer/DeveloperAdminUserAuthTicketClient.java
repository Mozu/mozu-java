/**
 *     This code was auto-generated by a Codezu.     
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
 */
package com.mozu.api.clients.platform.developer;

import java.util.List;
import java.util.ArrayList;
import com.mozu.api.MozuClient;
import com.mozu.api.MozuUrl;
import com.mozu.api.Headers;
import com.mozu.api.security.AuthTicket;
import org.apache.commons.lang3.StringUtils;

/** <summary>
 * Use this resource to manage authentication tickets for your developer account.
 * </summary>
 */
public class DeveloperAdminUserAuthTicketClient {
	
	/**
	 * Generate an authentication ticket for a developer account.
	 * <p><pre><code>
	 * MozuClient<com.mozu.api.contracts.adminuser.DeveloperAdminUserAuthTicket> mozuClient=CreateDeveloperUserAuthTicketClient( userAuthInfo);
	 * client.setBaseAddress(url);
	 * client.executeRequest();
	 * DeveloperAdminUserAuthTicket developerAdminUserAuthTicket = client.Result();
	 * </code></pre></p>
	 * @param userAuthInfo The user authentication information required to generate the developer account user authentication ticket, which consists of a user name and password.
	 * @return Mozu.Api.MozuClient <com.mozu.api.contracts.adminuser.DeveloperAdminUserAuthTicket>
	 * @see com.mozu.api.contracts.adminuser.DeveloperAdminUserAuthTicket
	 * @see com.mozu.api.contracts.core.UserAuthInfo
	 */
	public static MozuClient<com.mozu.api.contracts.adminuser.DeveloperAdminUserAuthTicket> createDeveloperUserAuthTicketClient(com.mozu.api.contracts.core.UserAuthInfo userAuthInfo) throws Exception
	{
		return createDeveloperUserAuthTicketClient( userAuthInfo,  null);
	}

	/**
	 * Generate an authentication ticket for a developer account.
	 * <p><pre><code>
	 * MozuClient<com.mozu.api.contracts.adminuser.DeveloperAdminUserAuthTicket> mozuClient=CreateDeveloperUserAuthTicketClient( userAuthInfo,  developerAccountId);
	 * client.setBaseAddress(url);
	 * client.executeRequest();
	 * DeveloperAdminUserAuthTicket developerAdminUserAuthTicket = client.Result();
	 * </code></pre></p>
	 * @param developerAccountId Unique identifier of the developer account.
	 * @param userAuthInfo The user authentication information required to generate the developer account user authentication ticket, which consists of a user name and password.
	 * @return Mozu.Api.MozuClient <com.mozu.api.contracts.adminuser.DeveloperAdminUserAuthTicket>
	 * @see com.mozu.api.contracts.adminuser.DeveloperAdminUserAuthTicket
	 * @see com.mozu.api.contracts.core.UserAuthInfo
	 */
	public static MozuClient<com.mozu.api.contracts.adminuser.DeveloperAdminUserAuthTicket> createDeveloperUserAuthTicketClient(com.mozu.api.contracts.core.UserAuthInfo userAuthInfo, Integer developerAccountId) throws Exception
	{
		MozuUrl url = com.mozu.api.urls.platform.developer.DeveloperAdminUserAuthTicketUrl.createDeveloperUserAuthTicketUrl(developerAccountId);
		String verb = "POST";
		Class<?> clz = com.mozu.api.contracts.adminuser.DeveloperAdminUserAuthTicket.class;
		MozuClient<com.mozu.api.contracts.adminuser.DeveloperAdminUserAuthTicket> mozuClient = new MozuClient(clz);
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		mozuClient.setBody(userAuthInfo);
		return mozuClient;

	}

	/**
	 * Generates a new developer account authentication ticket for the specified tenant by supplying the defined refresh token information.
	 * <p><pre><code>
	 * MozuClient<com.mozu.api.contracts.adminuser.DeveloperAdminUserAuthTicket> mozuClient=RefreshDeveloperAuthTicketClient( existingAuthTicket);
	 * client.setBaseAddress(url);
	 * client.executeRequest();
	 * DeveloperAdminUserAuthTicket developerAdminUserAuthTicket = client.Result();
	 * </code></pre></p>
	 * @param existingAuthTicket Properties of the authentication ticket to refresh. The refresh token is required to complete this request.
	 * @return Mozu.Api.MozuClient <com.mozu.api.contracts.adminuser.DeveloperAdminUserAuthTicket>
	 * @see com.mozu.api.contracts.adminuser.DeveloperAdminUserAuthTicket
	 * @see com.mozu.api.contracts.adminuser.DeveloperAdminUserAuthTicket
	 */
	public static MozuClient<com.mozu.api.contracts.adminuser.DeveloperAdminUserAuthTicket> refreshDeveloperAuthTicketClient(com.mozu.api.contracts.adminuser.DeveloperAdminUserAuthTicket existingAuthTicket) throws Exception
	{
		return refreshDeveloperAuthTicketClient( existingAuthTicket,  null);
	}

	/**
	 * Generates a new developer account authentication ticket for the specified tenant by supplying the defined refresh token information.
	 * <p><pre><code>
	 * MozuClient<com.mozu.api.contracts.adminuser.DeveloperAdminUserAuthTicket> mozuClient=RefreshDeveloperAuthTicketClient( existingAuthTicket,  developerAccountId);
	 * client.setBaseAddress(url);
	 * client.executeRequest();
	 * DeveloperAdminUserAuthTicket developerAdminUserAuthTicket = client.Result();
	 * </code></pre></p>
	 * @param developerAccountId Unique identifier of the developer account.
	 * @param existingAuthTicket Properties of the authentication ticket to refresh. The refresh token is required to complete this request.
	 * @return Mozu.Api.MozuClient <com.mozu.api.contracts.adminuser.DeveloperAdminUserAuthTicket>
	 * @see com.mozu.api.contracts.adminuser.DeveloperAdminUserAuthTicket
	 * @see com.mozu.api.contracts.adminuser.DeveloperAdminUserAuthTicket
	 */
	public static MozuClient<com.mozu.api.contracts.adminuser.DeveloperAdminUserAuthTicket> refreshDeveloperAuthTicketClient(com.mozu.api.contracts.adminuser.DeveloperAdminUserAuthTicket existingAuthTicket, Integer developerAccountId) throws Exception
	{
		MozuUrl url = com.mozu.api.urls.platform.developer.DeveloperAdminUserAuthTicketUrl.refreshDeveloperAuthTicketUrl(developerAccountId);
		String verb = "PUT";
		Class<?> clz = com.mozu.api.contracts.adminuser.DeveloperAdminUserAuthTicket.class;
		MozuClient<com.mozu.api.contracts.adminuser.DeveloperAdminUserAuthTicket> mozuClient = new MozuClient(clz);
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		mozuClient.setBody(existingAuthTicket);
		return mozuClient;

	}

	/**
	 * Deletes the authentication ticket for the developer account by supplying the refresh token.
	 * <p><pre><code>
	 * MozuClient mozuClient=DeleteUserAuthTicketClient( refreshToken);
	 * client.setBaseAddress(url);
	 * client.executeRequest();
	 * </code></pre></p>
	 * @param refreshToken Refresh token string associated with the developer account authentication ticket.
	 * @return Mozu.Api.MozuClient 
	 */
	public static MozuClient deleteUserAuthTicketClient(String refreshToken) throws Exception
	{
		MozuUrl url = com.mozu.api.urls.platform.developer.DeveloperAdminUserAuthTicketUrl.deleteUserAuthTicketUrl(refreshToken);
		String verb = "DELETE";
				MozuClient mozuClient = new MozuClient();
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		return mozuClient;

	}

}



