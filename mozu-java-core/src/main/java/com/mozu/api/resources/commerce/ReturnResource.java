/**
 *     This code was auto-generated by a Codezu.     
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
 */
package com.mozu.api.resources.commerce;

import com.mozu.api.ApiContext;
import java.util.List;
import java.util.ArrayList;
import com.mozu.api.MozuClient;
import com.mozu.api.MozuUrl;
import com.mozu.api.Headers;
import com.mozu.api.security.AuthTicket;
import org.apache.commons.lang.StringUtils;

/** <summary>
 * Use the returns subresource to manage returned items that were previously fufilled. Returns can include any number of items associated with an original Mozu order. Each return must either be associated with an original order or a product definition to represent each returned item.
 * </summary>
 */
public class ReturnResource {
	///
	/// <see cref="Mozu.Api.ApiContext"/>
	///
	private ApiContext _apiContext;
	public ReturnResource(ApiContext apiContext) 
	{
		_apiContext = apiContext;
	}
	
	/**
	 * Retrieves a list of all returns according to any filter and sort criteria.
	 * <p><pre><code>
	 *	Return return = new Return();
	 *	ReturnCollection returnCollection = return.GetReturns();
	 * </code></pre></p>
	 * @return com.mozu.api.contracts.commerceruntime.returns.ReturnCollection
	 * @see com.mozu.api.contracts.commerceruntime.returns.ReturnCollection
	 */
	public com.mozu.api.contracts.commerceruntime.returns.ReturnCollection getReturns() throws Exception
	{
		return getReturns( null,  null,  null,  null);
	}

	/**
	 * Retrieves a list of all returns according to any filter and sort criteria.
	 * <p><pre><code>
	 *	Return return = new Return();
	 *	ReturnCollection returnCollection = return.GetReturns( startIndex,  pageSize,  sortBy,  filter);
	 * </code></pre></p>
	 * @param filter A set of expressions that consist of a field, operator, and value and represent search parameter syntax when filtering results of a query. Valid operators include equals (eq), does not equal (ne), greater than (gt), less than (lt), greater than or equal to (ge), less than or equal to (le), starts with (sw), or contains (cont). For example - "filter=IsDisplayed+eq+true"
	 * @param pageSize The number of results to display on each page when creating paged results from a query. The maximum value is 200.
	 * @param sortBy The property by which to sort results and whether the results appear in ascending (a-z) order, represented by ASC or in descending (z-a) order, represented by DESC. The sortBy parameter follows an available property. For example: "sortBy=productCode+asc"
	 * @param startIndex When creating paged results from a query, this value indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a PageSize of 25, to get the 51st through the 75th items, use startIndex=3.
	 * @return com.mozu.api.contracts.commerceruntime.returns.ReturnCollection
	 * @see com.mozu.api.contracts.commerceruntime.returns.ReturnCollection
	 */
	public com.mozu.api.contracts.commerceruntime.returns.ReturnCollection getReturns(Integer startIndex, Integer pageSize, String sortBy, String filter) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.returns.ReturnCollection> client = com.mozu.api.clients.commerce.ReturnClient.getReturnsClient( startIndex,  pageSize,  sortBy,  filter);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * Retrieves a list of properties for the specified return.
	 * <p><pre><code>
	 *	Return return = new Return();
	 *	Return return = return.GetReturn( returnId);
	 * </code></pre></p>
	 * @param returnId Returns the properties of the return specified in the request as well as system-supplied information.
	 * @return com.mozu.api.contracts.commerceruntime.returns.Return
	 * @see com.mozu.api.contracts.commerceruntime.returns.Return
	 */
	public com.mozu.api.contracts.commerceruntime.returns.Return getReturn(String returnId) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.returns.Return> client = com.mozu.api.clients.commerce.ReturnClient.getReturnClient( returnId);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * Retrieves a list of the actions available to perform for the specified return based on its current state.
	 * <p><pre><code>
	 *	Return return = new Return();
	 *	string string = return.GetAvailableReturnActions( returnId);
	 * </code></pre></p>
	 * @param returnId Retrieves a list of the actions available to perform for the specified return based on its current state.
	 * @return List<string>
	 * @see string
	 */
	public List<String> getAvailableReturnActions(String returnId) throws Exception
	{
		MozuClient<List<String>> client = com.mozu.api.clients.commerce.ReturnClient.getAvailableReturnActionsClient( returnId);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * Retrieves a list of all payments submitted as part of a refund associated with a customer return.
	 * <p><pre><code>
	 *	Return return = new Return();
	 *	PaymentCollection paymentCollection = return.GetPayments( returnId);
	 * </code></pre></p>
	 * @param returnId Returns the details of the refund payment associated with the return specified in the request.
	 * @return com.mozu.api.contracts.commerceruntime.payments.PaymentCollection
	 * @see com.mozu.api.contracts.commerceruntime.payments.PaymentCollection
	 */
	public com.mozu.api.contracts.commerceruntime.payments.PaymentCollection getPayments(String returnId) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.payments.PaymentCollection> client = com.mozu.api.clients.commerce.ReturnClient.getPaymentsClient( returnId);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * Retrieves the details of a payment submitted as part of a refund associated with a customer return.
	 * <p><pre><code>
	 *	Return return = new Return();
	 *	Payment payment = return.GetPayment( returnId,  paymentId);
	 * </code></pre></p>
	 * @param paymentId Unique identifier of the return payment to retrieve.
	 * @param returnId Unique identifier of the return associated with the payment.
	 * @return com.mozu.api.contracts.commerceruntime.payments.Payment
	 * @see com.mozu.api.contracts.commerceruntime.payments.Payment
	 */
	public com.mozu.api.contracts.commerceruntime.payments.Payment getPayment(String returnId, String paymentId) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.payments.Payment> client = com.mozu.api.clients.commerce.ReturnClient.getPaymentClient( returnId,  paymentId);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * Retrieves a list of the payment actions available to perform for the specified return when a return results in a refund to the customer.
	 * <p><pre><code>
	 *	Return return = new Return();
	 *	string string = return.GetAvailablePaymentActionsForReturn( returnId,  paymentId);
	 * </code></pre></p>
	 * @param paymentId Unique identifier of the payment for which to perform the action.
	 * @param returnId Unique identifier of the return associated with the payment.
	 * @return List<string>
	 * @see string
	 */
	public List<String> getAvailablePaymentActionsForReturn(String returnId, String paymentId) throws Exception
	{
		MozuClient<List<String>> client = com.mozu.api.clients.commerce.ReturnClient.getAvailablePaymentActionsForReturnClient( returnId,  paymentId);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * Creates a return for previously fulfilled items. Each return must either be associated with an original order or a product definition to represent each returned item.
	 * <p><pre><code>
	 *	Return return = new Return();
	 *	Return return = return.CreateReturn( ret);
	 * </code></pre></p>
	 * @param ret Wrapper for the properties of the return to create.
	 * @return com.mozu.api.contracts.commerceruntime.returns.Return
	 * @see com.mozu.api.contracts.commerceruntime.returns.Return
	 * @see com.mozu.api.contracts.commerceruntime.returns.Return
	 */
	public com.mozu.api.contracts.commerceruntime.returns.Return createReturn(com.mozu.api.contracts.commerceruntime.returns.Return ret) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.returns.Return> client = com.mozu.api.clients.commerce.ReturnClient.createReturnClient( ret);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * Updates a refund payment associated with a customer return by performing the specified action.
	 * <p><pre><code>
	 *	Return return = new Return();
	 *	Return return = return.PerformPaymentActionForReturn( action,  returnId,  paymentId);
	 * </code></pre></p>
	 * @param paymentId Unique identifier of the return payment to update.
	 * @param returnId Unique identifier of the return associated with the refund payment.
	 * @param action The payment action to perform for the refund payment.
	 * @return com.mozu.api.contracts.commerceruntime.returns.Return
	 * @see com.mozu.api.contracts.commerceruntime.returns.Return
	 * @see com.mozu.api.contracts.commerceruntime.payments.PaymentAction
	 */
	public com.mozu.api.contracts.commerceruntime.returns.Return performPaymentActionForReturn(com.mozu.api.contracts.commerceruntime.payments.PaymentAction action, String returnId, String paymentId) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.returns.Return> client = com.mozu.api.clients.commerce.ReturnClient.performPaymentActionForReturnClient( action,  returnId,  paymentId);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * Creates a new payment for a return that results in a refund to the customer.
	 * <p><pre><code>
	 *	Return return = new Return();
	 *	Return return = return.CreatePaymentActionForReturn( action,  returnId);
	 * </code></pre></p>
	 * @param returnId Unique identifier of the return associated with the payment action.
	 * @param action The payment action to perform for the customer return.
	 * @return com.mozu.api.contracts.commerceruntime.returns.Return
	 * @see com.mozu.api.contracts.commerceruntime.returns.Return
	 * @see com.mozu.api.contracts.commerceruntime.payments.PaymentAction
	 */
	public com.mozu.api.contracts.commerceruntime.returns.Return createPaymentActionForReturn(com.mozu.api.contracts.commerceruntime.payments.PaymentAction action, String returnId) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.returns.Return> client = com.mozu.api.clients.commerce.ReturnClient.createPaymentActionForReturnClient( action,  returnId);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * Updates the return by performing the specified action.
	 * <p><pre><code>
	 *	Return return = new Return();
	 *	ReturnCollection returnCollection = return.PerformReturnActions( action);
	 * </code></pre></p>
	 * @param action The name of the return action to perform, such as "Refund" or "Replace".
	 * @return com.mozu.api.contracts.commerceruntime.returns.ReturnCollection
	 * @see com.mozu.api.contracts.commerceruntime.returns.ReturnCollection
	 * @see com.mozu.api.contracts.commerceruntime.returns.ReturnAction
	 */
	public com.mozu.api.contracts.commerceruntime.returns.ReturnCollection performReturnActions(com.mozu.api.contracts.commerceruntime.returns.ReturnAction action) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.returns.ReturnCollection> client = com.mozu.api.clients.commerce.ReturnClient.performReturnActionsClient( action);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * Updates one or more properties of a return for items previously shipped in a completed order.
	 * <p><pre><code>
	 *	Return return = new Return();
	 *	Return return = return.UpdateReturn( ret,  returnId);
	 * </code></pre></p>
	 * @param returnId Unique identifier of the return.
	 * @param ret Wrapper for the array of properties to update for the return.
	 * @return com.mozu.api.contracts.commerceruntime.returns.Return
	 * @see com.mozu.api.contracts.commerceruntime.returns.Return
	 * @see com.mozu.api.contracts.commerceruntime.returns.Return
	 */
	public com.mozu.api.contracts.commerceruntime.returns.Return updateReturn(com.mozu.api.contracts.commerceruntime.returns.Return ret, String returnId) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.returns.Return> client = com.mozu.api.clients.commerce.ReturnClient.updateReturnClient( ret,  returnId);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * Deletes the return specified in the request.
	 * <p><pre><code>
	 *	Return return = new Return();
	 *	return.DeleteReturn( returnId);
	 * </code></pre></p>
	 * @param returnId Unique identifier of the return to delete.
	 * @return 
	 */
	public void deleteReturn(String returnId) throws Exception
	{
		MozuClient client = com.mozu.api.clients.commerce.ReturnClient.deleteReturnClient( returnId);
		client.setContext(_apiContext);
		client.executeRequest();

	}

}



