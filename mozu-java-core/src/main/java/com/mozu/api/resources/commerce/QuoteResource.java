/**
 *     This code was auto-generated by a Codezu.     
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
 */
package com.mozu.api.resources.commerce;

import com.mozu.api.ApiContext;
import java.util.List;
import java.util.ArrayList;
import com.mozu.api.MozuClient;
import com.mozu.api.MozuClientFactory;
import com.mozu.api.MozuUrl;
import com.mozu.api.Headers;
import org.joda.time.DateTime;
import com.mozu.api.security.AuthTicket;
import org.apache.commons.lang.StringUtils;

/** <summary>
 * Quotes support the eCommerce B2B feature by providing functionality similar to that of standard wishlists. However, comments can be added to quotes to provide clearer information to other users accessing the quote through the shared B2B account. These basic APIs provide the ability to create new quotes, update them, and retrieve their information.These APIs are currently a work-in-progress and will be enhanced in the future as more functionality such as setting fixed prices, setting expiration, etc. is released. The current models may change and break backwards compatibility, so use caution if interacting with these APIs for now.
 * </summary>
 */
public class QuoteResource {
	///
	/// <see cref="Mozu.Api.ApiContext"/>
	///
	private ApiContext _apiContext;


	public QuoteResource(ApiContext apiContext) 
	{
		_apiContext = apiContext;
	}

	
	/**
	 * 
	 * <p><pre><code>
	 *	Quote quote = new Quote();
	 *	QuoteCollection quoteCollection = quote.getQuotes();
	 * </code></pre></p>
	 * @return com.mozu.api.contracts.commerceruntime.quotes.QuoteCollection
	 * @see com.mozu.api.contracts.commerceruntime.quotes.QuoteCollection
	 */
	public com.mozu.api.contracts.commerceruntime.quotes.QuoteCollection getQuotes() throws Exception
	{
		return getQuotes( null,  null,  null,  null,  null,  null,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	Quote quote = new Quote();
	 *	QuoteCollection quoteCollection = quote.getQuotes( startIndex,  pageSize,  sortBy,  filter,  q,  qLimit,  responseFields);
	 * </code></pre></p>
	 * @param filter A set of filter expressions representing the search parameters for a query. This parameter is optional. Refer to [Sorting and Filtering](../../../../Developer/api-guides/sorting-filtering.htm) for a list of supported filters.
	 * @param pageSize When creating paged results from a query, this value indicates the zero-based offset in the complete result set where the returned entities begin. For example, with this parameter set to 25, to get the 51st through the 75th items, set startIndex to 50.
	 * @param q A list of order search terms (not phrases) to use in the query when searching across order number and the name or email of the billing contact. When entering, separate multiple search terms with a space character.
	 * @param qLimit The maximum number of search results to return in the response. You can limit any range between 1-100.
	 * @param responseFields Filtering syntax appended to an API call to increase or decrease the amount of data returned inside a JSON object. This parameter should only be used to retrieve data. Attempting to update data using this parameter may cause data loss.
	 * @param sortBy The element to sort the results by and the channel in which the results appear. Either ascending (a-z) or descending (z-a) channel. Optional. Refer to [Sorting and Filtering](../../../../Developer/api-guides/sorting-filtering.htm) for more information.
	 * @param startIndex When creating paged results from a query, this value indicates the zero-based offset in the complete result set where the returned entities begin. For example, with pageSize set to 25, to get the 51st through the 75th items, set this parameter to 50.
	 * @return com.mozu.api.contracts.commerceruntime.quotes.QuoteCollection
	 * @see com.mozu.api.contracts.commerceruntime.quotes.QuoteCollection
	 */
	public com.mozu.api.contracts.commerceruntime.quotes.QuoteCollection getQuotes(Integer startIndex, Integer pageSize, String sortBy, String filter, String q, Integer qLimit, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.quotes.QuoteCollection> client = com.mozu.api.clients.commerce.QuoteClient.getQuotesClient( startIndex,  pageSize,  sortBy,  filter,  q,  qLimit,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Quote quote = new Quote();
	 *	ShippingRate shippingRate = quote.getAvailableShippingMethods( quoteId);
	 * </code></pre></p>
	 * @param quoteId 
	 * @return List<com.mozu.api.contracts.commerceruntime.fulfillment.ShippingRate>
	 * @see com.mozu.api.contracts.commerceruntime.fulfillment.ShippingRate
	 */
	public List<com.mozu.api.contracts.commerceruntime.fulfillment.ShippingRate> getAvailableShippingMethods(String quoteId) throws Exception
	{
		return getAvailableShippingMethods( quoteId,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	Quote quote = new Quote();
	 *	ShippingRate shippingRate = quote.getAvailableShippingMethods( quoteId,  draft);
	 * </code></pre></p>
	 * @param draft 
	 * @param quoteId 
	 * @return List<com.mozu.api.contracts.commerceruntime.fulfillment.ShippingRate>
	 * @see com.mozu.api.contracts.commerceruntime.fulfillment.ShippingRate
	 */
	public List<com.mozu.api.contracts.commerceruntime.fulfillment.ShippingRate> getAvailableShippingMethods(String quoteId, Boolean draft) throws Exception
	{
		MozuClient<List<com.mozu.api.contracts.commerceruntime.fulfillment.ShippingRate>> client = com.mozu.api.clients.commerce.QuoteClient.getAvailableShippingMethodsClient( quoteId,  draft);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Quote quote = new Quote();
	 *	Quote quote = quote.getQuote( quoteId);
	 * </code></pre></p>
	 * @param quoteId A unique identifier for the quote.
	 * @return com.mozu.api.contracts.commerceruntime.quotes.Quote
	 * @see com.mozu.api.contracts.commerceruntime.quotes.Quote
	 */
	public com.mozu.api.contracts.commerceruntime.quotes.Quote getQuote(String quoteId) throws Exception
	{
		return getQuote( quoteId,  null,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	Quote quote = new Quote();
	 *	Quote quote = quote.getQuote( quoteId,  draft,  responseFields);
	 * </code></pre></p>
	 * @param draft 
	 * @param quoteId A unique identifier for the quote.
	 * @param responseFields Filtering syntax appended to an API call to increase or decrease the amount of data returned inside a JSON object. This parameter should only be used to retrieve data. Attempting to update data using this parameter may cause data loss.
	 * @return com.mozu.api.contracts.commerceruntime.quotes.Quote
	 * @see com.mozu.api.contracts.commerceruntime.quotes.Quote
	 */
	public com.mozu.api.contracts.commerceruntime.quotes.Quote getQuote(String quoteId, Boolean draft, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.quotes.Quote> client = com.mozu.api.clients.commerce.QuoteClient.getQuoteClient( quoteId,  draft,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Quote quote = new Quote();
	 *	Quote quote = quote.getQuoteByName( customerAccountId,  quoteName);
	 * </code></pre></p>
	 * @param customerAccountId The unique identifier of the customer account for which to retrieve wish lists.
	 * @param quoteName A unique name for the quote.
	 * @return com.mozu.api.contracts.commerceruntime.quotes.Quote
	 * @see com.mozu.api.contracts.commerceruntime.quotes.Quote
	 */
	public com.mozu.api.contracts.commerceruntime.quotes.Quote getQuoteByName(Integer customerAccountId, String quoteName) throws Exception
	{
		return getQuoteByName( customerAccountId,  quoteName,  null,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	Quote quote = new Quote();
	 *	Quote quote = quote.getQuoteByName( customerAccountId,  quoteName,  draft,  responseFields);
	 * </code></pre></p>
	 * @param customerAccountId The unique identifier of the customer account for which to retrieve wish lists.
	 * @param draft 
	 * @param quoteName A unique name for the quote.
	 * @param responseFields Filtering syntax appended to an API call to increase or decrease the amount of data returned inside a JSON object. This parameter should only be used to retrieve data. Attempting to update data using this parameter may cause data loss.
	 * @return com.mozu.api.contracts.commerceruntime.quotes.Quote
	 * @see com.mozu.api.contracts.commerceruntime.quotes.Quote
	 */
	public com.mozu.api.contracts.commerceruntime.quotes.Quote getQuoteByName(Integer customerAccountId, String quoteName, Boolean draft, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.quotes.Quote> client = com.mozu.api.clients.commerce.QuoteClient.getQuoteByNameClient( customerAccountId,  quoteName,  draft,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Quote quote = new Quote();
	 *	Quote quote = quote.createQuote( quote);
	 * </code></pre></p>
	 * @param quote The quote being created.
	 * @return com.mozu.api.contracts.commerceruntime.quotes.Quote
	 * @see com.mozu.api.contracts.commerceruntime.quotes.Quote
	 * @see com.mozu.api.contracts.commerceruntime.quotes.Quote
	 */
	public com.mozu.api.contracts.commerceruntime.quotes.Quote createQuote(com.mozu.api.contracts.commerceruntime.quotes.Quote quote) throws Exception
	{
		return createQuote( quote,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	Quote quote = new Quote();
	 *	Quote quote = quote.createQuote( quote,  responseFields);
	 * </code></pre></p>
	 * @param responseFields Filtering syntax appended to an API call to increase or decrease the amount of data returned inside a JSON object. This parameter should only be used to retrieve data. Attempting to update data using this parameter may cause data loss.
	 * @param quote The quote being created.
	 * @return com.mozu.api.contracts.commerceruntime.quotes.Quote
	 * @see com.mozu.api.contracts.commerceruntime.quotes.Quote
	 * @see com.mozu.api.contracts.commerceruntime.quotes.Quote
	 */
	public com.mozu.api.contracts.commerceruntime.quotes.Quote createQuote(com.mozu.api.contracts.commerceruntime.quotes.Quote quote, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.quotes.Quote> client = com.mozu.api.clients.commerce.QuoteClient.createQuoteClient( quote,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Quote quote = new Quote();
	 *	Quote quote = quote.updateQuoteAdjustments( adjustments,  quoteId);
	 * </code></pre></p>
	 * @param quoteId 
	 * @param adjustments 
	 * @return com.mozu.api.contracts.commerceruntime.quotes.Quote
	 * @see com.mozu.api.contracts.commerceruntime.quotes.Quote
	 * @see com.mozu.api.contracts.commerceruntime.quotes.QuoteAdjustment
	 */
	public com.mozu.api.contracts.commerceruntime.quotes.Quote updateQuoteAdjustments(com.mozu.api.contracts.commerceruntime.quotes.QuoteAdjustment adjustments, String quoteId) throws Exception
	{
		return updateQuoteAdjustments( adjustments,  quoteId,  null,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	Quote quote = new Quote();
	 *	Quote quote = quote.updateQuoteAdjustments( adjustments,  quoteId,  updateMode,  responseFields);
	 * </code></pre></p>
	 * @param quoteId 
	 * @param responseFields 
	 * @param updateMode 
	 * @param adjustments 
	 * @return com.mozu.api.contracts.commerceruntime.quotes.Quote
	 * @see com.mozu.api.contracts.commerceruntime.quotes.Quote
	 * @see com.mozu.api.contracts.commerceruntime.quotes.QuoteAdjustment
	 */
	public com.mozu.api.contracts.commerceruntime.quotes.Quote updateQuoteAdjustments(com.mozu.api.contracts.commerceruntime.quotes.QuoteAdjustment adjustments, String quoteId, String updateMode, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.quotes.Quote> client = com.mozu.api.clients.commerce.QuoteClient.updateQuoteAdjustmentsClient( adjustments,  quoteId,  updateMode,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Quote quote = new Quote();
	 *	Quote quote = quote.copyQuote( quoteId);
	 * </code></pre></p>
	 * @param quoteId 
	 * @return com.mozu.api.contracts.commerceruntime.quotes.Quote
	 * @see com.mozu.api.contracts.commerceruntime.quotes.Quote
	 */
	public com.mozu.api.contracts.commerceruntime.quotes.Quote copyQuote(String quoteId) throws Exception
	{
		return copyQuote( quoteId,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	Quote quote = new Quote();
	 *	Quote quote = quote.copyQuote( quoteId,  responseFields);
	 * </code></pre></p>
	 * @param quoteId 
	 * @param responseFields 
	 * @return com.mozu.api.contracts.commerceruntime.quotes.Quote
	 * @see com.mozu.api.contracts.commerceruntime.quotes.Quote
	 */
	public com.mozu.api.contracts.commerceruntime.quotes.Quote copyQuote(String quoteId, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.quotes.Quote> client = com.mozu.api.clients.commerce.QuoteClient.copyQuoteClient( quoteId,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Quote quote = new Quote();
	 *	Stream stream = quote.sendQuoteEmail( emailAddresses,  quoteId);
	 * </code></pre></p>
	 * @param quoteId 
	 * @param emailAddresses 
	 * @return Stream
	 * @see Stream
	 * @see string
	 */
	public java.io.InputStream sendQuoteEmail(List<String> emailAddresses, String quoteId) throws Exception
	{
		MozuClient<java.io.InputStream> client = com.mozu.api.clients.commerce.QuoteClient.sendQuoteEmailClient( emailAddresses,  quoteId);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Quote quote = new Quote();
	 *	Quote quote = quote.updateFulfillmentInfo( fulfillmentInfo,  quoteId);
	 * </code></pre></p>
	 * @param quoteId 
	 * @param fulfillmentInfo 
	 * @return com.mozu.api.contracts.commerceruntime.quotes.Quote
	 * @see com.mozu.api.contracts.commerceruntime.quotes.Quote
	 * @see com.mozu.api.contracts.commerceruntime.fulfillment.FulfillmentInfo
	 */
	public com.mozu.api.contracts.commerceruntime.quotes.Quote updateFulfillmentInfo(com.mozu.api.contracts.commerceruntime.fulfillment.FulfillmentInfo fulfillmentInfo, String quoteId) throws Exception
	{
		return updateFulfillmentInfo( fulfillmentInfo,  quoteId,  null,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	Quote quote = new Quote();
	 *	Quote quote = quote.updateFulfillmentInfo( fulfillmentInfo,  quoteId,  updateMode,  responseFields);
	 * </code></pre></p>
	 * @param quoteId 
	 * @param responseFields 
	 * @param updateMode 
	 * @param fulfillmentInfo 
	 * @return com.mozu.api.contracts.commerceruntime.quotes.Quote
	 * @see com.mozu.api.contracts.commerceruntime.quotes.Quote
	 * @see com.mozu.api.contracts.commerceruntime.fulfillment.FulfillmentInfo
	 */
	public com.mozu.api.contracts.commerceruntime.quotes.Quote updateFulfillmentInfo(com.mozu.api.contracts.commerceruntime.fulfillment.FulfillmentInfo fulfillmentInfo, String quoteId, String updateMode, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.quotes.Quote> client = com.mozu.api.clients.commerce.QuoteClient.updateFulfillmentInfoClient( fulfillmentInfo,  quoteId,  updateMode,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Quote quote = new Quote();
	 *	Quote quote = quote.createQuoteFromCart( cartId);
	 * </code></pre></p>
	 * @param cartId 
	 * @return com.mozu.api.contracts.commerceruntime.quotes.Quote
	 * @see com.mozu.api.contracts.commerceruntime.quotes.Quote
	 */
	public com.mozu.api.contracts.commerceruntime.quotes.Quote createQuoteFromCart(String cartId) throws Exception
	{
		return createQuoteFromCart( cartId,  null,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	Quote quote = new Quote();
	 *	Quote quote = quote.createQuoteFromCart( cartId,  updateMode,  responseFields);
	 * </code></pre></p>
	 * @param cartId 
	 * @param responseFields 
	 * @param updateMode 
	 * @return com.mozu.api.contracts.commerceruntime.quotes.Quote
	 * @see com.mozu.api.contracts.commerceruntime.quotes.Quote
	 */
	public com.mozu.api.contracts.commerceruntime.quotes.Quote createQuoteFromCart(String cartId, String updateMode, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.quotes.Quote> client = com.mozu.api.clients.commerce.QuoteClient.createQuoteFromCartClient( cartId,  updateMode,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Quote quote = new Quote();
	 *	Quote quote = quote.updateQuote( quote,  quoteId);
	 * </code></pre></p>
	 * @param quoteId A unique identifier for the quote being updated.
	 * @param quote The quote that is being updated.
	 * @return com.mozu.api.contracts.commerceruntime.quotes.Quote
	 * @see com.mozu.api.contracts.commerceruntime.quotes.Quote
	 * @see com.mozu.api.contracts.commerceruntime.quotes.Quote
	 */
	public com.mozu.api.contracts.commerceruntime.quotes.Quote updateQuote(com.mozu.api.contracts.commerceruntime.quotes.Quote quote, String quoteId) throws Exception
	{
		return updateQuote( quote,  quoteId,  null,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	Quote quote = new Quote();
	 *	Quote quote = quote.updateQuote( quote,  quoteId,  updateMode,  responseFields);
	 * </code></pre></p>
	 * @param quoteId A unique identifier for the quote being updated.
	 * @param responseFields Filtering syntax appended to an API call to increase or decrease the amount of data returned inside a JSON object. This parameter should only be used to retrieve data. Attempting to update data using this parameter may cause data loss.
	 * @param updateMode 
	 * @param quote The quote that is being updated.
	 * @return com.mozu.api.contracts.commerceruntime.quotes.Quote
	 * @see com.mozu.api.contracts.commerceruntime.quotes.Quote
	 * @see com.mozu.api.contracts.commerceruntime.quotes.Quote
	 */
	public com.mozu.api.contracts.commerceruntime.quotes.Quote updateQuote(com.mozu.api.contracts.commerceruntime.quotes.Quote quote, String quoteId, String updateMode, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.quotes.Quote> client = com.mozu.api.clients.commerce.QuoteClient.updateQuoteClient( quote,  quoteId,  updateMode,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Quote quote = new Quote();
	 *	Stream stream = quote.deleteQuote( quoteId);
	 * </code></pre></p>
	 * @param quoteId A unique identifier for the quote.
	 * @return Stream
	 * @see Stream
	 */
	public java.io.InputStream deleteQuote(String quoteId) throws Exception
	{
		return deleteQuote( quoteId,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	Quote quote = new Quote();
	 *	Stream stream = quote.deleteQuote( quoteId,  draft);
	 * </code></pre></p>
	 * @param draft 
	 * @param quoteId A unique identifier for the quote.
	 * @return Stream
	 * @see Stream
	 */
	public java.io.InputStream deleteQuote(String quoteId, Boolean draft) throws Exception
	{
		MozuClient<java.io.InputStream> client = com.mozu.api.clients.commerce.QuoteClient.deleteQuoteClient( quoteId,  draft);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

}



