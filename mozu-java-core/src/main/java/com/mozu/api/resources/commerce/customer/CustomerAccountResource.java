/**
 *     This code was auto-generated by a Codezu.     
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
 */
package com.mozu.api.resources.commerce.customer;

import com.mozu.api.ApiContext;
import java.util.List;
import java.util.ArrayList;
import com.mozu.api.MozuClient;
import com.mozu.api.MozuClientFactory;
import com.mozu.api.MozuUrl;
import com.mozu.api.Headers;
import org.joda.time.DateTime;
import com.mozu.api.security.AuthTicket;
import org.apache.commons.lang.StringUtils;

/** <summary>
 * Use the Customer Accounts resource to manage the components of shopper accounts, including attributes, contact information, company notes, and groups associated with the customer account.
 * </summary>
 */
public class CustomerAccountResource {
	///
	/// <see cref="Mozu.Api.ApiContext"/>
	///
	private ApiContext _apiContext;


	public CustomerAccountResource(ApiContext apiContext) 
	{
		_apiContext = apiContext;
	}

	
	/**
	 * 
	 * <p><pre><code>
	 *	CustomerAccount customeraccount = new CustomerAccount();
	 *	CustomerAccountCollection customerAccountCollection = customeraccount.getAccounts();
	 * </code></pre></p>
	 * @return com.mozu.api.contracts.customer.CustomerAccountCollection
	 * @see com.mozu.api.contracts.customer.CustomerAccountCollection
	 */
	public com.mozu.api.contracts.customer.CustomerAccountCollection getAccounts() throws Exception
	{
		return getAccounts( null,  null,  null,  null,  null,  null,  null,  null,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	CustomerAccount customeraccount = new CustomerAccount();
	 *	CustomerAccountCollection customerAccountCollection = customeraccount.getAccounts( startIndex,  pageSize,  sortBy,  filter,  fields,  q,  qLimit,  isAnonymous,  responseFields);
	 * </code></pre></p>
	 * @param fields The fields to include in the response.
	 * @param filter 
	 * @param isAnonymous If true, retrieve anonymous shopper accounts in the response.
	 * @param pageSize 
	 * @param q A list of customer account search terms to use in the query when searching across customer name and email. Separate multiple search terms with a space character.
	 * @param qLimit The maximum number of search results to return in the response. You can limit any range between 1-100.
	 * @param responseFields 
	 * @param sortBy 
	 * @param startIndex 
	 * @return com.mozu.api.contracts.customer.CustomerAccountCollection
	 * @see com.mozu.api.contracts.customer.CustomerAccountCollection
	 */
	public com.mozu.api.contracts.customer.CustomerAccountCollection getAccounts(Integer startIndex, Integer pageSize, String sortBy, String filter, String fields, String q, Integer qLimit, Boolean isAnonymous, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.customer.CustomerAccountCollection> client = com.mozu.api.clients.commerce.customer.CustomerAccountClient.getAccountsClient( startIndex,  pageSize,  sortBy,  filter,  fields,  q,  qLimit,  isAnonymous,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CustomerAccount customeraccount = new CustomerAccount();
	 *	LoginState loginState = customeraccount.getLoginState( accountId);
	 * </code></pre></p>
	 * @param accountId Unique identifier of the customer account.
	 * @return com.mozu.api.contracts.customer.LoginState
	 * @see com.mozu.api.contracts.customer.LoginState
	 */
	public com.mozu.api.contracts.customer.LoginState getLoginState(Integer accountId) throws Exception
	{
		return getLoginState( accountId,  null,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	CustomerAccount customeraccount = new CustomerAccount();
	 *	LoginState loginState = customeraccount.getLoginState( accountId,  userId,  responseFields);
	 * </code></pre></p>
	 * @param accountId Unique identifier of the customer account.
	 * @param responseFields 
	 * @param userId 
	 * @return com.mozu.api.contracts.customer.LoginState
	 * @see com.mozu.api.contracts.customer.LoginState
	 */
	public com.mozu.api.contracts.customer.LoginState getLoginState(Integer accountId, String userId, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.customer.LoginState> client = com.mozu.api.clients.commerce.customer.CustomerAccountClient.getLoginStateClient( accountId,  userId,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CustomerAccount customeraccount = new CustomerAccount();
	 *	CustomerAccount customerAccount = customeraccount.getAccount( accountId);
	 * </code></pre></p>
	 * @param accountId Unique identifier of the customer account to retrieve.
	 * @return com.mozu.api.contracts.customer.CustomerAccount
	 * @see com.mozu.api.contracts.customer.CustomerAccount
	 */
	public com.mozu.api.contracts.customer.CustomerAccount getAccount(Integer accountId) throws Exception
	{
		return getAccount( accountId,  null,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	CustomerAccount customeraccount = new CustomerAccount();
	 *	CustomerAccount customerAccount = customeraccount.getAccount( accountId,  userId,  responseFields);
	 * </code></pre></p>
	 * @param accountId Unique identifier of the customer account to retrieve.
	 * @param responseFields 
	 * @param userId 
	 * @return com.mozu.api.contracts.customer.CustomerAccount
	 * @see com.mozu.api.contracts.customer.CustomerAccount
	 */
	public com.mozu.api.contracts.customer.CustomerAccount getAccount(Integer accountId, String userId, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.customer.CustomerAccount> client = com.mozu.api.clients.commerce.customer.CustomerAccountClient.getAccountClient( accountId,  userId,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CustomerAccount customeraccount = new CustomerAccount();
	 *	CustomerAccount customerAccount = customeraccount.addAccount( account);
	 * </code></pre></p>
	 * @param account Properties of the customer account to update.
	 * @return com.mozu.api.contracts.customer.CustomerAccount
	 * @see com.mozu.api.contracts.customer.CustomerAccount
	 * @see com.mozu.api.contracts.customer.CustomerAccount
	 */
	public com.mozu.api.contracts.customer.CustomerAccount addAccount(com.mozu.api.contracts.customer.CustomerAccount account) throws Exception
	{
		return addAccount( account,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	CustomerAccount customeraccount = new CustomerAccount();
	 *	CustomerAccount customerAccount = customeraccount.addAccount( account,  responseFields);
	 * </code></pre></p>
	 * @param responseFields 
	 * @param account Properties of the customer account to update.
	 * @return com.mozu.api.contracts.customer.CustomerAccount
	 * @see com.mozu.api.contracts.customer.CustomerAccount
	 * @see com.mozu.api.contracts.customer.CustomerAccount
	 */
	public com.mozu.api.contracts.customer.CustomerAccount addAccount(com.mozu.api.contracts.customer.CustomerAccount account, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.customer.CustomerAccount> client = com.mozu.api.clients.commerce.customer.CustomerAccountClient.addAccountClient( account,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CustomerAccount customeraccount = new CustomerAccount();
	 *	Stream stream = customeraccount.changePassword( passwordInfo,  accountId);
	 * </code></pre></p>
	 * @param accountId The customer account information required to change the userpassword.
	 * @param passwordInfo The password information required to change the user password.
	 * @return Stream
	 * @see Stream
	 * @see com.mozu.api.contracts.customer.PasswordInfo
	 */
	public java.io.InputStream changePassword(com.mozu.api.contracts.customer.PasswordInfo passwordInfo, Integer accountId) throws Exception
	{
		return changePassword( passwordInfo,  accountId,  null,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	CustomerAccount customeraccount = new CustomerAccount();
	 *	Stream stream = customeraccount.changePassword( passwordInfo,  accountId,  unlockAccount,  userId);
	 * </code></pre></p>
	 * @param accountId The customer account information required to change the userpassword.
	 * @param unlockAccount 
	 * @param userId 
	 * @param passwordInfo The password information required to change the user password.
	 * @return Stream
	 * @see Stream
	 * @see com.mozu.api.contracts.customer.PasswordInfo
	 */
	public java.io.InputStream changePassword(com.mozu.api.contracts.customer.PasswordInfo passwordInfo, Integer accountId, Boolean unlockAccount, String userId) throws Exception
	{
		MozuClient<java.io.InputStream> client = com.mozu.api.clients.commerce.customer.CustomerAccountClient.changePasswordClient( passwordInfo,  accountId,  unlockAccount,  userId);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CustomerAccount customeraccount = new CustomerAccount();
	 *	CustomerAuthTicket customerAuthTicket = customeraccount.addLoginToExistingCustomer( customerAuthInfo,  accountId);
	 * </code></pre></p>
	 * @param accountId Unique identifier of the customer account.
	 * @param customerAuthInfo The authentication information for the customer account.
	 * @return com.mozu.api.contracts.customer.CustomerAuthTicket
	 * @see com.mozu.api.contracts.customer.CustomerAuthTicket
	 * @see com.mozu.api.contracts.customer.CustomerLoginInfo
	 */
	public com.mozu.api.contracts.customer.CustomerAuthTicket addLoginToExistingCustomer(com.mozu.api.contracts.customer.CustomerLoginInfo customerAuthInfo, Integer accountId) throws Exception
	{
		return addLoginToExistingCustomer( customerAuthInfo,  accountId,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	CustomerAccount customeraccount = new CustomerAccount();
	 *	CustomerAuthTicket customerAuthTicket = customeraccount.addLoginToExistingCustomer( customerAuthInfo,  accountId,  responseFields);
	 * </code></pre></p>
	 * @param accountId Unique identifier of the customer account.
	 * @param responseFields 
	 * @param customerAuthInfo The authentication information for the customer account.
	 * @return com.mozu.api.contracts.customer.CustomerAuthTicket
	 * @see com.mozu.api.contracts.customer.CustomerAuthTicket
	 * @see com.mozu.api.contracts.customer.CustomerLoginInfo
	 */
	public com.mozu.api.contracts.customer.CustomerAuthTicket addLoginToExistingCustomer(com.mozu.api.contracts.customer.CustomerLoginInfo customerAuthInfo, Integer accountId, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.customer.CustomerAuthTicket> client = com.mozu.api.clients.commerce.customer.CustomerAccountClient.addLoginToExistingCustomerClient( customerAuthInfo,  accountId,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CustomerAccount customeraccount = new CustomerAccount();
	 *	Stream stream = customeraccount.recomputeCustomerLifetimeValue( accountId);
	 * </code></pre></p>
	 * @param accountId The unique identifier of the customer account for which to calculate customer lifetime value.
	 * @return Stream
	 * @see Stream
	 */
	public java.io.InputStream recomputeCustomerLifetimeValue(Integer accountId) throws Exception
	{
		MozuClient<java.io.InputStream> client = com.mozu.api.clients.commerce.customer.CustomerAccountClient.recomputeCustomerLifetimeValueClient( accountId);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CustomerAccount customeraccount = new CustomerAccount();
	 *	Stream stream = customeraccount.setLoginLocked( isLocked,  accountId);
	 * </code></pre></p>
	 * @param accountId The unique identifier of the customer account.
	 * @param isLocked If true, the customer account is locked from logging in.
	 * @return Stream
	 * @see Stream
	 * @see bool
	 */
	public java.io.InputStream setLoginLocked(Boolean isLocked, Integer accountId) throws Exception
	{
		return setLoginLocked( isLocked,  accountId,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	CustomerAccount customeraccount = new CustomerAccount();
	 *	Stream stream = customeraccount.setLoginLocked( isLocked,  accountId,  userId);
	 * </code></pre></p>
	 * @param accountId The unique identifier of the customer account.
	 * @param userId 
	 * @param isLocked If true, the customer account is locked from logging in.
	 * @return Stream
	 * @see Stream
	 * @see bool
	 */
	public java.io.InputStream setLoginLocked(Boolean isLocked, Integer accountId, String userId) throws Exception
	{
		MozuClient<java.io.InputStream> client = com.mozu.api.clients.commerce.customer.CustomerAccountClient.setLoginLockedClient( isLocked,  accountId,  userId);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CustomerAccount customeraccount = new CustomerAccount();
	 *	Stream stream = customeraccount.setPasswordChangeRequired( isPasswordChangeRequired,  accountId);
	 * </code></pre></p>
	 * @param accountId Unique identifier of the customer account.
	 * @param isPasswordChangeRequired If true, the password for the customer account must be changed.
	 * @return Stream
	 * @see Stream
	 * @see bool
	 */
	public java.io.InputStream setPasswordChangeRequired(Boolean isPasswordChangeRequired, Integer accountId) throws Exception
	{
		return setPasswordChangeRequired( isPasswordChangeRequired,  accountId,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	CustomerAccount customeraccount = new CustomerAccount();
	 *	Stream stream = customeraccount.setPasswordChangeRequired( isPasswordChangeRequired,  accountId,  userId);
	 * </code></pre></p>
	 * @param accountId Unique identifier of the customer account.
	 * @param userId 
	 * @param isPasswordChangeRequired If true, the password for the customer account must be changed.
	 * @return Stream
	 * @see Stream
	 * @see bool
	 */
	public java.io.InputStream setPasswordChangeRequired(Boolean isPasswordChangeRequired, Integer accountId, String userId) throws Exception
	{
		MozuClient<java.io.InputStream> client = com.mozu.api.clients.commerce.customer.CustomerAccountClient.setPasswordChangeRequiredClient( isPasswordChangeRequired,  accountId,  userId);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CustomerAccount customeraccount = new CustomerAccount();
	 *	CustomerAuthTicket customerAuthTicket = customeraccount.addAccountAndLogin( accountAndAuthInfo);
	 * </code></pre></p>
	 * @param accountAndAuthInfo Properties of the customer account to create, including the user authentication information.
	 * @return com.mozu.api.contracts.customer.CustomerAuthTicket
	 * @see com.mozu.api.contracts.customer.CustomerAuthTicket
	 * @see com.mozu.api.contracts.customer.CustomerAccountAndAuthInfo
	 */
	public com.mozu.api.contracts.customer.CustomerAuthTicket addAccountAndLogin(com.mozu.api.contracts.customer.CustomerAccountAndAuthInfo accountAndAuthInfo) throws Exception
	{
		return addAccountAndLogin( accountAndAuthInfo,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	CustomerAccount customeraccount = new CustomerAccount();
	 *	CustomerAuthTicket customerAuthTicket = customeraccount.addAccountAndLogin( accountAndAuthInfo,  responseFields);
	 * </code></pre></p>
	 * @param responseFields 
	 * @param accountAndAuthInfo Properties of the customer account to create, including the user authentication information.
	 * @return com.mozu.api.contracts.customer.CustomerAuthTicket
	 * @see com.mozu.api.contracts.customer.CustomerAuthTicket
	 * @see com.mozu.api.contracts.customer.CustomerAccountAndAuthInfo
	 */
	public com.mozu.api.contracts.customer.CustomerAuthTicket addAccountAndLogin(com.mozu.api.contracts.customer.CustomerAccountAndAuthInfo accountAndAuthInfo, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.customer.CustomerAuthTicket> client = com.mozu.api.clients.commerce.customer.CustomerAccountClient.addAccountAndLoginClient( accountAndAuthInfo,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CustomerAccount customeraccount = new CustomerAccount();
	 *	CustomerAccountCollection customerAccountCollection = customeraccount.addAccounts( customers);
	 * </code></pre></p>
	 * @param customers Properties of the customer accounts to create.
	 * @return com.mozu.api.contracts.customer.CustomerAccountCollection
	 * @see com.mozu.api.contracts.customer.CustomerAccountCollection
	 * @see com.mozu.api.contracts.customer.CustomerAccountAndAuthInfo
	 */
	public com.mozu.api.contracts.customer.CustomerAccountCollection addAccounts(List<com.mozu.api.contracts.customer.CustomerAccountAndAuthInfo> customers) throws Exception
	{
		return addAccounts( customers,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	CustomerAccount customeraccount = new CustomerAccount();
	 *	CustomerAccountCollection customerAccountCollection = customeraccount.addAccounts( customers,  responseFields);
	 * </code></pre></p>
	 * @param responseFields 
	 * @param customers Properties of the customer accounts to create.
	 * @return com.mozu.api.contracts.customer.CustomerAccountCollection
	 * @see com.mozu.api.contracts.customer.CustomerAccountCollection
	 * @see com.mozu.api.contracts.customer.CustomerAccountAndAuthInfo
	 */
	public com.mozu.api.contracts.customer.CustomerAccountCollection addAccounts(List<com.mozu.api.contracts.customer.CustomerAccountAndAuthInfo> customers, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.customer.CustomerAccountCollection> client = com.mozu.api.clients.commerce.customer.CustomerAccountClient.addAccountsClient( customers,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CustomerAccount customeraccount = new CustomerAccount();
	 *	ChangePasswordResultCollection changePasswordResultCollection = customeraccount.changePasswords( accountPasswordInfos);
	 * </code></pre></p>
	 * @param accountPasswordInfos 
	 * @return com.mozu.api.contracts.customer.ChangePasswordResultCollection
	 * @see com.mozu.api.contracts.customer.ChangePasswordResultCollection
	 * @see com.mozu.api.contracts.customer.AccountPasswordInfoCollection
	 */
	public com.mozu.api.contracts.customer.ChangePasswordResultCollection changePasswords(com.mozu.api.contracts.customer.AccountPasswordInfoCollection accountPasswordInfos) throws Exception
	{
		return changePasswords( accountPasswordInfos,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	CustomerAccount customeraccount = new CustomerAccount();
	 *	ChangePasswordResultCollection changePasswordResultCollection = customeraccount.changePasswords( accountPasswordInfos,  responseFields);
	 * </code></pre></p>
	 * @param responseFields 
	 * @param accountPasswordInfos 
	 * @return com.mozu.api.contracts.customer.ChangePasswordResultCollection
	 * @see com.mozu.api.contracts.customer.ChangePasswordResultCollection
	 * @see com.mozu.api.contracts.customer.AccountPasswordInfoCollection
	 */
	public com.mozu.api.contracts.customer.ChangePasswordResultCollection changePasswords(com.mozu.api.contracts.customer.AccountPasswordInfoCollection accountPasswordInfos, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.customer.ChangePasswordResultCollection> client = com.mozu.api.clients.commerce.customer.CustomerAccountClient.changePasswordsClient( accountPasswordInfos,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CustomerAccount customeraccount = new CustomerAccount();
	 *	LoginState loginState = customeraccount.getLoginStateByEmailAddress( emailAddress);
	 * </code></pre></p>
	 * @param emailAddress The email address associated with the customer account.
	 * @return com.mozu.api.contracts.customer.LoginState
	 * @see com.mozu.api.contracts.customer.LoginState
	 */
	public com.mozu.api.contracts.customer.LoginState getLoginStateByEmailAddress(String emailAddress) throws Exception
	{
		return getLoginStateByEmailAddress( emailAddress,  null,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	CustomerAccount customeraccount = new CustomerAccount();
	 *	LoginState loginState = customeraccount.getLoginStateByEmailAddress( emailAddress,  customerSetCode,  responseFields);
	 * </code></pre></p>
	 * @param customerSetCode 
	 * @param emailAddress The email address associated with the customer account.
	 * @param responseFields 
	 * @return com.mozu.api.contracts.customer.LoginState
	 * @see com.mozu.api.contracts.customer.LoginState
	 */
	public com.mozu.api.contracts.customer.LoginState getLoginStateByEmailAddress(String emailAddress, String customerSetCode, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.customer.LoginState> client = com.mozu.api.clients.commerce.customer.CustomerAccountClient.getLoginStateByEmailAddressClient( emailAddress,  customerSetCode,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CustomerAccount customeraccount = new CustomerAccount();
	 *	LoginState loginState = customeraccount.getLoginStateByUserName( userName);
	 * </code></pre></p>
	 * @param userName The user name associated with the customer account.
	 * @return com.mozu.api.contracts.customer.LoginState
	 * @see com.mozu.api.contracts.customer.LoginState
	 */
	public com.mozu.api.contracts.customer.LoginState getLoginStateByUserName(String userName) throws Exception
	{
		return getLoginStateByUserName( userName,  null,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	CustomerAccount customeraccount = new CustomerAccount();
	 *	LoginState loginState = customeraccount.getLoginStateByUserName( userName,  customerSetCode,  responseFields);
	 * </code></pre></p>
	 * @param customerSetCode 
	 * @param responseFields 
	 * @param userName The user name associated with the customer account.
	 * @return com.mozu.api.contracts.customer.LoginState
	 * @see com.mozu.api.contracts.customer.LoginState
	 */
	public com.mozu.api.contracts.customer.LoginState getLoginStateByUserName(String userName, String customerSetCode, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.customer.LoginState> client = com.mozu.api.clients.commerce.customer.CustomerAccountClient.getLoginStateByUserNameClient( userName,  customerSetCode,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CustomerAccount customeraccount = new CustomerAccount();
	 *	CustomerPurchaseOrderAccountCollection customerPurchaseOrderAccountCollection = customeraccount.getCustomersPurchaseOrderAccounts();
	 * </code></pre></p>
	 * @return com.mozu.api.contracts.customer.CustomerPurchaseOrderAccountCollection
	 * @see com.mozu.api.contracts.customer.CustomerPurchaseOrderAccountCollection
	 */
	public com.mozu.api.contracts.customer.CustomerPurchaseOrderAccountCollection getCustomersPurchaseOrderAccounts() throws Exception
	{
		return getCustomersPurchaseOrderAccounts( null,  null,  null,  null,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	CustomerAccount customeraccount = new CustomerAccount();
	 *	CustomerPurchaseOrderAccountCollection customerPurchaseOrderAccountCollection = customeraccount.getCustomersPurchaseOrderAccounts( startIndex,  pageSize,  sortBy,  accountType,  responseFields);
	 * </code></pre></p>
	 * @param accountType 
	 * @param pageSize 
	 * @param responseFields 
	 * @param sortBy 
	 * @param startIndex 
	 * @return com.mozu.api.contracts.customer.CustomerPurchaseOrderAccountCollection
	 * @see com.mozu.api.contracts.customer.CustomerPurchaseOrderAccountCollection
	 */
	public com.mozu.api.contracts.customer.CustomerPurchaseOrderAccountCollection getCustomersPurchaseOrderAccounts(Integer startIndex, Integer pageSize, String sortBy, String accountType, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.customer.CustomerPurchaseOrderAccountCollection> client = com.mozu.api.clients.commerce.customer.CustomerAccountClient.getCustomersPurchaseOrderAccountsClient( startIndex,  pageSize,  sortBy,  accountType,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CustomerAccount customeraccount = new CustomerAccount();
	 *	Stream stream = customeraccount.resetPassword( resetPasswordInfo);
	 * </code></pre></p>
	 * @param resetPasswordInfo Information required to reset the password for a customer account.
	 * @return Stream
	 * @see Stream
	 * @see com.mozu.api.contracts.customer.ResetPasswordInfo
	 */
	public java.io.InputStream resetPassword(com.mozu.api.contracts.customer.ResetPasswordInfo resetPasswordInfo) throws Exception
	{
		MozuClient<java.io.InputStream> client = com.mozu.api.clients.commerce.customer.CustomerAccountClient.resetPasswordClient( resetPasswordInfo);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CustomerAccount customeraccount = new CustomerAccount();
	 *	CustomerAccount customerAccount = customeraccount.updateAccount( account,  accountId);
	 * </code></pre></p>
	 * @param accountId Unique identifier of the customer account.
	 * @param account Properties of the customer account to update.
	 * @return com.mozu.api.contracts.customer.CustomerAccount
	 * @see com.mozu.api.contracts.customer.CustomerAccount
	 * @see com.mozu.api.contracts.customer.CustomerAccount
	 */
	public com.mozu.api.contracts.customer.CustomerAccount updateAccount(com.mozu.api.contracts.customer.CustomerAccount account, Integer accountId) throws Exception
	{
		return updateAccount( account,  accountId,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	CustomerAccount customeraccount = new CustomerAccount();
	 *	CustomerAccount customerAccount = customeraccount.updateAccount( account,  accountId,  responseFields);
	 * </code></pre></p>
	 * @param accountId Unique identifier of the customer account.
	 * @param responseFields 
	 * @param account Properties of the customer account to update.
	 * @return com.mozu.api.contracts.customer.CustomerAccount
	 * @see com.mozu.api.contracts.customer.CustomerAccount
	 * @see com.mozu.api.contracts.customer.CustomerAccount
	 */
	public com.mozu.api.contracts.customer.CustomerAccount updateAccount(com.mozu.api.contracts.customer.CustomerAccount account, Integer accountId, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.customer.CustomerAccount> client = com.mozu.api.clients.commerce.customer.CustomerAccountClient.updateAccountClient( account,  accountId,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CustomerAccount customeraccount = new CustomerAccount();
	 *	Stream stream = customeraccount.deleteAccount( accountId);
	 * </code></pre></p>
	 * @param accountId Unique identifier of the customer account to delete.
	 * @return Stream
	 * @see Stream
	 */
	public java.io.InputStream deleteAccount(Integer accountId) throws Exception
	{
		MozuClient<java.io.InputStream> client = com.mozu.api.clients.commerce.customer.CustomerAccountClient.deleteAccountClient( accountId);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

}



