/**
 *     This code was auto-generated by a Codezu.     
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
 */
package com.mozu.api.resources.platform.developer;

import com.mozu.api.ApiContext;
import java.util.List;
import java.util.ArrayList;
import com.mozu.api.MozuClient;
import com.mozu.api.MozuUrl;
import com.mozu.api.Headers;
import com.mozu.api.security.AuthTicket;
import org.apache.commons.lang3.StringUtils;

/** <summary>
 * Use the Applications resource to manage the applications associated with a developer account.
 * </summary>
 */
public class ApplicationResource {
	///
	/// <see cref="Mozu.Api.ApiContext"/>
	///
	private ApiContext _apiContext;

		public ApplicationResource() 
	{
		_apiContext = null;
	}
	 
	public ApplicationResource(ApiContext apiContext) 
	{
		_apiContext = apiContext;
	}
	
	/**
	 * Retrieves the list of applications associated with the developer account scoped to the user claim specified in the request.
	 * <p><pre><code>
	 *	Application application = new Application();
	 *	ApplicationCollection applicationCollection = application.GetAllApplications();
	 * </code></pre></p>
	 * @return com.mozu.api.contracts.appdev.ApplicationCollection
	 * @see com.mozu.api.contracts.appdev.ApplicationCollection
	 */
	public com.mozu.api.contracts.appdev.ApplicationCollection getAllApplications() throws Exception
	{
		return getAllApplications( null);
	}

	/**
	 * Retrieves the list of applications associated with the developer account scoped to the user claim specified in the request.
	 * <p><pre><code>
	 *	Application application = new Application();
	 *	ApplicationCollection applicationCollection = application.GetAllApplications( responseFields);
	 * </code></pre></p>
	 * @param responseFields 
	 * @return com.mozu.api.contracts.appdev.ApplicationCollection
	 * @see com.mozu.api.contracts.appdev.ApplicationCollection
	 */
	public com.mozu.api.contracts.appdev.ApplicationCollection getAllApplications(String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.appdev.ApplicationCollection> client = com.mozu.api.clients.platform.developer.ApplicationClient.getAllApplicationsClient( responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * Retrieves the metadata of a file in a package for an application version. The application must be associated with the developer account scoped to the user claim specified in the request.
	 * <p><pre><code>
	 *	Application application = new Application();
	 *	FileMetadata fileMetadata = application.GetPackageItemMetadata( applicationId,  packageId,  itempath);
	 * </code></pre></p>
	 * @param applicationId 
	 * @param itempath Complete file directory location and name of the item in the package to retrieve metadata.
	 * @param packageId Unique identifier of the package.
	 * @return com.mozu.api.contracts.appdev.FileMetadata
	 * @see com.mozu.api.contracts.appdev.FileMetadata
	 */
	public com.mozu.api.contracts.appdev.FileMetadata getPackageItemMetadata(Integer applicationId, Integer packageId, String itempath) throws Exception
	{
		return getPackageItemMetadata( applicationId,  packageId,  itempath,  null);
	}

	/**
	 * Retrieves the metadata of a file in a package for an application version. The application must be associated with the developer account scoped to the user claim specified in the request.
	 * <p><pre><code>
	 *	Application application = new Application();
	 *	FileMetadata fileMetadata = application.GetPackageItemMetadata( applicationId,  packageId,  itempath,  responseFields);
	 * </code></pre></p>
	 * @param applicationId 
	 * @param itempath Complete file directory location and name of the item in the package to retrieve metadata.
	 * @param packageId Unique identifier of the package.
	 * @param responseFields 
	 * @return com.mozu.api.contracts.appdev.FileMetadata
	 * @see com.mozu.api.contracts.appdev.FileMetadata
	 */
	public com.mozu.api.contracts.appdev.FileMetadata getPackageItemMetadata(Integer applicationId, Integer packageId, String itempath, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.appdev.FileMetadata> client = com.mozu.api.clients.platform.developer.ApplicationClient.getPackageItemMetadataClient( applicationId,  packageId,  itempath,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * Retrieves the metadata for items in a package associated with an application version, including a list of all files and subfolders. The application must be associated with the developer account scoped to the user claim specified in the request.
	 * <p><pre><code>
	 *	Application application = new Application();
	 *	FolderMetadata folderMetadata = application.GetPackageItemsMetadata( applicationId,  packageId);
	 * </code></pre></p>
	 * @param applicationId 
	 * @param packageId Unique identifier of the package.
	 * @return com.mozu.api.contracts.appdev.FolderMetadata
	 * @see com.mozu.api.contracts.appdev.FolderMetadata
	 */
	public com.mozu.api.contracts.appdev.FolderMetadata getPackageItemsMetadata(Integer applicationId, Integer packageId) throws Exception
	{
		return getPackageItemsMetadata( applicationId,  packageId,  null);
	}

	/**
	 * Retrieves the metadata for items in a package associated with an application version, including a list of all files and subfolders. The application must be associated with the developer account scoped to the user claim specified in the request.
	 * <p><pre><code>
	 *	Application application = new Application();
	 *	FolderMetadata folderMetadata = application.GetPackageItemsMetadata( applicationId,  packageId,  responseFields);
	 * </code></pre></p>
	 * @param applicationId 
	 * @param packageId Unique identifier of the package.
	 * @param responseFields 
	 * @return com.mozu.api.contracts.appdev.FolderMetadata
	 * @see com.mozu.api.contracts.appdev.FolderMetadata
	 */
	public com.mozu.api.contracts.appdev.FolderMetadata getPackageItemsMetadata(Integer applicationId, Integer packageId, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.appdev.FolderMetadata> client = com.mozu.api.clients.platform.developer.ApplicationClient.getPackageItemsMetadataClient( applicationId,  packageId,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * Retrieves the package of files and sends them to a compressed (zipped) archive.
	 * <p><pre><code>
	 *	Application application = new Application();
	 *	Stream stream = application.GetPackageFilesZip( applicationId,  packageId);
	 * </code></pre></p>
	 * @param applicationId 
	 * @param packageId The unique identifier of the package to zip.
	 * @return Stream
	 * @see Stream
	 */
	public java.io.InputStream getPackageFilesZip(Integer applicationId, Integer packageId) throws Exception
	{
		MozuClient<java.io.InputStream> client = com.mozu.api.clients.platform.developer.ApplicationClient.getPackageFilesZipClient( applicationId,  packageId);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * Retrieves the details of a package definition associated with an application version. The application must be associated with the developer account scoped to the user claim specified in the request.
	 * <p><pre><code>
	 *	Application application = new Application();
	 *	Package package = application.GetPackage( packageId);
	 * </code></pre></p>
	 * @param packageId Unique identifier of the package to retrieve.
	 * @return com.mozu.api.contracts.appdev.Package
	 * @see com.mozu.api.contracts.appdev.Package
	 */
	public com.mozu.api.contracts.appdev.Package getPackage(Integer packageId) throws Exception
	{
		return getPackage( packageId,  null);
	}

	/**
	 * Retrieves the details of a package definition associated with an application version. The application must be associated with the developer account scoped to the user claim specified in the request.
	 * <p><pre><code>
	 *	Application application = new Application();
	 *	Package package = application.GetPackage( packageId,  responseFields);
	 * </code></pre></p>
	 * @param packageId Unique identifier of the package to retrieve.
	 * @param responseFields 
	 * @return com.mozu.api.contracts.appdev.Package
	 * @see com.mozu.api.contracts.appdev.Package
	 */
	public com.mozu.api.contracts.appdev.Package getPackage(Integer packageId, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.appdev.Package> client = com.mozu.api.clients.platform.developer.ApplicationClient.getPackageClient( packageId,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * Retrieves a list of the package definitions created for an application version, including all development packages and release packages. The application must be associated with the developer account scoped to the user claim specified in the request.
	 * <p><pre><code>
	 *	Application application = new Application();
	 *	PackageCollection packageCollection = application.GetPackages( applicationId);
	 * </code></pre></p>
	 * @param applicationId 
	 * @return com.mozu.api.contracts.appdev.PackageCollection
	 * @see com.mozu.api.contracts.appdev.PackageCollection
	 */
	public com.mozu.api.contracts.appdev.PackageCollection getPackages(Integer applicationId) throws Exception
	{
		return getPackages( applicationId,  null);
	}

	/**
	 * Retrieves a list of the package definitions created for an application version, including all development packages and release packages. The application must be associated with the developer account scoped to the user claim specified in the request.
	 * <p><pre><code>
	 *	Application application = new Application();
	 *	PackageCollection packageCollection = application.GetPackages( applicationId,  responseFields);
	 * </code></pre></p>
	 * @param applicationId 
	 * @param responseFields 
	 * @return com.mozu.api.contracts.appdev.PackageCollection
	 * @see com.mozu.api.contracts.appdev.PackageCollection
	 */
	public com.mozu.api.contracts.appdev.PackageCollection getPackages(Integer applicationId, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.appdev.PackageCollection> client = com.mozu.api.clients.platform.developer.ApplicationClient.getPackagesClient( applicationId,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * Retrieves the details of the application specified in the request. The application specified in the request must be associated with the developer account scoped to the user claim specified in the request header, otherwise the operation returns an error.
	 * <p><pre><code>
	 *	Application application = new Application();
	 *	Application application = application.GetApplication( applicationId);
	 * </code></pre></p>
	 * @param applicationId Unique identifier of the application.
	 * @return com.mozu.api.contracts.appdev.Application
	 * @see com.mozu.api.contracts.appdev.Application
	 */
	public com.mozu.api.contracts.appdev.Application getApplication(Integer applicationId) throws Exception
	{
		return getApplication( applicationId,  null);
	}

	/**
	 * Retrieves the details of the application specified in the request. The application specified in the request must be associated with the developer account scoped to the user claim specified in the request header, otherwise the operation returns an error.
	 * <p><pre><code>
	 *	Application application = new Application();
	 *	Application application = application.GetApplication( applicationId,  responseFields);
	 * </code></pre></p>
	 * @param applicationId Unique identifier of the application.
	 * @param responseFields 
	 * @return com.mozu.api.contracts.appdev.Application
	 * @see com.mozu.api.contracts.appdev.Application
	 */
	public com.mozu.api.contracts.appdev.Application getApplication(Integer applicationId, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.appdev.Application> client = com.mozu.api.clients.platform.developer.ApplicationClient.getApplicationClient( applicationId,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * Update the file name or file path of a development package or release package.
	 * <p><pre><code>
	 *	Application application = new Application();
	 *	FileMetadata fileMetadata = application.ChangePackageFileNameOrPath( renameInfo,  applicationId,  packageId);
	 * </code></pre></p>
	 * @param applicationId 
	 * @param packageId The unique identifier of the development or release package.
	 * @param renameInfo The file name or path to rename the package.
	 * @return com.mozu.api.contracts.appdev.FileMetadata
	 * @see com.mozu.api.contracts.appdev.FileMetadata
	 * @see com.mozu.api.contracts.appdev.RenameInfo
	 */
	public com.mozu.api.contracts.appdev.FileMetadata changePackageFileNameOrPath(com.mozu.api.contracts.appdev.RenameInfo renameInfo, Integer applicationId, Integer packageId) throws Exception
	{
		return changePackageFileNameOrPath( renameInfo,  applicationId,  packageId,  null);
	}

	/**
	 * Update the file name or file path of a development package or release package.
	 * <p><pre><code>
	 *	Application application = new Application();
	 *	FileMetadata fileMetadata = application.ChangePackageFileNameOrPath( renameInfo,  applicationId,  packageId,  responseFields);
	 * </code></pre></p>
	 * @param applicationId 
	 * @param packageId The unique identifier of the development or release package.
	 * @param responseFields 
	 * @param renameInfo The file name or path to rename the package.
	 * @return com.mozu.api.contracts.appdev.FileMetadata
	 * @see com.mozu.api.contracts.appdev.FileMetadata
	 * @see com.mozu.api.contracts.appdev.RenameInfo
	 */
	public com.mozu.api.contracts.appdev.FileMetadata changePackageFileNameOrPath(com.mozu.api.contracts.appdev.RenameInfo renameInfo, Integer applicationId, Integer packageId, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.appdev.FileMetadata> client = com.mozu.api.clients.platform.developer.ApplicationClient.changePackageFileNameOrPathClient( renameInfo,  applicationId,  packageId,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * Uploads a file to a defined package for an application version in the file location specified in the request.
	 * <p><pre><code>
	 *	Application application = new Application();
	 *	FileMetadata fileMetadata = application.AddPackageFile( stream,  applicationId,  packageId,  filepath,  contentType);
	 * </code></pre></p>
	 * @param applicationId 
	 * @param filepath The file location to which to add the package file.
	 * @param packageId Unique identifier of the package.
	 * @param stream The contents of the package file to upload, which requires a content-type value of "application/octet-stream" in the request header.
	 * @return com.mozu.api.contracts.appdev.FileMetadata
	 * @see com.mozu.api.contracts.appdev.FileMetadata
	 * @see Stream
	 */
	public com.mozu.api.contracts.appdev.FileMetadata addPackageFile(java.io.InputStream stream, Integer applicationId, Integer packageId, String filepath, String  contentType) throws Exception
	{
		return addPackageFile( stream,  applicationId,  packageId,  filepath,  null,  contentType);
	}

	/**
	 * Uploads a file to a defined package for an application version in the file location specified in the request.
	 * <p><pre><code>
	 *	Application application = new Application();
	 *	FileMetadata fileMetadata = application.AddPackageFile( stream,  applicationId,  packageId,  filepath,  responseFields,  contentType);
	 * </code></pre></p>
	 * @param applicationId 
	 * @param filepath The file location to which to add the package file.
	 * @param packageId Unique identifier of the package.
	 * @param responseFields 
	 * @param stream The contents of the package file to upload, which requires a content-type value of "application/octet-stream" in the request header.
	 * @return com.mozu.api.contracts.appdev.FileMetadata
	 * @see com.mozu.api.contracts.appdev.FileMetadata
	 * @see Stream
	 */
	public com.mozu.api.contracts.appdev.FileMetadata addPackageFile(java.io.InputStream stream, Integer applicationId, Integer packageId, String filepath, String responseFields, String  contentType) throws Exception
	{
		MozuClient<com.mozu.api.contracts.appdev.FileMetadata> client = com.mozu.api.clients.platform.developer.ApplicationClient.addPackageFileClient( stream,  applicationId,  packageId,  filepath,  responseFields,  contentType);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * Creates a new development or release package for the application version specified in the request.
	 * <p><pre><code>
	 *	Application application = new Application();
	 *	Package package = application.AddPackage( pkg,  applicationId);
	 * </code></pre></p>
	 * @param applicationId 
	 * @param package Properties of the development or release package to define.
	 * @return com.mozu.api.contracts.appdev.Package
	 * @see com.mozu.api.contracts.appdev.Package
	 * @see com.mozu.api.contracts.appdev.Package
	 */
	public com.mozu.api.contracts.appdev.Package addPackage(com.mozu.api.contracts.appdev.Package pkg, Integer applicationId) throws Exception
	{
		return addPackage( pkg,  applicationId,  null);
	}

	/**
	 * Creates a new development or release package for the application version specified in the request.
	 * <p><pre><code>
	 *	Application application = new Application();
	 *	Package package = application.AddPackage( pkg,  applicationId,  responseFields);
	 * </code></pre></p>
	 * @param applicationId 
	 * @param responseFields 
	 * @param package Properties of the development or release package to define.
	 * @return com.mozu.api.contracts.appdev.Package
	 * @see com.mozu.api.contracts.appdev.Package
	 * @see com.mozu.api.contracts.appdev.Package
	 */
	public com.mozu.api.contracts.appdev.Package addPackage(com.mozu.api.contracts.appdev.Package pkg, Integer applicationId, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.appdev.Package> client = com.mozu.api.clients.platform.developer.ApplicationClient.addPackageClient( pkg,  applicationId,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * Updates one or more properties of a file in a package associated with an application version.
	 * <p><pre><code>
	 *	Application application = new Application();
	 *	FileMetadata fileMetadata = application.UpdatePackageFile( stream,  applicationId,  packageId,  filepath,  contentType);
	 * </code></pre></p>
	 * @param applicationId 
	 * @param filepath The location path and name that identifies the package file to update.
	 * @param packageId The unique identifier of the package.
	 * @param stream The contents of the package file to update, which requires a content-type value of "application/octet-stream" in the request header.
	 * @return com.mozu.api.contracts.appdev.FileMetadata
	 * @see com.mozu.api.contracts.appdev.FileMetadata
	 * @see Stream
	 */
	public com.mozu.api.contracts.appdev.FileMetadata updatePackageFile(java.io.InputStream stream, Integer applicationId, Integer packageId, String filepath, String  contentType) throws Exception
	{
		return updatePackageFile( stream,  applicationId,  packageId,  filepath,  null,  contentType);
	}

	/**
	 * Updates one or more properties of a file in a package associated with an application version.
	 * <p><pre><code>
	 *	Application application = new Application();
	 *	FileMetadata fileMetadata = application.UpdatePackageFile( stream,  applicationId,  packageId,  filepath,  responseFields,  contentType);
	 * </code></pre></p>
	 * @param applicationId 
	 * @param filepath The location path and name that identifies the package file to update.
	 * @param packageId The unique identifier of the package.
	 * @param responseFields 
	 * @param stream The contents of the package file to update, which requires a content-type value of "application/octet-stream" in the request header.
	 * @return com.mozu.api.contracts.appdev.FileMetadata
	 * @see com.mozu.api.contracts.appdev.FileMetadata
	 * @see Stream
	 */
	public com.mozu.api.contracts.appdev.FileMetadata updatePackageFile(java.io.InputStream stream, Integer applicationId, Integer packageId, String filepath, String responseFields, String  contentType) throws Exception
	{
		MozuClient<com.mozu.api.contracts.appdev.FileMetadata> client = com.mozu.api.clients.platform.developer.ApplicationClient.updatePackageFileClient( stream,  applicationId,  packageId,  filepath,  responseFields,  contentType);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * Deletes the specified file from a package associated with an application version.
	 * <p><pre><code>
	 *	Application application = new Application();
	 *	application.DeletePackageFile( applicationId,  packageId,  filepath);
	 * </code></pre></p>
	 * @param applicationId 
	 * @param filepath The file path and name of the file location to delete from the package.
	 * @param packageId Unique identifier of the package.
	 * @return 
	 */
	public void deletePackageFile(Integer applicationId, Integer packageId, String filepath) throws Exception
	{
		MozuClient client = com.mozu.api.clients.platform.developer.ApplicationClient.deletePackageFileClient( applicationId,  packageId,  filepath);
		client.setContext(_apiContext);
		client.executeRequest();

	}

}



