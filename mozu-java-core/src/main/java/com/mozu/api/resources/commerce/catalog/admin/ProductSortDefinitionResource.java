/**
 *     This code was auto-generated by a Codezu.     
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
 */
package com.mozu.api.resources.commerce.catalog.admin;

import com.mozu.api.ApiContext;
import java.util.List;
import java.util.ArrayList;
import com.mozu.api.MozuClient;
import com.mozu.api.MozuClientFactory;
import com.mozu.api.MozuUrl;
import com.mozu.api.Headers;
import org.joda.time.DateTime;
import com.mozu.api.security.AuthTicket;
import org.apache.commons.lang.StringUtils;

import com.mozu.api.DataViewMode;
/** <summary>
 * Use the Product Sort Definition resource to create, update, and delete sort order definitions used in visual merchandising.You can use these definitions to apply organization rules to a category defined by a product property or custom attribute. The sort order determines the order that products are displayed in, such as newest to oldest, so that they can be rearranged.
 * </summary>
 */
public class ProductSortDefinitionResource {
	///
	/// <see cref="Mozu.Api.ApiContext"/>
	///
	private ApiContext _apiContext;

	private DataViewMode _dataViewMode;

	public ProductSortDefinitionResource(ApiContext apiContext) 
	{
		_apiContext = apiContext;
		_dataViewMode = DataViewMode.Live;
	}

	public ProductSortDefinitionResource(ApiContext apiContext, DataViewMode dataViewMode) 
	{
		_apiContext = apiContext;
		_dataViewMode = dataViewMode;
	}
		
	/**
	 * 
	 * <p><pre><code>
	 *	ProductSortDefinition productsortdefinition = new ProductSortDefinition();
	 *	ProductSortDefinitionPagedCollection productSortDefinitionPagedCollection = productsortdefinition.getProductSortDefinitions();
	 * </code></pre></p>
	 * @return com.mozu.api.contracts.productadmin.ProductSortDefinitionPagedCollection
	 * @see com.mozu.api.contracts.productadmin.ProductSortDefinitionPagedCollection
	 */
	public com.mozu.api.contracts.productadmin.ProductSortDefinitionPagedCollection getProductSortDefinitions() throws Exception
	{
		return getProductSortDefinitions( null,  null,  null,  null,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductSortDefinition productsortdefinition = new ProductSortDefinition();
	 *	ProductSortDefinitionPagedCollection productSortDefinitionPagedCollection = productsortdefinition.getProductSortDefinitions( startIndex,  pageSize,  sortBy,  filter,  responseFields);
	 * </code></pre></p>
	 * @param filter A set of filter expressions representing the search parameters for a query. This parameter is optional. Refer to [Sorting and Filtering](../../../../Developer/api-guides/sorting-filtering.htm) for a list of supported filters.
	 * @param pageSize When creating paged results from a query, this value indicates the zero-based offset in the complete result set where the returned entities begin. For example, with this parameter set to 25, to get the 51st through the 75th items, set startIndex to 50.
	 * @param responseFields Filtering syntax appended to an API call to increase or decrease the amount of data returned inside a JSON object. This parameter should only be used to retrieve data. Attempting to update data using this parameter may cause data loss.
	 * @param sortBy The element to sort the results by and the channel in which the results appear. Either ascending (a-z) or descending (z-a) channel. Optional. Refer to [Sorting and Filtering](../../../../Developer/api-guides/sorting-filtering.htm) for more information.
	 * @param startIndex When creating paged results from a query, this value indicates the zero-based offset in the complete result set where the returned entities begin. For example, with pageSize set to 25, to get the 51st through the 75th items, set this parameter to 50.
	 * @return com.mozu.api.contracts.productadmin.ProductSortDefinitionPagedCollection
	 * @see com.mozu.api.contracts.productadmin.ProductSortDefinitionPagedCollection
	 */
	public com.mozu.api.contracts.productadmin.ProductSortDefinitionPagedCollection getProductSortDefinitions(Integer startIndex, Integer pageSize, String sortBy, String filter, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.ProductSortDefinitionPagedCollection> client = com.mozu.api.clients.commerce.catalog.admin.ProductSortDefinitionClient.getProductSortDefinitionsClient(_dataViewMode,  startIndex,  pageSize,  sortBy,  filter,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductSortDefinition productsortdefinition = new ProductSortDefinition();
	 *	ProductSortDefinition productSortDefinition = productsortdefinition.getProductSortDefinition( productSortDefinitionId);
	 * </code></pre></p>
	 * @param productSortDefinitionId Unique identifier of the product sort definition.
	 * @return com.mozu.api.contracts.productadmin.ProductSortDefinition
	 * @see com.mozu.api.contracts.productadmin.ProductSortDefinition
	 */
	public com.mozu.api.contracts.productadmin.ProductSortDefinition getProductSortDefinition(Integer productSortDefinitionId) throws Exception
	{
		return getProductSortDefinition( productSortDefinitionId,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductSortDefinition productsortdefinition = new ProductSortDefinition();
	 *	ProductSortDefinition productSortDefinition = productsortdefinition.getProductSortDefinition( productSortDefinitionId,  responseFields);
	 * </code></pre></p>
	 * @param productSortDefinitionId Unique identifier of the product sort definition.
	 * @param responseFields Filtering syntax appended to an API call to increase or decrease the amount of data returned inside a JSON object. This parameter should only be used to retrieve data. Attempting to update data using this parameter may cause data loss.
	 * @return com.mozu.api.contracts.productadmin.ProductSortDefinition
	 * @see com.mozu.api.contracts.productadmin.ProductSortDefinition
	 */
	public com.mozu.api.contracts.productadmin.ProductSortDefinition getProductSortDefinition(Integer productSortDefinitionId, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.ProductSortDefinition> client = com.mozu.api.clients.commerce.catalog.admin.ProductSortDefinitionClient.getProductSortDefinitionClient(_dataViewMode,  productSortDefinitionId,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductSortDefinition productsortdefinition = new ProductSortDefinition();
	 *	ProductSortDefinition productSortDefinition = productsortdefinition.addProductSortDefinition( definition);
	 * </code></pre></p>
	 * @param definition Properties of the new product sort definition. Required properties of StartDate and Name.
	 * @return com.mozu.api.contracts.productadmin.ProductSortDefinition
	 * @see com.mozu.api.contracts.productadmin.ProductSortDefinition
	 * @see com.mozu.api.contracts.productadmin.ProductSortDefinition
	 */
	public com.mozu.api.contracts.productadmin.ProductSortDefinition addProductSortDefinition(com.mozu.api.contracts.productadmin.ProductSortDefinition definition) throws Exception
	{
		return addProductSortDefinition( definition,  null,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductSortDefinition productsortdefinition = new ProductSortDefinition();
	 *	ProductSortDefinition productSortDefinition = productsortdefinition.addProductSortDefinition( definition,  useProvidedId,  responseFields);
	 * </code></pre></p>
	 * @param responseFields Filtering syntax appended to an API call to increase or decrease the amount of data returned inside a JSON object. This parameter should only be used to retrieve data. Attempting to update data using this parameter may cause data loss.
	 * @param useProvidedId If true, the provided Id value will be used as the ProductSortDefinitionId. If omitted or false, the system will generate a ProductSortDefinitionId
	 * @param definition Properties of the new product sort definition. Required properties of StartDate and Name.
	 * @return com.mozu.api.contracts.productadmin.ProductSortDefinition
	 * @see com.mozu.api.contracts.productadmin.ProductSortDefinition
	 * @see com.mozu.api.contracts.productadmin.ProductSortDefinition
	 */
	public com.mozu.api.contracts.productadmin.ProductSortDefinition addProductSortDefinition(com.mozu.api.contracts.productadmin.ProductSortDefinition definition, Boolean useProvidedId, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.ProductSortDefinition> client = com.mozu.api.clients.commerce.catalog.admin.ProductSortDefinitionClient.addProductSortDefinitionClient(_dataViewMode,  definition,  useProvidedId,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductSortDefinition productsortdefinition = new ProductSortDefinition();
	 *	ProductSortDefinition productSortDefinition = productsortdefinition.updateProductSortDefinition( definition,  productSortDefinitionId);
	 * </code></pre></p>
	 * @param productSortDefinitionId Unique identifier of the product sort definition.
	 * @param definition The details of the product sort definition to update.
	 * @return com.mozu.api.contracts.productadmin.ProductSortDefinition
	 * @see com.mozu.api.contracts.productadmin.ProductSortDefinition
	 * @see com.mozu.api.contracts.productadmin.ProductSortDefinition
	 */
	public com.mozu.api.contracts.productadmin.ProductSortDefinition updateProductSortDefinition(com.mozu.api.contracts.productadmin.ProductSortDefinition definition, Integer productSortDefinitionId) throws Exception
	{
		return updateProductSortDefinition( definition,  productSortDefinitionId,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductSortDefinition productsortdefinition = new ProductSortDefinition();
	 *	ProductSortDefinition productSortDefinition = productsortdefinition.updateProductSortDefinition( definition,  productSortDefinitionId,  responseFields);
	 * </code></pre></p>
	 * @param productSortDefinitionId Unique identifier of the product sort definition.
	 * @param responseFields Filtering syntax appended to an API call to increase or decrease the amount of data returned inside a JSON object. This parameter should only be used to retrieve data. Attempting to update data using this parameter may cause data loss.
	 * @param definition The details of the product sort definition to update.
	 * @return com.mozu.api.contracts.productadmin.ProductSortDefinition
	 * @see com.mozu.api.contracts.productadmin.ProductSortDefinition
	 * @see com.mozu.api.contracts.productadmin.ProductSortDefinition
	 */
	public com.mozu.api.contracts.productadmin.ProductSortDefinition updateProductSortDefinition(com.mozu.api.contracts.productadmin.ProductSortDefinition definition, Integer productSortDefinitionId, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.ProductSortDefinition> client = com.mozu.api.clients.commerce.catalog.admin.ProductSortDefinitionClient.updateProductSortDefinitionClient(_dataViewMode,  definition,  productSortDefinitionId,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductSortDefinition productsortdefinition = new ProductSortDefinition();
	 *	productsortdefinition.deleteProductSortDefinition( productSortDefinitionId);
	 * </code></pre></p>
	 * @param productSortDefinitionId Unique identifier of the product sort definition.
	 * @return 
	 */
	public void deleteProductSortDefinition(Integer productSortDefinitionId) throws Exception
	{
		MozuClient client = com.mozu.api.clients.commerce.catalog.admin.ProductSortDefinitionClient.deleteProductSortDefinitionClient(_dataViewMode,  productSortDefinitionId);
		client.setContext(_apiContext);
		client.executeRequest();
		client.cleanupHttpConnection();

	}

}



