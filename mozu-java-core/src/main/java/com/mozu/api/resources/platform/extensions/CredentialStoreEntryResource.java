/**
 *     This code was auto-generated by a Codezu.     
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
 */
package com.mozu.api.resources.platform.extensions;

import com.mozu.api.ApiContext;
import java.util.List;
import java.util.ArrayList;
import com.mozu.api.MozuClient;
import com.mozu.api.MozuClientFactory;
import com.mozu.api.MozuUrl;
import com.mozu.api.Headers;
import org.joda.time.DateTime;
import com.mozu.api.security.AuthTicket;
import org.apache.commons.lang.StringUtils;

/** <summary>
 * The CredentialStore resource allows you to encrypt and store sensitive data on your tenant. You can then decrypt and access that data using an Arc.js application, as described in the Arc.js [Programming Patterns](https://www.mozu.com/docs/developer/arcjs-guides/programming-patterns.htm#securely_store_and_access_sensitive_data) topic.
 * </summary>
 */
public class CredentialStoreEntryResource {
	///
	/// <see cref="Mozu.Api.ApiContext"/>
	///
	private ApiContext _apiContext;


	public CredentialStoreEntryResource(ApiContext apiContext) 
	{
		_apiContext = apiContext;
	}

	
	/**
	 * 
	 * <p><pre><code>
	 *	CredentialStoreEntry credentialstoreentry = new CredentialStoreEntry();
	 *	credentialstoreentry.storeCredentials( credentials);
	 * </code></pre></p>
	 * @param credentials 
	 * @return 
	 * @see com.mozu.api.contracts.installedapplications.CredentialStoreEntry
	 */
	public void storeCredentials(com.mozu.api.contracts.installedapplications.CredentialStoreEntry credentials) throws Exception
	{
		MozuClient client = com.mozu.api.clients.platform.extensions.CredentialStoreEntryClient.storeCredentialsClient( credentials);
		client.setContext(_apiContext);
		client.executeRequest();
		client.cleanupHttpConnection();

	}

}



