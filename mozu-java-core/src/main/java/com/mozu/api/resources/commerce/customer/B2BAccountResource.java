/**
 *     This code was auto-generated by a Codezu.     
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
 */
package com.mozu.api.resources.commerce.customer;

import com.mozu.api.ApiContext;
import java.util.List;
import java.util.ArrayList;
import com.mozu.api.MozuClient;
import com.mozu.api.MozuClientFactory;
import com.mozu.api.MozuUrl;
import com.mozu.api.Headers;
import org.joda.time.DateTime;
import com.mozu.api.security.AuthTicket;
import org.apache.commons.lang.StringUtils;

/** <summary>
 * 
 * </summary>
 */
public class B2BAccountResource {
	///
	/// <see cref="Mozu.Api.ApiContext"/>
	///
	private ApiContext _apiContext;


	public B2BAccountResource(ApiContext apiContext) 
	{
		_apiContext = apiContext;
	}

	
	/**
	 * 
	 * <p><pre><code>
	 *	B2BAccount b2baccount = new B2BAccount();
	 *	B2BAccountCollection b2BAccountCollection = b2baccount.getB2BAccounts();
	 * </code></pre></p>
	 * @return com.mozu.api.contracts.customer.B2BAccountCollection
	 * @see com.mozu.api.contracts.customer.B2BAccountCollection
	 */
	public com.mozu.api.contracts.customer.B2BAccountCollection getB2BAccounts() throws Exception
	{
		return getB2BAccounts( null,  null,  null,  null,  null,  null,  null,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	B2BAccount b2baccount = new B2BAccount();
	 *	B2BAccountCollection b2BAccountCollection = b2baccount.getB2BAccounts( startIndex,  pageSize,  sortBy,  filter,  fields,  q,  qLimit,  responseFields);
	 * </code></pre></p>
	 * @param fields 
	 * @param filter 
	 * @param pageSize 
	 * @param q 
	 * @param qLimit 
	 * @param responseFields 
	 * @param sortBy 
	 * @param startIndex 
	 * @return com.mozu.api.contracts.customer.B2BAccountCollection
	 * @see com.mozu.api.contracts.customer.B2BAccountCollection
	 */
	public com.mozu.api.contracts.customer.B2BAccountCollection getB2BAccounts(Integer startIndex, Integer pageSize, String sortBy, String filter, String fields, String q, Integer qLimit, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.customer.B2BAccountCollection> client = com.mozu.api.clients.commerce.customer.B2BAccountClient.getB2BAccountsClient( startIndex,  pageSize,  sortBy,  filter,  fields,  q,  qLimit,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	B2BAccount b2baccount = new B2BAccount();
	 *	CustomerAttribute customerAttribute = b2baccount.getB2BAccountAttribute( accountId,  attributeFQN);
	 * </code></pre></p>
	 * @param accountId 
	 * @param attributeFQN 
	 * @return com.mozu.api.contracts.customer.CustomerAttribute
	 * @see com.mozu.api.contracts.customer.CustomerAttribute
	 */
	public com.mozu.api.contracts.customer.CustomerAttribute getB2BAccountAttribute(Integer accountId, String attributeFQN) throws Exception
	{
		return getB2BAccountAttribute( accountId,  attributeFQN,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	B2BAccount b2baccount = new B2BAccount();
	 *	CustomerAttribute customerAttribute = b2baccount.getB2BAccountAttribute( accountId,  attributeFQN,  responseFields);
	 * </code></pre></p>
	 * @param accountId 
	 * @param attributeFQN 
	 * @param responseFields 
	 * @return com.mozu.api.contracts.customer.CustomerAttribute
	 * @see com.mozu.api.contracts.customer.CustomerAttribute
	 */
	public com.mozu.api.contracts.customer.CustomerAttribute getB2BAccountAttribute(Integer accountId, String attributeFQN, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.customer.CustomerAttribute> client = com.mozu.api.clients.commerce.customer.B2BAccountClient.getB2BAccountAttributeClient( accountId,  attributeFQN,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	B2BAccount b2baccount = new B2BAccount();
	 *	CustomerAttributeCollection customerAttributeCollection = b2baccount.getB2BAccountAttributes( accountId);
	 * </code></pre></p>
	 * @param accountId 
	 * @return com.mozu.api.contracts.customer.CustomerAttributeCollection
	 * @see com.mozu.api.contracts.customer.CustomerAttributeCollection
	 */
	public com.mozu.api.contracts.customer.CustomerAttributeCollection getB2BAccountAttributes(Integer accountId) throws Exception
	{
		return getB2BAccountAttributes( accountId,  null,  null,  null,  null,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	B2BAccount b2baccount = new B2BAccount();
	 *	CustomerAttributeCollection customerAttributeCollection = b2baccount.getB2BAccountAttributes( accountId,  startIndex,  pageSize,  sortBy,  filter,  responseFields);
	 * </code></pre></p>
	 * @param accountId 
	 * @param filter 
	 * @param pageSize 
	 * @param responseFields 
	 * @param sortBy 
	 * @param startIndex 
	 * @return com.mozu.api.contracts.customer.CustomerAttributeCollection
	 * @see com.mozu.api.contracts.customer.CustomerAttributeCollection
	 */
	public com.mozu.api.contracts.customer.CustomerAttributeCollection getB2BAccountAttributes(Integer accountId, Integer startIndex, Integer pageSize, String sortBy, String filter, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.customer.CustomerAttributeCollection> client = com.mozu.api.clients.commerce.customer.B2BAccountClient.getB2BAccountAttributesClient( accountId,  startIndex,  pageSize,  sortBy,  filter,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	B2BAccount b2baccount = new B2BAccount();
	 *	UserRoleCollection userRoleCollection = b2baccount.getUserRolesAsync( accountId,  userId);
	 * </code></pre></p>
	 * @param accountId 
	 * @param userId 
	 * @return com.mozu.api.contracts.customer.UserRoleCollection
	 * @see com.mozu.api.contracts.customer.UserRoleCollection
	 */
	public com.mozu.api.contracts.customer.UserRoleCollection getUserRolesAsync(Integer accountId, String userId) throws Exception
	{
		return getUserRolesAsync( accountId,  userId,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	B2BAccount b2baccount = new B2BAccount();
	 *	UserRoleCollection userRoleCollection = b2baccount.getUserRolesAsync( accountId,  userId,  responseFields);
	 * </code></pre></p>
	 * @param accountId 
	 * @param responseFields 
	 * @param userId 
	 * @return com.mozu.api.contracts.customer.UserRoleCollection
	 * @see com.mozu.api.contracts.customer.UserRoleCollection
	 */
	public com.mozu.api.contracts.customer.UserRoleCollection getUserRolesAsync(Integer accountId, String userId, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.customer.UserRoleCollection> client = com.mozu.api.clients.commerce.customer.B2BAccountClient.getUserRolesAsyncClient( accountId,  userId,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	B2BAccount b2baccount = new B2BAccount();
	 *	B2BUserCollection b2BUserCollection = b2baccount.getUsers( accountId);
	 * </code></pre></p>
	 * @param accountId 
	 * @return com.mozu.api.contracts.customer.B2BUserCollection
	 * @see com.mozu.api.contracts.customer.B2BUserCollection
	 */
	public com.mozu.api.contracts.customer.B2BUserCollection getUsers(Integer accountId) throws Exception
	{
		return getUsers( accountId,  null,  null,  null,  null,  null,  null,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	B2BAccount b2baccount = new B2BAccount();
	 *	B2BUserCollection b2BUserCollection = b2baccount.getUsers( accountId,  startIndex,  pageSize,  sortBy,  filter,  q,  qLimit,  responseFields);
	 * </code></pre></p>
	 * @param accountId 
	 * @param filter 
	 * @param pageSize 
	 * @param q 
	 * @param qLimit 
	 * @param responseFields 
	 * @param sortBy 
	 * @param startIndex 
	 * @return com.mozu.api.contracts.customer.B2BUserCollection
	 * @see com.mozu.api.contracts.customer.B2BUserCollection
	 */
	public com.mozu.api.contracts.customer.B2BUserCollection getUsers(Integer accountId, Integer startIndex, Integer pageSize, String sortBy, String filter, String q, Integer qLimit, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.customer.B2BUserCollection> client = com.mozu.api.clients.commerce.customer.B2BAccountClient.getUsersClient( accountId,  startIndex,  pageSize,  sortBy,  filter,  q,  qLimit,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	B2BAccount b2baccount = new B2BAccount();
	 *	B2BAccount b2BAccount = b2baccount.getB2BAccount( accountId);
	 * </code></pre></p>
	 * @param accountId 
	 * @return com.mozu.api.contracts.customer.B2BAccount
	 * @see com.mozu.api.contracts.customer.B2BAccount
	 */
	public com.mozu.api.contracts.customer.B2BAccount getB2BAccount(Integer accountId) throws Exception
	{
		return getB2BAccount( accountId,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	B2BAccount b2baccount = new B2BAccount();
	 *	B2BAccount b2BAccount = b2baccount.getB2BAccount( accountId,  responseFields);
	 * </code></pre></p>
	 * @param accountId 
	 * @param responseFields 
	 * @return com.mozu.api.contracts.customer.B2BAccount
	 * @see com.mozu.api.contracts.customer.B2BAccount
	 */
	public com.mozu.api.contracts.customer.B2BAccount getB2BAccount(Integer accountId, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.customer.B2BAccount> client = com.mozu.api.clients.commerce.customer.B2BAccountClient.getB2BAccountClient( accountId,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	B2BAccount b2baccount = new B2BAccount();
	 *	B2BAccount b2BAccount = b2baccount.addAccount( account);
	 * </code></pre></p>
	 * @param account 
	 * @return com.mozu.api.contracts.customer.B2BAccount
	 * @see com.mozu.api.contracts.customer.B2BAccount
	 * @see com.mozu.api.contracts.customer.B2BAccount
	 */
	public com.mozu.api.contracts.customer.B2BAccount addAccount(com.mozu.api.contracts.customer.B2BAccount account) throws Exception
	{
		return addAccount( account,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	B2BAccount b2baccount = new B2BAccount();
	 *	B2BAccount b2BAccount = b2baccount.addAccount( account,  responseFields);
	 * </code></pre></p>
	 * @param responseFields 
	 * @param account 
	 * @return com.mozu.api.contracts.customer.B2BAccount
	 * @see com.mozu.api.contracts.customer.B2BAccount
	 * @see com.mozu.api.contracts.customer.B2BAccount
	 */
	public com.mozu.api.contracts.customer.B2BAccount addAccount(com.mozu.api.contracts.customer.B2BAccount account, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.customer.B2BAccount> client = com.mozu.api.clients.commerce.customer.B2BAccountClient.addAccountClient( account,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	B2BAccount b2baccount = new B2BAccount();
	 *	CustomerAttribute customerAttribute = b2baccount.addB2BAccountAttribute( attribute,  accountId);
	 * </code></pre></p>
	 * @param accountId 
	 * @param attribute 
	 * @return com.mozu.api.contracts.customer.CustomerAttribute
	 * @see com.mozu.api.contracts.customer.CustomerAttribute
	 * @see com.mozu.api.contracts.customer.CustomerAttribute
	 */
	public com.mozu.api.contracts.customer.CustomerAttribute addB2BAccountAttribute(com.mozu.api.contracts.customer.CustomerAttribute attribute, Integer accountId) throws Exception
	{
		return addB2BAccountAttribute( attribute,  accountId,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	B2BAccount b2baccount = new B2BAccount();
	 *	CustomerAttribute customerAttribute = b2baccount.addB2BAccountAttribute( attribute,  accountId,  responseFields);
	 * </code></pre></p>
	 * @param accountId 
	 * @param responseFields 
	 * @param attribute 
	 * @return com.mozu.api.contracts.customer.CustomerAttribute
	 * @see com.mozu.api.contracts.customer.CustomerAttribute
	 * @see com.mozu.api.contracts.customer.CustomerAttribute
	 */
	public com.mozu.api.contracts.customer.CustomerAttribute addB2BAccountAttribute(com.mozu.api.contracts.customer.CustomerAttribute attribute, Integer accountId, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.customer.CustomerAttribute> client = com.mozu.api.clients.commerce.customer.B2BAccountClient.addB2BAccountAttributeClient( attribute,  accountId,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	B2BAccount b2baccount = new B2BAccount();
	 *	Stream stream = b2baccount.addUserRoleAsync( accountId,  userId,  roleId);
	 * </code></pre></p>
	 * @param accountId 
	 * @param roleId 
	 * @param userId 
	 * @return Stream
	 * @see Stream
	 */
	public java.io.InputStream addUserRoleAsync(Integer accountId, String userId, Integer roleId) throws Exception
	{
		MozuClient<java.io.InputStream> client = com.mozu.api.clients.commerce.customer.B2BAccountClient.addUserRoleAsyncClient( accountId,  userId,  roleId);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	B2BAccount b2baccount = new B2BAccount();
	 *	B2BUser b2BUser = b2baccount.addUser( user,  accountId);
	 * </code></pre></p>
	 * @param accountId 
	 * @param user 
	 * @return com.mozu.api.contracts.customer.B2BUser
	 * @see com.mozu.api.contracts.customer.B2BUser
	 * @see com.mozu.api.contracts.customer.B2BUserAndAuthInfo
	 */
	public com.mozu.api.contracts.customer.B2BUser addUser(com.mozu.api.contracts.customer.B2BUserAndAuthInfo user, Integer accountId) throws Exception
	{
		return addUser( user,  accountId,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	B2BAccount b2baccount = new B2BAccount();
	 *	B2BUser b2BUser = b2baccount.addUser( user,  accountId,  responseFields);
	 * </code></pre></p>
	 * @param accountId 
	 * @param responseFields 
	 * @param user 
	 * @return com.mozu.api.contracts.customer.B2BUser
	 * @see com.mozu.api.contracts.customer.B2BUser
	 * @see com.mozu.api.contracts.customer.B2BUserAndAuthInfo
	 */
	public com.mozu.api.contracts.customer.B2BUser addUser(com.mozu.api.contracts.customer.B2BUserAndAuthInfo user, Integer accountId, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.customer.B2BUser> client = com.mozu.api.clients.commerce.customer.B2BAccountClient.addUserClient( user,  accountId,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	B2BAccount b2baccount = new B2BAccount();
	 *	CustomerAttribute customerAttribute = b2baccount.updateB2BAccountAttribute( attribute,  accountId,  attributeFQN);
	 * </code></pre></p>
	 * @param accountId 
	 * @param attributeFQN 
	 * @param attribute 
	 * @return com.mozu.api.contracts.customer.CustomerAttribute
	 * @see com.mozu.api.contracts.customer.CustomerAttribute
	 * @see com.mozu.api.contracts.customer.CustomerAttribute
	 */
	public com.mozu.api.contracts.customer.CustomerAttribute updateB2BAccountAttribute(com.mozu.api.contracts.customer.CustomerAttribute attribute, Integer accountId, String attributeFQN) throws Exception
	{
		return updateB2BAccountAttribute( attribute,  accountId,  attributeFQN,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	B2BAccount b2baccount = new B2BAccount();
	 *	CustomerAttribute customerAttribute = b2baccount.updateB2BAccountAttribute( attribute,  accountId,  attributeFQN,  responseFields);
	 * </code></pre></p>
	 * @param accountId 
	 * @param attributeFQN 
	 * @param responseFields 
	 * @param attribute 
	 * @return com.mozu.api.contracts.customer.CustomerAttribute
	 * @see com.mozu.api.contracts.customer.CustomerAttribute
	 * @see com.mozu.api.contracts.customer.CustomerAttribute
	 */
	public com.mozu.api.contracts.customer.CustomerAttribute updateB2BAccountAttribute(com.mozu.api.contracts.customer.CustomerAttribute attribute, Integer accountId, String attributeFQN, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.customer.CustomerAttribute> client = com.mozu.api.clients.commerce.customer.B2BAccountClient.updateB2BAccountAttributeClient( attribute,  accountId,  attributeFQN,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	B2BAccount b2baccount = new B2BAccount();
	 *	Stream stream = b2baccount.removeUser( accountId,  userId);
	 * </code></pre></p>
	 * @param accountId 
	 * @param userId 
	 * @return Stream
	 * @see Stream
	 */
	public java.io.InputStream removeUser(Integer accountId, String userId) throws Exception
	{
		MozuClient<java.io.InputStream> client = com.mozu.api.clients.commerce.customer.B2BAccountClient.removeUserClient( accountId,  userId);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	B2BAccount b2baccount = new B2BAccount();
	 *	B2BUser b2BUser = b2baccount.updateUser( user,  accountId,  userId);
	 * </code></pre></p>
	 * @param accountId 
	 * @param userId 
	 * @param user 
	 * @return com.mozu.api.contracts.customer.B2BUser
	 * @see com.mozu.api.contracts.customer.B2BUser
	 * @see com.mozu.api.contracts.customer.B2BUser
	 */
	public com.mozu.api.contracts.customer.B2BUser updateUser(com.mozu.api.contracts.customer.B2BUser user, Integer accountId, String userId) throws Exception
	{
		return updateUser( user,  accountId,  userId,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	B2BAccount b2baccount = new B2BAccount();
	 *	B2BUser b2BUser = b2baccount.updateUser( user,  accountId,  userId,  responseFields);
	 * </code></pre></p>
	 * @param accountId 
	 * @param responseFields 
	 * @param userId 
	 * @param user 
	 * @return com.mozu.api.contracts.customer.B2BUser
	 * @see com.mozu.api.contracts.customer.B2BUser
	 * @see com.mozu.api.contracts.customer.B2BUser
	 */
	public com.mozu.api.contracts.customer.B2BUser updateUser(com.mozu.api.contracts.customer.B2BUser user, Integer accountId, String userId, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.customer.B2BUser> client = com.mozu.api.clients.commerce.customer.B2BAccountClient.updateUserClient( user,  accountId,  userId,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	B2BAccount b2baccount = new B2BAccount();
	 *	B2BAccount b2BAccount = b2baccount.updateAccount( account,  accountId);
	 * </code></pre></p>
	 * @param accountId 
	 * @param account 
	 * @return com.mozu.api.contracts.customer.B2BAccount
	 * @see com.mozu.api.contracts.customer.B2BAccount
	 * @see com.mozu.api.contracts.customer.B2BAccount
	 */
	public com.mozu.api.contracts.customer.B2BAccount updateAccount(com.mozu.api.contracts.customer.B2BAccount account, Integer accountId) throws Exception
	{
		return updateAccount( account,  accountId,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	B2BAccount b2baccount = new B2BAccount();
	 *	B2BAccount b2BAccount = b2baccount.updateAccount( account,  accountId,  responseFields);
	 * </code></pre></p>
	 * @param accountId 
	 * @param responseFields 
	 * @param account 
	 * @return com.mozu.api.contracts.customer.B2BAccount
	 * @see com.mozu.api.contracts.customer.B2BAccount
	 * @see com.mozu.api.contracts.customer.B2BAccount
	 */
	public com.mozu.api.contracts.customer.B2BAccount updateAccount(com.mozu.api.contracts.customer.B2BAccount account, Integer accountId, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.customer.B2BAccount> client = com.mozu.api.clients.commerce.customer.B2BAccountClient.updateAccountClient( account,  accountId,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	B2BAccount b2baccount = new B2BAccount();
	 *	Stream stream = b2baccount.deleteB2BAccountAttribute( accountId,  attributeFQN);
	 * </code></pre></p>
	 * @param accountId 
	 * @param attributeFQN 
	 * @return Stream
	 * @see Stream
	 */
	public java.io.InputStream deleteB2BAccountAttribute(Integer accountId, String attributeFQN) throws Exception
	{
		MozuClient<java.io.InputStream> client = com.mozu.api.clients.commerce.customer.B2BAccountClient.deleteB2BAccountAttributeClient( accountId,  attributeFQN);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	B2BAccount b2baccount = new B2BAccount();
	 *	Stream stream = b2baccount.removeUserRoleAsync( accountId,  userId,  roleId);
	 * </code></pre></p>
	 * @param accountId 
	 * @param roleId 
	 * @param userId 
	 * @return Stream
	 * @see Stream
	 */
	public java.io.InputStream removeUserRoleAsync(Integer accountId, String userId, Integer roleId) throws Exception
	{
		MozuClient<java.io.InputStream> client = com.mozu.api.clients.commerce.customer.B2BAccountClient.removeUserRoleAsyncClient( accountId,  userId,  roleId);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

}



