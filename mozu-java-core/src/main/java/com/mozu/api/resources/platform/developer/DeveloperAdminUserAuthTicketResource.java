/**
 *     This code was auto-generated by a Codezu.     
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
 */
package com.mozu.api.resources.platform.developer;

import com.mozu.api.ApiContext;
import java.util.List;
import java.util.ArrayList;
import com.mozu.api.MozuClient;
import com.mozu.api.MozuUrl;
import com.mozu.api.Headers;
import com.mozu.api.security.AuthTicket;
import org.apache.commons.lang.StringUtils;

/** <summary>
 * Use this resource to manage authentication tickets for your developer account.
 * </summary>
 */
public class DeveloperAdminUserAuthTicketResource {
	///
	/// <see cref="Mozu.Api.ApiContext"/>
	///
	private ApiContext _apiContext;

		public DeveloperAdminUserAuthTicketResource() 
	{
		_apiContext = null;
	}
	 
	public DeveloperAdminUserAuthTicketResource(ApiContext apiContext) 
	{
		_apiContext = apiContext;
	}
	
	/**
	 * Generate an authentication ticket for a developer account.
	 * <p><pre><code>
	 *	DeveloperAdminUserAuthTicket developeradminuserauthticket = new DeveloperAdminUserAuthTicket();
	 *	DeveloperAdminUserAuthTicket developerAdminUserAuthTicket = developeradminuserauthticket.CreateDeveloperUserAuthTicket( userAuthInfo);
	 * </code></pre></p>
	 * @param userAuthInfo The user authentication information required to generate the developer account user authentication ticket, which consists of a user name and password.
	 * @return com.mozu.api.contracts.adminuser.DeveloperAdminUserAuthTicket
	 * @see com.mozu.api.contracts.adminuser.DeveloperAdminUserAuthTicket
	 * @see com.mozu.api.contracts.core.UserAuthInfo
	 */
	public com.mozu.api.contracts.adminuser.DeveloperAdminUserAuthTicket createDeveloperUserAuthTicket(com.mozu.api.contracts.core.UserAuthInfo userAuthInfo) throws Exception
	{
		return createDeveloperUserAuthTicket( userAuthInfo,  null);
	}

	/**
	 * Generate an authentication ticket for a developer account.
	 * <p><pre><code>
	 *	DeveloperAdminUserAuthTicket developeradminuserauthticket = new DeveloperAdminUserAuthTicket();
	 *	DeveloperAdminUserAuthTicket developerAdminUserAuthTicket = developeradminuserauthticket.CreateDeveloperUserAuthTicket( userAuthInfo,  developerAccountId);
	 * </code></pre></p>
	 * @param developerAccountId Unique identifier of the developer account.
	 * @param userAuthInfo The user authentication information required to generate the developer account user authentication ticket, which consists of a user name and password.
	 * @return com.mozu.api.contracts.adminuser.DeveloperAdminUserAuthTicket
	 * @see com.mozu.api.contracts.adminuser.DeveloperAdminUserAuthTicket
	 * @see com.mozu.api.contracts.core.UserAuthInfo
	 */
	public com.mozu.api.contracts.adminuser.DeveloperAdminUserAuthTicket createDeveloperUserAuthTicket(com.mozu.api.contracts.core.UserAuthInfo userAuthInfo, Integer developerAccountId) throws Exception
	{
		MozuClient<com.mozu.api.contracts.adminuser.DeveloperAdminUserAuthTicket> client = com.mozu.api.clients.platform.developer.DeveloperAdminUserAuthTicketClient.createDeveloperUserAuthTicketClient( userAuthInfo,  developerAccountId);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * Generates a new developer account authentication ticket for the specified tenant by supplying the defined refresh token information.
	 * <p><pre><code>
	 *	DeveloperAdminUserAuthTicket developeradminuserauthticket = new DeveloperAdminUserAuthTicket();
	 *	DeveloperAdminUserAuthTicket developerAdminUserAuthTicket = developeradminuserauthticket.RefreshDeveloperAuthTicket( existingAuthTicket);
	 * </code></pre></p>
	 * @param existingAuthTicket Properties of the authentication ticket to refresh. The refresh token is required to complete this request.
	 * @return com.mozu.api.contracts.adminuser.DeveloperAdminUserAuthTicket
	 * @see com.mozu.api.contracts.adminuser.DeveloperAdminUserAuthTicket
	 * @see com.mozu.api.contracts.adminuser.DeveloperAdminUserAuthTicket
	 */
	public com.mozu.api.contracts.adminuser.DeveloperAdminUserAuthTicket refreshDeveloperAuthTicket(com.mozu.api.contracts.adminuser.DeveloperAdminUserAuthTicket existingAuthTicket) throws Exception
	{
		return refreshDeveloperAuthTicket( existingAuthTicket,  null);
	}

	/**
	 * Generates a new developer account authentication ticket for the specified tenant by supplying the defined refresh token information.
	 * <p><pre><code>
	 *	DeveloperAdminUserAuthTicket developeradminuserauthticket = new DeveloperAdminUserAuthTicket();
	 *	DeveloperAdminUserAuthTicket developerAdminUserAuthTicket = developeradminuserauthticket.RefreshDeveloperAuthTicket( existingAuthTicket,  developerAccountId);
	 * </code></pre></p>
	 * @param developerAccountId Unique identifier of the developer account.
	 * @param existingAuthTicket Properties of the authentication ticket to refresh. The refresh token is required to complete this request.
	 * @return com.mozu.api.contracts.adminuser.DeveloperAdminUserAuthTicket
	 * @see com.mozu.api.contracts.adminuser.DeveloperAdminUserAuthTicket
	 * @see com.mozu.api.contracts.adminuser.DeveloperAdminUserAuthTicket
	 */
	public com.mozu.api.contracts.adminuser.DeveloperAdminUserAuthTicket refreshDeveloperAuthTicket(com.mozu.api.contracts.adminuser.DeveloperAdminUserAuthTicket existingAuthTicket, Integer developerAccountId) throws Exception
	{
		MozuClient<com.mozu.api.contracts.adminuser.DeveloperAdminUserAuthTicket> client = com.mozu.api.clients.platform.developer.DeveloperAdminUserAuthTicketClient.refreshDeveloperAuthTicketClient( existingAuthTicket,  developerAccountId);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * Deletes the authentication ticket for the developer account by supplying the refresh token.
	 * <p><pre><code>
	 *	DeveloperAdminUserAuthTicket developeradminuserauthticket = new DeveloperAdminUserAuthTicket();
	 *	developeradminuserauthticket.DeleteUserAuthTicket( refreshToken);
	 * </code></pre></p>
	 * @param refreshToken Refresh token string associated with the developer account authentication ticket.
	 * @return 
	 */
	public void deleteUserAuthTicket(String refreshToken) throws Exception
	{
		MozuClient client = com.mozu.api.clients.platform.developer.DeveloperAdminUserAuthTicketClient.deleteUserAuthTicketClient( refreshToken);
		client.setContext(_apiContext);
		client.executeRequest();

	}

}



