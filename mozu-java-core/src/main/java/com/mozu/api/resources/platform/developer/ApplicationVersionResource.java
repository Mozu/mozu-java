/**
 *     This code was auto-generated by a Codezu.     
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
 */
package com.mozu.api.resources.platform.developer;

import com.mozu.api.ApiContext;
import java.util.List;
import java.util.ArrayList;
import com.mozu.api.MozuClient;
import com.mozu.api.MozuUrl;
import com.mozu.api.Headers;
import com.mozu.api.security.AuthTicket;
import org.apache.commons.lang.StringUtils;

/** <summary>
 * Use the Applications resource to manage the applications associated with a developer account.
 * </summary>
 */
public class ApplicationVersionResource {
	///
	/// <see cref="Mozu.Api.ApiContext"/>
	///
	private ApiContext _apiContext;

		public ApplicationVersionResource() 
	{
		_apiContext = null;
	}
	 
	public ApplicationVersionResource(ApiContext apiContext) 
	{
		_apiContext = apiContext;
	}
	
	/**
	 * Retrieves the list of applications associated with the developer account scoped to the user claim specified in the request.
	 * <p><pre><code>
	 *	ApplicationVersion applicationversion = new ApplicationVersion();
	 *	ApplicationCollection applicationCollection = applicationversion.GetAllApplications();
	 * </code></pre></p>
	 * @return com.mozu.api.contracts.appdev.ApplicationCollection
	 * @see com.mozu.api.contracts.appdev.ApplicationCollection
	 */
	public com.mozu.api.contracts.appdev.ApplicationCollection getAllApplications() throws Exception
	{
		MozuClient<com.mozu.api.contracts.appdev.ApplicationCollection> client = com.mozu.api.clients.platform.developer.ApplicationVersionClient.getAllApplicationsClient();
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * Retrieves the details of the application specified in the request. The application specified in the request must be associated with the developer account scoped to the user claim specified in the request header, otherwise the operation returns an error.
	 * <p><pre><code>
	 *	ApplicationVersion applicationversion = new ApplicationVersion();
	 *	Application application = applicationversion.GetApplication();
	 * </code></pre></p>
	 * @return com.mozu.api.contracts.appdev.Application
	 * @see com.mozu.api.contracts.appdev.Application
	 */
	public com.mozu.api.contracts.appdev.Application getApplication() throws Exception
	{
		return getApplication( null);
	}

	/**
	 * Retrieves the details of the application specified in the request. The application specified in the request must be associated with the developer account scoped to the user claim specified in the request header, otherwise the operation returns an error.
	 * <p><pre><code>
	 *	ApplicationVersion applicationversion = new ApplicationVersion();
	 *	Application application = applicationversion.GetApplication( applicationId);
	 * </code></pre></p>
	 * @param applicationId Unique identifier of the application.
	 * @return com.mozu.api.contracts.appdev.Application
	 * @see com.mozu.api.contracts.appdev.Application
	 */
	public com.mozu.api.contracts.appdev.Application getApplication(Integer applicationId) throws Exception
	{
		MozuClient<com.mozu.api.contracts.appdev.Application> client = com.mozu.api.clients.platform.developer.ApplicationVersionClient.getApplicationClient( applicationId);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * Retrieves the details of a specific version of an application associated with the developer account scoped to the user claim specified in the request.
	 * <p><pre><code>
	 *	ApplicationVersion applicationversion = new ApplicationVersion();
	 *	ApplicationVersion applicationVersion = applicationversion.GetApplicationVersion( applicationVersionId);
	 * </code></pre></p>
	 * @param applicationVersionId Unique identifier of the application version. Application version IDs are unique across all applications associated with a developer account.
	 * @return com.mozu.api.contracts.appdev.ApplicationVersion
	 * @see com.mozu.api.contracts.appdev.ApplicationVersion
	 */
	public com.mozu.api.contracts.appdev.ApplicationVersion getApplicationVersion(Integer applicationVersionId) throws Exception
	{
		MozuClient<com.mozu.api.contracts.appdev.ApplicationVersion> client = com.mozu.api.clients.platform.developer.ApplicationVersionClient.getApplicationVersionClient( applicationVersionId);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * Retrieves a list of the package definitions created for an application version, including all development packages and release packages. The application must be associated with the developer account scoped to the user claim specified in the request.
	 * <p><pre><code>
	 *	ApplicationVersion applicationversion = new ApplicationVersion();
	 *	PackageCollection packageCollection = applicationversion.GetPackages( applicationVersionId);
	 * </code></pre></p>
	 * @param applicationVersionId Unique identifier of the application version. Application version IDs are unique across all applications associated with a developer account.
	 * @return com.mozu.api.contracts.appdev.PackageCollection
	 * @see com.mozu.api.contracts.appdev.PackageCollection
	 */
	public com.mozu.api.contracts.appdev.PackageCollection getPackages(Integer applicationVersionId) throws Exception
	{
		MozuClient<com.mozu.api.contracts.appdev.PackageCollection> client = com.mozu.api.clients.platform.developer.ApplicationVersionClient.getPackagesClient( applicationVersionId);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * Retrieves the details of a package definition associated with an application version. The application ust be associated with the developer account scoped to the user claim specified in the request. 
	 * <p><pre><code>
	 *	ApplicationVersion applicationversion = new ApplicationVersion();
	 *	Package package = applicationversion.GetPackage( applicationVersionId,  packageId);
	 * </code></pre></p>
	 * @param applicationVersionId Unique identifier of the application version associated with the package. Application version IDs are unique across all applications associated with the developer account.
	 * @param packageId Unique identifier of the package to retrieve.
	 * @return com.mozu.api.contracts.appdev.Package
	 * @see com.mozu.api.contracts.appdev.Package
	 */
	public com.mozu.api.contracts.appdev.Package getPackage(Integer applicationVersionId, Integer packageId) throws Exception
	{
		MozuClient<com.mozu.api.contracts.appdev.Package> client = com.mozu.api.clients.platform.developer.ApplicationVersionClient.getPackageClient( applicationVersionId,  packageId);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * Retrieves the metadata for items in a package associated with an application version, including a list of all files and subfolders. The application must be associated with the developer account acoped to the user claim specified in the request.
	 * <p><pre><code>
	 *	ApplicationVersion applicationversion = new ApplicationVersion();
	 *	FolderMetadata folderMetadata = applicationversion.GetPackageItemsMetadata( applicationVersionId,  packageId);
	 * </code></pre></p>
	 * @param applicationVersionId Unique identifier of the application version. Application version IDs are unique across all applications associated with a developer account.
	 * @param packageId Unique identifier of the package.
	 * @return com.mozu.api.contracts.appdev.FolderMetadata
	 * @see com.mozu.api.contracts.appdev.FolderMetadata
	 */
	public com.mozu.api.contracts.appdev.FolderMetadata getPackageItemsMetadata(Integer applicationVersionId, Integer packageId) throws Exception
	{
		MozuClient<com.mozu.api.contracts.appdev.FolderMetadata> client = com.mozu.api.clients.platform.developer.ApplicationVersionClient.getPackageItemsMetadataClient( applicationVersionId,  packageId);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * Retrieves the metadata of a file in a package for an application version. The application must be associated with the developer account scoped to the user claim specified in the request.
	 * <p><pre><code>
	 *	ApplicationVersion applicationversion = new ApplicationVersion();
	 *	FileMetadata fileMetadata = applicationversion.GetPackageItemMetadata( applicationVersionId,  packageId,  itempath);
	 * </code></pre></p>
	 * @param applicationVersionId Unique identifier of the application version. Application version IDs are unique across all applications associated with a developer account.
	 * @param itempath Complete file directory location and name of the item in the package to retrieve metadata.
	 * @param packageId Unique identifier of the package.
	 * @return com.mozu.api.contracts.appdev.FileMetadata
	 * @see com.mozu.api.contracts.appdev.FileMetadata
	 */
	public com.mozu.api.contracts.appdev.FileMetadata getPackageItemMetadata(Integer applicationVersionId, Integer packageId, String itempath) throws Exception
	{
		MozuClient<com.mozu.api.contracts.appdev.FileMetadata> client = com.mozu.api.clients.platform.developer.ApplicationVersionClient.getPackageItemMetadataClient( applicationVersionId,  packageId,  itempath);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	ApplicationVersion applicationversion = new ApplicationVersion();
	 *	Stream stream = applicationversion.GetPackageFilesZip( applicationVersionId,  packageId);
	 * </code></pre></p>
	 * @param applicationVersionId 
	 * @param packageId 
	 * @return Stream
	 * @see Stream
	 */
	public java.io.InputStream getPackageFilesZip(Integer applicationVersionId, Integer packageId) throws Exception
	{
		MozuClient<java.io.InputStream> client = com.mozu.api.clients.platform.developer.ApplicationVersionClient.getPackageFilesZipClient( applicationVersionId,  packageId);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * Creates a new development or release package for the application version specified in the request.
	 * <p><pre><code>
	 *	ApplicationVersion applicationversion = new ApplicationVersion();
	 *	Package package = applicationversion.AddPackage( pkg,  applicationVersionId);
	 * </code></pre></p>
	 * @param applicationVersionId Unique identifier of the application version. Application version IDs are unique across all applications associated with the developer account.
	 * @param package Properties of the development or release package to define.
	 * @return com.mozu.api.contracts.appdev.Package
	 * @see com.mozu.api.contracts.appdev.Package
	 * @see com.mozu.api.contracts.appdev.Package
	 */
	public com.mozu.api.contracts.appdev.Package addPackage(com.mozu.api.contracts.appdev.Package pkg, Integer applicationVersionId) throws Exception
	{
		MozuClient<com.mozu.api.contracts.appdev.Package> client = com.mozu.api.clients.platform.developer.ApplicationVersionClient.addPackageClient( pkg,  applicationVersionId);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	ApplicationVersion applicationversion = new ApplicationVersion();
	 *	FileMetadata fileMetadata = applicationversion.ChangePackageFileNameOrPath( renameInfo,  applicationVersionId,  packageId);
	 * </code></pre></p>
	 * @param applicationVersionId 
	 * @param packageId 
	 * @param renameInfo 
	 * @return com.mozu.api.contracts.appdev.FileMetadata
	 * @see com.mozu.api.contracts.appdev.FileMetadata
	 * @see com.mozu.api.contracts.appdev.RenameInfo
	 */
	public com.mozu.api.contracts.appdev.FileMetadata changePackageFileNameOrPath(com.mozu.api.contracts.appdev.RenameInfo renameInfo, Integer applicationVersionId, Integer packageId) throws Exception
	{
		MozuClient<com.mozu.api.contracts.appdev.FileMetadata> client = com.mozu.api.clients.platform.developer.ApplicationVersionClient.changePackageFileNameOrPathClient( renameInfo,  applicationVersionId,  packageId);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * Uploads a file to a defined package for an application version in the file location specified in the request.
	 * <p><pre><code>
	 *	ApplicationVersion applicationversion = new ApplicationVersion();
	 *	FileMetadata fileMetadata = applicationversion.AddPackageFile( stream,  applicationVersionId,  packageId,  filepath,  contentType);
	 * </code></pre></p>
	 * @param applicationVersionId Unique identifier of the application version. Application version IDs are unique across all applications associated with a developer account.
	 * @param filepath The file location to which to add the package file.
	 * @param packageId Unique identifier of the package.
	 * @param stream The contents of the package file to upload, which requires a content-type value of "application/octet-stream" in the request header.
	 * @return com.mozu.api.contracts.appdev.FileMetadata
	 * @see com.mozu.api.contracts.appdev.FileMetadata
	 * @see Stream
	 */
	public com.mozu.api.contracts.appdev.FileMetadata addPackageFile(java.io.InputStream stream, Integer applicationVersionId, Integer packageId, String filepath, String  contentType) throws Exception
	{
		MozuClient<com.mozu.api.contracts.appdev.FileMetadata> client = com.mozu.api.clients.platform.developer.ApplicationVersionClient.addPackageFileClient( stream,  applicationVersionId,  packageId,  filepath,  contentType);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * Updates one or more properties of a file in a package associated with an application version.
	 * <p><pre><code>
	 *	ApplicationVersion applicationversion = new ApplicationVersion();
	 *	FileMetadata fileMetadata = applicationversion.UpdatePackageFile( stream,  applicationVersionId,  packageId,  filepath,  contentType);
	 * </code></pre></p>
	 * @param applicationVersionId Unique identifier of the application version. Application version IDs are unique across all applications associated with a developer account.
	 * @param filepath The location path and name that identifies the package file to update.
	 * @param packageId The unique identifier of the package.
	 * @param stream The contents of the package file to update, which requires a content-type value of "application/octet-stream" in the request header.
	 * @return com.mozu.api.contracts.appdev.FileMetadata
	 * @see com.mozu.api.contracts.appdev.FileMetadata
	 * @see Stream
	 */
	public com.mozu.api.contracts.appdev.FileMetadata updatePackageFile(java.io.InputStream stream, Integer applicationVersionId, Integer packageId, String filepath, String  contentType) throws Exception
	{
		MozuClient<com.mozu.api.contracts.appdev.FileMetadata> client = com.mozu.api.clients.platform.developer.ApplicationVersionClient.updatePackageFileClient( stream,  applicationVersionId,  packageId,  filepath,  contentType);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * Deletes the specified file from a package associated with an application version.
	 * <p><pre><code>
	 *	ApplicationVersion applicationversion = new ApplicationVersion();
	 *	applicationversion.DeletePackageFile( applicationVersionId,  packageId,  filepath);
	 * </code></pre></p>
	 * @param applicationVersionId Unique identifier of the application version.
	 * @param filepath The file path and name of the file location to delete from the package.
	 * @param packageId Unique identifier of the package.
	 * @return 
	 */
	public void deletePackageFile(Integer applicationVersionId, Integer packageId, String filepath) throws Exception
	{
		MozuClient client = com.mozu.api.clients.platform.developer.ApplicationVersionClient.deletePackageFileClient( applicationVersionId,  packageId,  filepath);
		client.setContext(_apiContext);
		client.executeRequest();

	}

}



