/**
 *     This code was auto-generated by a Codezu.     
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
 */
package com.mozu.api.contracts.pricingruntime;

import java.util.List;
import java.util.HashMap;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import org.joda.time.DateTime;
import java.io.IOException;
import java.lang.ClassNotFoundException;

/**
 *	Properties of the conditions that must be met for a discount to apply to an order.
 */
@JsonIgnoreProperties(ignoreUnknown = true)
public class DiscountCondition implements Serializable
{
	// Default Serial Version UID
	private static final long serialVersionUID = 1L;

	/**
	 * The coupon code that a shopper uses to redeem an associated discount  on a purchase. This is also the unique identifier of the coupon itself.
	 */
	protected  String couponCode;

	public String getCouponCode() {
		return this.couponCode;
	}

	public void setCouponCode(String couponCode) {
		this.couponCode = couponCode;
	}

	/**
	 * A list of customer segments - groups of customers accounts that discounts can be targeted for.
	 */
	protected List<Integer> customerSegmentIds;
	public List<Integer> getCustomerSegmentIds() {
		return this.customerSegmentIds;
	}
	public void setCustomerSegmentIds(List<Integer> customerSegmentIds) {
		this.customerSegmentIds = customerSegmentIds;
	}

	/**
	 * A list of categories to be excluded from the discount.
	 */
	protected List<Integer> excludedCategoryIds;
	public List<Integer> getExcludedCategoryIds() {
		return this.excludedCategoryIds;
	}
	public void setExcludedCategoryIds(List<Integer> excludedCategoryIds) {
		this.excludedCategoryIds = excludedCategoryIds;
	}

	/**
	 * A list of product codes to be excluded from the discount.
	 */
	protected List<String> excludedProductCodes;
	public List<String> getExcludedProductCodes() {
		return this.excludedProductCodes;
	}
	public void setExcludedProductCodes(List<String> excludedProductCodes) {
		this.excludedProductCodes = excludedProductCodes;
	}

	/**
	 * Date and time in UTC format when a discount, credit, wish list, or cart expires. An expired discount no longer can be redeemed. An expired wish list is no longer available. An expired credit can no longer be redeemed for a purchase. Acart becomes inactive and expired based on a system-calculated interval. For example, if an anonymous shopper has 14 days of inactivity, the cart is considered abandoned after that period of inactivity. System-supplied and read-only.
	 */
	protected  DateTime expirationDate;

	public DateTime getExpirationDate() {
		return this.expirationDate;
	}

	public void setExpirationDate(DateTime expirationDate) {
		this.expirationDate = expirationDate;
	}

	/**
	 * A list of categories to be included with the discount.
	 */
	protected List<Integer> includedCategoryIds;
	public List<Integer> getIncludedCategoryIds() {
		return this.includedCategoryIds;
	}
	public void setIncludedCategoryIds(List<Integer> includedCategoryIds) {
		this.includedCategoryIds = includedCategoryIds;
	}

	/**
	 * A list of product codes to be included in the discount.
	 */
	protected List<String> includedProductCodes;
	public List<String> getIncludedProductCodes() {
		return this.includedProductCodes;
	}
	public void setIncludedProductCodes(List<String> includedProductCodes) {
		this.includedProductCodes = includedProductCodes;
	}

	/**
	 * This specifies the minimum amount that must be purchased in the combined categories defined in IncludedCategories. This amount is calculated before discounting and it is not used if IncludedCategories is empty.
	 */
	protected  Double minimumCategorySubtotalBeforeDiscounts;

	public Double getMinimumCategorySubtotalBeforeDiscounts() {
		return this.minimumCategorySubtotalBeforeDiscounts;
	}

	public void setMinimumCategorySubtotalBeforeDiscounts(Double minimumCategorySubtotalBeforeDiscounts) {
		this.minimumCategorySubtotalBeforeDiscounts = minimumCategorySubtotalBeforeDiscounts;
	}

	/**
	 * The minimum customer lifetime value amount required to redeem this discount.
	 */
	protected  Double minimumLifetimeValueAmount;

	public Double getMinimumLifetimeValueAmount() {
		return this.minimumLifetimeValueAmount;
	}

	public void setMinimumLifetimeValueAmount(Double minimumLifetimeValueAmount) {
		this.minimumLifetimeValueAmount = minimumLifetimeValueAmount;
	}

	/**
	 * The minimum order amount required to redeem this discount.
	 */
	protected  Double minimumOrderAmount;

	public Double getMinimumOrderAmount() {
		return this.minimumOrderAmount;
	}

	public void setMinimumOrderAmount(Double minimumOrderAmount) {
		this.minimumOrderAmount = minimumOrderAmount;
	}

	/**
	 * This specifies the minimum quantity of products in the categories specified in IncludedCategories, which must be purchased to qualify for the associated discount. This defaults to 1 if null, and IncludedCategories has values.
	 */
	protected  Integer minimumQuantityProductsRequiredInCategories;

	public Integer getMinimumQuantityProductsRequiredInCategories() {
		return this.minimumQuantityProductsRequiredInCategories;
	}

	public void setMinimumQuantityProductsRequiredInCategories(Integer minimumQuantityProductsRequiredInCategories) {
		this.minimumQuantityProductsRequiredInCategories = minimumQuantityProductsRequiredInCategories;
	}

	/**
	 * This specifies the minimum quantity of products in the specified IncludedProducts that must be purchased to qualify for the associated discount. This defaults to 1 if null, and IncludedProducts has values.
	 */
	protected  Integer minimumQuantityRequiredProducts;

	public Integer getMinimumQuantityRequiredProducts() {
		return this.minimumQuantityRequiredProducts;
	}

	public void setMinimumQuantityRequiredProducts(Integer minimumQuantityRequiredProducts) {
		this.minimumQuantityRequiredProducts = minimumQuantityRequiredProducts;
	}

	protected List<String> paymentWorkflows;
	public List<String> getPaymentWorkflows() {
		return this.paymentWorkflows;
	}
	public void setPaymentWorkflows(List<String> paymentWorkflows) {
		this.paymentWorkflows = paymentWorkflows;
	}

	/**
	 * If true, redemption of this discount requires entry of a coupon code.
	 */
	protected  Boolean requiresCoupon;

	public Boolean getRequiresCoupon() {
		return this.requiresCoupon;
	}

	public void setRequiresCoupon(Boolean requiresCoupon) {
		this.requiresCoupon = requiresCoupon;
	}

	/**
	 * The earliest date and time this discount can be redeemed.
	 */
	protected  DateTime startDate;

	public DateTime getStartDate() {
		return this.startDate;
	}

	public void setStartDate(DateTime startDate) {
		this.startDate = startDate;
	}


}
