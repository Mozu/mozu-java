/**
 *     This code was auto-generated by a Codezu.     
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
 */
package com.mozu.api.contracts.productadmin;

import java.util.List;
import java.util.HashMap;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import org.joda.time.DateTime;
import java.io.IOException;
import java.lang.ClassNotFoundException;
import com.mozu.api.contracts.core.AuditInfo;
import com.mozu.api.contracts.productadmin.AttributeInProductType;

/**
 *	A product type is like a product template.
 */
@JsonIgnoreProperties(ignoreUnknown = true)
public class ProductType implements Serializable
{
	// Default Serial Version UID
	private static final long serialVersionUID = 1L;

	protected  String name;

	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	/**
	 * The type of goods in a bundled product. A bundled product is composed of products associated to sell together. Possible values include â€œPhysicalâ€ and â€œDigitalCreditâ€. This comes from the `productType `of the product. Products are defaulted to a Physical `goodsType`. Gift cards have a `goodsType `of DigitalCredit.
	 */
	protected  String goodsType;

	public String getGoodsType() {
		return this.goodsType;
	}

	public void setGoodsType(String goodsType) {
		this.goodsType = goodsType;
	}

	protected  Integer id;

	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	protected  Boolean isBaseProductType;

	public Boolean getIsBaseProductType() {
		return this.isBaseProductType;
	}

	public void setIsBaseProductType(Boolean isBaseProductType) {
		this.isBaseProductType = isBaseProductType;
	}

	protected  Integer masterCatalogId;

	public Integer getMasterCatalogId() {
		return this.masterCatalogId;
	}

	public void setMasterCatalogId(Integer masterCatalogId) {
		this.masterCatalogId = masterCatalogId;
	}

	protected  Integer productCount;

	public Integer getProductCount() {
		return this.productCount;
	}

	public void setProductCount(Integer productCount) {
		this.productCount = productCount;
	}

	/**
	 * List of product usages that describe how products of this type are used. Products of this type can be Standard (a single product without configurable options), Configurable (a product that includes configurable option attributes), Bundle (a collection of products sold as a single entity), or Component (an invididual product that represents a component in a bundle).
	 */
	protected List<String> productUsages;
	public List<String> getProductUsages() {
		return this.productUsages;
	}
	public void setProductUsages(List<String> productUsages) {
		this.productUsages = productUsages;
	}

	protected  AuditInfo auditInfo;

	public AuditInfo getAuditInfo() {
		return this.auditInfo;
	}

	public void setAuditInfo(AuditInfo auditInfo) {
		this.auditInfo = auditInfo;
	}

	protected List<AttributeInProductType> extras;
	public List<AttributeInProductType> getExtras() {
		return this.extras;
	}
	public void setExtras(List<AttributeInProductType> extras) {
		this.extras = extras;
	}

	protected List<AttributeInProductType> options;
	public List<AttributeInProductType> getOptions() {
		return this.options;
	}
	public void setOptions(List<AttributeInProductType> options) {
		this.options = options;
	}

	protected List<AttributeInProductType> properties;
	public List<AttributeInProductType> getProperties() {
		return this.properties;
	}
	public void setProperties(List<AttributeInProductType> properties) {
		this.properties = properties;
	}


}
