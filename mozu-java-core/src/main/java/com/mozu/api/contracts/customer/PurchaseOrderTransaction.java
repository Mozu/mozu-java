/**
 *     This code was auto-generated by a Codezu.     
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
 */
package com.mozu.api.contracts.customer;

import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import org.joda.time.DateTime;
import java.io.IOException;
import java.lang.ClassNotFoundException;
import com.mozu.api.contracts.core.AuditInfo;

/**
 *	The details of the purchase order payment transaction.
 */
@JsonIgnoreProperties(ignoreUnknown = true)
public class PurchaseOrderTransaction implements Serializable
{
	// Default Serial Version UID
	private static final long serialVersionUID = 1L;

	/**
	 * Additional transaction details or notes associated with the transaction.
	 */
	protected  String additionalTransactionDetail;

	public String getAdditionalTransactionDetail() {
		return this.additionalTransactionDetail;
	}

	public void setAdditionalTransactionDetail(String additionalTransactionDetail) {
		this.additionalTransactionDetail = additionalTransactionDetail;
	}

	/**
	 * The author of the purchase order transaction.
	 */
	protected  String author;

	public String getAuthor() {
		return this.author;
	}

	public void setAuthor(String author) {
		this.author = author;
	}

	/**
	 * The available balance the customer has on their purchase order account. This balance is the result of the  minus the customer's total amount due.
	 */
	protected  Double availableBalance;

	public Double getAvailableBalance() {
		return this.availableBalance;
	}

	public void setAvailableBalance(Double availableBalance) {
		this.availableBalance = availableBalance;
	}

	/**
	 * The total credit limit the customer can spend using purchase orders.
	 */
	protected  Double creditLimit;

	public Double getCreditLimit() {
		return this.creditLimit;
	}

	public void setCreditLimit(Double creditLimit) {
		this.creditLimit = creditLimit;
	}

	/**
	 * The unique identifier of the customer purchase order account.
	 */
	protected  Integer customerPurchaseOrderAccountId;

	public Integer getCustomerPurchaseOrderAccountId() {
		return this.customerPurchaseOrderAccountId;
	}

	public void setCustomerPurchaseOrderAccountId(Integer customerPurchaseOrderAccountId) {
		this.customerPurchaseOrderAccountId = customerPurchaseOrderAccountId;
	}

	/**
	 * Unique identifier used by an external program to identify a  order, customer account, or wish list.
	 */
	protected  String externalId;

	public String getExternalId() {
		return this.externalId;
	}

	public void setExternalId(String externalId) {
		this.externalId = externalId;
	}

	/**
	 * Unique identifier of the order associated with the payment.
	 */
	protected  String orderId;

	public String getOrderId() {
		return this.orderId;
	}

	public void setOrderId(String orderId) {
		this.orderId = orderId;
	}

	/**
	 * The purchase order number.
	 */
	protected  String purchaseOrderNumber;

	public String getPurchaseOrderNumber() {
		return this.purchaseOrderNumber;
	}

	public void setPurchaseOrderNumber(String purchaseOrderNumber) {
		this.purchaseOrderNumber = purchaseOrderNumber;
	}

	/**
	 * Unique identifier for the site. This IDÂ is used at all levels of a store, catalog, and tenant to associate objects to a site.
	 */
	protected  Integer siteId;

	public Integer getSiteId() {
		return this.siteId;
	}

	public void setSiteId(Integer siteId) {
		this.siteId = siteId;
	}

	/**
	 * Unique identifier for the tenant.
	 */
	protected  Integer tenantId;

	public Integer getTenantId() {
		return this.tenantId;
	}

	public void setTenantId(Integer tenantId) {
		this.tenantId = tenantId;
	}

	/**
	 * The amount of the purchase order transaction.
	 */
	protected  Double transactionAmount;

	public Double getTransactionAmount() {
		return this.transactionAmount;
	}

	public void setTransactionAmount(Double transactionAmount) {
		this.transactionAmount = transactionAmount;
	}

	/**
	 * The date when the purchase order transaction was made on a purchase order account.
	 */
	protected  DateTime transactionDate;

	public DateTime getTransactionDate() {
		return this.transactionDate;
	}

	public void setTransactionDate(DateTime transactionDate) {
		this.transactionDate = transactionDate;
	}

	/**
	 * A description of the purchase order transaction type.This field is read-only dependent on the value of .* * * * * * 
	 */
	protected  String transactionDescription;

	public String getTransactionDescription() {
		return this.transactionDescription;
	}

	public void setTransactionDescription(String transactionDescription) {
		this.transactionDescription = transactionDescription;
	}

	/**
	 * The type of the purchase order transaction.The valid values are:*  â€” Line of Credit Change*  â€” Payment Requested*  â€” Payment Collected *  â€” Payment Voided*  â€” Payment Refund*  â€” Manual Adjustment
	 */
	protected  Integer transactionTypeId;

	public Integer getTransactionTypeId() {
		return this.transactionTypeId;
	}

	public void setTransactionTypeId(Integer transactionTypeId) {
		this.transactionTypeId = transactionTypeId;
	}

	/**
	 * Basic audit info about the object, including date, time, and user account. This data may be captured when creating, updating, and removing data.
	 */
	protected  AuditInfo auditInfo;

	public AuditInfo getAuditInfo() {
		return this.auditInfo;
	}

	public void setAuditInfo(AuditInfo auditInfo) {
		this.auditInfo = auditInfo;
	}


}
