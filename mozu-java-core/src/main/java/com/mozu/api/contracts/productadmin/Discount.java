/**
 *     This code was auto-generated by a Codezu.     
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
 */
package com.mozu.api.contracts.productadmin;

import java.util.List;
import java.util.HashMap;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import org.joda.time.DateTime;
import java.io.IOException;
import java.lang.ClassNotFoundException;
import com.mozu.api.contracts.core.AuditInfo;
import com.mozu.api.contracts.productadmin.DiscountCondition;
import com.mozu.api.contracts.productadmin.DiscountLocalizedContent;
import com.mozu.api.contracts.productadmin.DiscountTarget;
import com.mozu.api.contracts.productadmin.ThresholdMessage;

/**
 *	Name of the discount added and applied to a shopping cart and order for a shopper's purchase. 
 */
@JsonIgnoreProperties(ignoreUnknown = true)
public class Discount implements Serializable
{
	// Default Serial Version UID
	private static final long serialVersionUID = 1L;

	protected  Double amount;

	public Double getAmount() {
		return this.amount;
	}

	public void setAmount(Double amount) {
		this.amount = amount;
	}

	protected  String amountType;

	public String getAmountType() {
		return this.amountType;
	}

	public void setAmountType(String amountType) {
		this.amountType = amountType;
	}

	/**
	 * Signifies that the discount is not referenced and can be hard deleted
	 */
	protected  Boolean canBeDeleted;

	public Boolean getCanBeDeleted() {
		return this.canBeDeleted;
	}

	public void setCanBeDeleted(Boolean canBeDeleted) {
		this.canBeDeleted = canBeDeleted;
	}

	/**
	 * canBeStackedUpon ApiType DOCUMENT_HERE 
	 */
	protected  Boolean canBeStackedUpon;

	public Boolean getCanBeStackedUpon() {
		return this.canBeStackedUpon;
	}

	public void setCanBeStackedUpon(Boolean canBeStackedUpon) {
		this.canBeStackedUpon = canBeStackedUpon;
	}

	protected  Integer currentRedemptionCount;

	public Integer getCurrentRedemptionCount() {
		return this.currentRedemptionCount;
	}

	public void setCurrentRedemptionCount(Integer currentRedemptionCount) {
		this.currentRedemptionCount = currentRedemptionCount;
	}

	/**
	 * True if the discount should not apply to orders with multiple shipments. For more information, refer to the topic on [multiple shipments](https://www.mozu.com/docs/Guides/orders/multi-ship.htm#effect_on_discounts).
	 */
	protected  Boolean doesNotApplyToMultiShipToOrders;

	public Boolean getDoesNotApplyToMultiShipToOrders() {
		return this.doesNotApplyToMultiShipToOrders;
	}

	public void setDoesNotApplyToMultiShipToOrders(Boolean doesNotApplyToMultiShipToOrders) {
		this.doesNotApplyToMultiShipToOrders = doesNotApplyToMultiShipToOrders;
	}

	/**
	 * Determines whether or not a discount applies to a items with a sale price. Applicable on order and line item discounts. For line items, when this is true, the discount will be disqualified. For order level discounts, when true, the discount will not be applied to those items have a sale price.
	 */
	protected  Boolean doesNotApplyToProductsWithSalePrice;

	public Boolean getDoesNotApplyToProductsWithSalePrice() {
		return this.doesNotApplyToProductsWithSalePrice;
	}

	public void setDoesNotApplyToProductsWithSalePrice(Boolean doesNotApplyToProductsWithSalePrice) {
		this.doesNotApplyToProductsWithSalePrice = doesNotApplyToProductsWithSalePrice;
	}

	/**
	 * If true, this discount does not apply to a line item product with a defined sale price. The default is false, which applies the discount to products with and without defined sale prices.
	 */
	protected  Boolean doesNotApplyToSalePrice;

	public Boolean getDoesNotApplyToSalePrice() {
		return this.doesNotApplyToSalePrice;
	}

	public void setDoesNotApplyToSalePrice(Boolean doesNotApplyToSalePrice) {
		this.doesNotApplyToSalePrice = doesNotApplyToSalePrice;
	}

	protected  Integer id;

	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	/**
	 * Products receiving a price from a price list specified here or a child of a specified price list can be discounted.
	 */
	protected List<String> includedPriceLists;
	public List<String> getIncludedPriceLists() {
		return this.includedPriceLists;
	}
	public void setIncludedPriceLists(List<String> includedPriceLists) {
		this.includedPriceLists = includedPriceLists;
	}

	/**
	 * This field is read-only and specifies whether the discount condition is one product or category, and matches the discount target.
	 */
	protected  Boolean isBxGx;

	public Boolean getIsBxGx() {
		return this.isBxGx;
	}

	public void setIsBxGx(Boolean isBxGx) {
		this.isBxGx = isBxGx;
	}

	/**
	 * Maximum impact this discount can apply on a single order. Must be either null or greater than zero.
	 */
	protected  Double maximumDiscountImpactPerOrder;

	public Double getMaximumDiscountImpactPerOrder() {
		return this.maximumDiscountImpactPerOrder;
	}

	public void setMaximumDiscountImpactPerOrder(Double maximumDiscountImpactPerOrder) {
		this.maximumDiscountImpactPerOrder = maximumDiscountImpactPerOrder;
	}

	/**
	 * Maximum impact this discount can apply on a single line item. Must be either null or greater than zero.
	 */
	protected  Double maximumDiscountImpactPerRedemption;

	public Double getMaximumDiscountImpactPerRedemption() {
		return this.maximumDiscountImpactPerRedemption;
	}

	public void setMaximumDiscountImpactPerRedemption(Double maximumDiscountImpactPerRedemption) {
		this.maximumDiscountImpactPerRedemption = maximumDiscountImpactPerRedemption;
	}

	/**
	 * Maximum number of redemptions allowed per order. If null, defaults to unlimited.
	 */
	protected  Integer maximumRedemptionsPerOrder;

	public Integer getMaximumRedemptionsPerOrder() {
		return this.maximumRedemptionsPerOrder;
	}

	public void setMaximumRedemptionsPerOrder(Integer maximumRedemptionsPerOrder) {
		this.maximumRedemptionsPerOrder = maximumRedemptionsPerOrder;
	}

	/**
	 * The maximum number of times an individual shopper can redeem the discount.
	 */
	protected  Integer maximumUsesPerUser;

	public Integer getMaximumUsesPerUser() {
		return this.maximumUsesPerUser;
	}

	public void setMaximumUsesPerUser(Integer maximumUsesPerUser) {
		this.maximumUsesPerUser = maximumUsesPerUser;
	}

	/**
	 * preventLineItemShippingDiscounts ApiType DOCUMENT_HERE 
	 */
	protected  Boolean preventLineItemShippingDiscounts;

	public Boolean getPreventLineItemShippingDiscounts() {
		return this.preventLineItemShippingDiscounts;
	}

	public void setPreventLineItemShippingDiscounts(Boolean preventLineItemShippingDiscounts) {
		this.preventLineItemShippingDiscounts = preventLineItemShippingDiscounts;
	}

	/**
	 * preventOrderProductDiscounts ApiType DOCUMENT_HERE 
	 */
	protected  Boolean preventOrderProductDiscounts;

	public Boolean getPreventOrderProductDiscounts() {
		return this.preventOrderProductDiscounts;
	}

	public void setPreventOrderProductDiscounts(Boolean preventOrderProductDiscounts) {
		this.preventOrderProductDiscounts = preventOrderProductDiscounts;
	}

	/**
	 * preventOrderShippingDiscounts ApiType DOCUMENT_HERE 
	 */
	protected  Boolean preventOrderShippingDiscounts;

	public Boolean getPreventOrderShippingDiscounts() {
		return this.preventOrderShippingDiscounts;
	}

	public void setPreventOrderShippingDiscounts(Boolean preventOrderShippingDiscounts) {
		this.preventOrderShippingDiscounts = preventOrderShippingDiscounts;
	}

	protected  String scope;

	public String getScope() {
		return this.scope;
	}

	public void setScope(String scope) {
		this.scope = scope;
	}

	/**
	 * stackingLayer ApiType DOCUMENT_HERE 
	 */
	protected  Integer stackingLayer;

	public Integer getStackingLayer() {
		return this.stackingLayer;
	}

	public void setStackingLayer(Integer stackingLayer) {
		this.stackingLayer = stackingLayer;
	}

	protected  String status;

	public String getStatus() {
		return this.status;
	}

	public void setStatus(String status) {
		this.status = status;
	}

	protected  AuditInfo auditInfo;

	public AuditInfo getAuditInfo() {
		return this.auditInfo;
	}

	public void setAuditInfo(AuditInfo auditInfo) {
		this.auditInfo = auditInfo;
	}

	/**
	 * List of conditions that must be met for the discount to apply.
	 */
	protected  DiscountCondition conditions;

	public DiscountCondition getConditions() {
		return this.conditions;
	}

	public void setConditions(DiscountCondition conditions) {
		this.conditions = conditions;
	}

	protected  DiscountLocalizedContent content;

	public DiscountLocalizedContent getContent() {
		return this.content;
	}

	public void setContent(DiscountLocalizedContent content) {
		this.content = content;
	}

	protected  DiscountTarget target;

	public DiscountTarget getTarget() {
		return this.target;
	}

	public void setTarget(DiscountTarget target) {
		this.target = target;
	}

	/**
	 * thresholdMessage ApiType DOCUMENT_HERE 
	 */
	protected  ThresholdMessage thresholdMessage;

	public ThresholdMessage getThresholdMessage() {
		return this.thresholdMessage;
	}

	public void setThresholdMessage(ThresholdMessage thresholdMessage) {
		this.thresholdMessage = thresholdMessage;
	}


}
