/**
 *     This code was auto-generated by a Codezu.     
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
 */
package com.mozu.api.contracts.installedapplications;

import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import org.joda.time.DateTime;
import java.io.IOException;
import java.lang.ClassNotFoundException;

/**
 *	Mozu.InstalledApplications.Contracts.CustomFunction ApiType DOCUMENT_HERE
 */
@JsonIgnoreProperties(ignoreUnknown = true)
public class CustomFunction implements Serializable
{
	// Default Serial Version UID
	private static final long serialVersionUID = 1L;

	/**
	 * The Arc.js application key.
	 */
	protected  String applicationKey;

	public String getApplicationKey() {
		return this.applicationKey;
	}

	public void setApplicationKey(String applicationKey) {
		this.applicationKey = applicationKey;
	}

	/**
	 * Indicates if a capability, function tied to an Arc.js action, application, or price list is enabled for the tenant/site. If true, the capability/application/function/price list is enabled for the tenant. System-supplied and read-only with the exception of functions tied to an Arc.js action and price lists.
	 */
	protected  Boolean enabled;

	public Boolean getEnabled() {
		return this.enabled;
	}

	public void setEnabled(Boolean enabled) {
		this.enabled = enabled;
	}

	/**
	 * The behavior to take when an error is encountered. "fault" or "continue". The default is "fault".
	 */
	protected  String exceptionBehavior;

	public String getExceptionBehavior() {
		return this.exceptionBehavior;
	}

	public void setExceptionBehavior(String exceptionBehavior) {
		this.exceptionBehavior = exceptionBehavior;
	}

	/**
	 * The name of the custom function tied to a particular action.
	 */
	protected  String functionId;

	public String getFunctionId() {
		return this.functionId;
	}

	public void setFunctionId(String functionId) {
		this.functionId = functionId;
	}

	/**
	 * The priority level to assign to logs related to a particular function. Possible values mirror Apache's log4net: "all", "debug", "info", "warn", "error", "fatal", and "off".
	 */
	protected  String logLevel;

	public String getLogLevel() {
		return this.logLevel;
	}

	public void setLogLevel(String logLevel) {
		this.logLevel = logLevel;
	}

	/**
	 * The number of milliseconds that the function waits before timing out. The default is 5000 milliseconds
	 */
	protected  Integer timeoutMilliseconds;

	public Integer getTimeoutMilliseconds() {
		return this.timeoutMilliseconds;
	}

	public void setTimeoutMilliseconds(Integer timeoutMilliseconds) {
		this.timeoutMilliseconds = timeoutMilliseconds;
	}

	/**
	 * Custom function-level settings specified as key-value pairs.
	 */
	protected transient com.fasterxml.jackson.databind.JsonNode configuration;

	public com.fasterxml.jackson.databind.JsonNode getConfiguration() {
		return this.configuration;
	}

	public void setConfiguration(com.fasterxml.jackson.databind.JsonNode configuration) {
		this.configuration = configuration;
	}

	private void writeObject(java.io.ObjectOutputStream out) throws IOException {
		out.defaultWriteObject();
		if(configuration == null){
			out.writeBoolean(false);
		} else {
			out.writeBoolean(true);
			new com.fasterxml.jackson.databind.ObjectMapper().configure(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET, false).writeValue(out, configuration);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException {
		in.defaultReadObject();
		if(in.readBoolean()){
			this.configuration = new com.fasterxml.jackson.databind.ObjectMapper().configure(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE, false).readValue(in, com.fasterxml.jackson.databind.JsonNode.class);
		}
	}

}
