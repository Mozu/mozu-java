/**
 *     This code was auto-generated by a Codezu.     
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
 */
package com.mozu.api.contracts.productadmin;

import java.util.List;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import org.joda.time.DateTime;
import com.mozu.api.contracts.productadmin.CategoryLocalizedImage;

/**
 *	The container for category properties that are shown in the language specified by the locale code.
 */
@JsonIgnoreProperties(ignoreUnknown = true)
public class CategoryLocalizedContent implements Serializable
{
	// Default Serial Version UID
	private static final long serialVersionUID = 1L;

	/**
	 * Title defined for the product category metadata, used to manage internal product information, in the language specified by the locale code.
	 */
	protected String metaTagTitle;

	public String getMetaTagTitle() {
		return this.metaTagTitle;
	}

	public void setMetaTagTitle(String metaTagTitle) {
		this.metaTagTitle = metaTagTitle;
	}

	/**
	 * The name of the product category in the language specified by the locale code.
	 */
	protected String name;

	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	/**
	 * Title that appears on new product category pages, in the language specified by the locale code.
	 */
	protected String pageTitle;

	public String getPageTitle() {
		return this.pageTitle;
	}

	public void setPageTitle(String pageTitle) {
		this.pageTitle = pageTitle;
	}

	/**
	 * Human-readable identifier to assign to the category to generate user-friendly URLs.
	 */
	protected String slug;

	public String getSlug() {
		return this.slug;
	}

	public void setSlug(String slug) {
		this.slug = slug;
	}

	/**
	 * Description of the product category in the language specified by the locale code.
	 */
	protected String description;

	public String getDescription() {
		return this.description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	/**
	 * Language used for the entity. Currently, only "en-US" is supported.
	 */
	protected String localeCode;

	public String getLocaleCode() {
		return this.localeCode;
	}

	public void setLocaleCode(String localeCode) {
		this.localeCode = localeCode;
	}

	/**
	 * Description defined for the product category metadata, used to manage internal product information, in the language specified by the locale code.
	 */
	protected String metaTagDescription;

	public String getMetaTagDescription() {
		return this.metaTagDescription;
	}

	public void setMetaTagDescription(String metaTagDescription) {
		this.metaTagDescription = metaTagDescription;
	}

	/**
	 * Keywords defined for the product category metadata, used to manage internal product information, in the language specified by the locale code.
	 */
	protected String metaTagKeywords;

	public String getMetaTagKeywords() {
		return this.metaTagKeywords;
	}

	public void setMetaTagKeywords(String metaTagKeywords) {
		this.metaTagKeywords = metaTagKeywords;
	}

	/**
	 * Array of localized product category images in the language specified by the LocaleCode.
	 */
	protected List<CategoryLocalizedImage> categoryImages;
	public List<CategoryLocalizedImage> getCategoryImages() {
		return this.categoryImages;
	}
	public void setCategoryImages(List<CategoryLocalizedImage> categoryImages) {
		this.categoryImages = categoryImages;
	}

}
