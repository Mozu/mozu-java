/**
 *     This code was auto-generated by a Codezu.     
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
 */
package com.mozu.api.contracts.commerceruntime.orders;

import java.util.List;
import java.util.HashMap;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import org.joda.time.DateTime;
import java.io.IOException;
import java.lang.ClassNotFoundException;
import com.mozu.api.contracts.commerceruntime.commerce.Adjustment;
import com.mozu.api.contracts.commerceruntime.orders.OrderAttribute;
import com.mozu.api.contracts.core.AuditInfo;
import com.mozu.api.contracts.commerceruntime.payments.BillingInfo;
import com.mozu.api.contracts.commerceruntime.commerce.ChangeMessage;
import com.mozu.api.contracts.commerceruntime.fulfillment.DigitalPackage;
import com.mozu.api.contracts.commerceruntime.commerce.ThresholdMessage;
import com.mozu.api.contracts.commerceruntime.commerce.ExtendedProperty;
import com.mozu.api.contracts.commerceruntime.fulfillment.FulfillmentInfo;
import com.mozu.api.contracts.commerceruntime.discounts.AppliedDiscount;
import com.mozu.api.contracts.commerceruntime.discounts.InvalidCoupon;
import com.mozu.api.contracts.commerceruntime.orders.OrderItem;
import com.mozu.api.contracts.commerceruntime.orders.OrderNote;
import com.mozu.api.contracts.commerceruntime.fulfillment.Package;
import com.mozu.api.contracts.commerceruntime.payments.Payment;
import com.mozu.api.contracts.commerceruntime.fulfillment.Pickup;
import com.mozu.api.contracts.commerceruntime.refunds.Refund;
import com.mozu.api.contracts.commerceruntime.discounts.SuggestedDiscount;
import com.mozu.api.contracts.commerceruntime.fulfillment.Shipment;
import com.mozu.api.contracts.commerceruntime.discounts.ShippingDiscount;
import com.mozu.api.contracts.commerceruntime.orders.ShopperNotes;
import com.mozu.api.contracts.commerceruntime.orders.OrderValidationResult;

/**
 *	Properties of an order, including its components.
 */
@JsonIgnoreProperties(ignoreUnknown = true)
public class Order implements Serializable
{
	// Default Serial Version UID
	private static final long serialVersionUID = 1L;

	/**
	 * The date and time the order was accepted by the tenant.
	 */
	protected  DateTime acceptedDate;

	public DateTime getAcceptedDate() {
		return this.acceptedDate;
	}

	public void setAcceptedDate(DateTime acceptedDate) {
		this.acceptedDate = acceptedDate;
	}

	/**
	 * Indicates if the customer account is opted to receive marketing materials. If true, the customer account is opted in for receiving the content. 
	 */
	protected  Boolean acceptsMarketing;

	public Boolean getAcceptsMarketing() {
		return this.acceptsMarketing;
	}

	public void setAcceptsMarketing(Boolean acceptsMarketing) {
		this.acceptsMarketing = acceptsMarketing;
	}

	/**
	 * The amount of the order the shopper can receive in the event of a return. This amount represents the amount captured at the time the order was submitted, not when the order was returned.
	 */
	protected  Double amountAvailableForRefund;

	public Double getAmountAvailableForRefund() {
		return this.amountAvailableForRefund;
	}

	public void setAmountAvailableForRefund(Double amountAvailableForRefund) {
		this.amountAvailableForRefund = amountAvailableForRefund;
	}

	/**
	 * A counter for how much money has been issued in refunds. This calculated field does NOT include refunds issued in returns.
	 */
	protected  Double amountRefunded;

	public Double getAmountRefunded() {
		return this.amountRefunded;
	}

	public void setAmountRefunded(Double amountRefunded) {
		this.amountRefunded = amountRefunded;
	}

	/**
	 * The total amount of the order not currently associated with a payment. The shopper must create one or more payments to satisfy this amount before the order can be fully paid.
	 */
	protected  Double amountRemainingForPayment;

	public Double getAmountRemainingForPayment() {
		return this.amountRemainingForPayment;
	}

	public void setAmountRemainingForPayment(Double amountRemainingForPayment) {
		this.amountRemainingForPayment = amountRemainingForPayment;
	}

	protected List<String> availableActions;
	public List<String> getAvailableActions() {
		return this.availableActions;
	}
	public void setAvailableActions(List<String> availableActions) {
		this.availableActions = availableActions;
	}

	protected  DateTime cancelledDate;

	public DateTime getCancelledDate() {
		return this.cancelledDate;
	}

	public void setCancelledDate(DateTime cancelledDate) {
		this.cancelledDate = cancelledDate;
	}

	protected  String channelCode;

	public String getChannelCode() {
		return this.channelCode;
	}

	public void setChannelCode(String channelCode) {
		this.channelCode = channelCode;
	}

	protected  DateTime closedDate;

	public DateTime getClosedDate() {
		return this.closedDate;
	}

	public void setClosedDate(DateTime closedDate) {
		this.closedDate = closedDate;
	}

	protected List<String> couponCodes;
	public List<String> getCouponCodes() {
		return this.couponCodes;
	}
	public void setCouponCodes(List<String> couponCodes) {
		this.couponCodes = couponCodes;
	}

	protected  String currencyCode;

	public String getCurrencyCode() {
		return this.currencyCode;
	}

	public void setCurrencyCode(String currencyCode) {
		this.currencyCode = currencyCode;
	}

	protected  Integer customerAccountId;

	public Integer getCustomerAccountId() {
		return this.customerAccountId;
	}

	public void setCustomerAccountId(Integer customerAccountId) {
		this.customerAccountId = customerAccountId;
	}

	protected  String customerInteractionType;

	public String getCustomerInteractionType() {
		return this.customerInteractionType;
	}

	public void setCustomerInteractionType(String customerInteractionType) {
		this.customerInteractionType = customerInteractionType;
	}

	protected  String customerTaxId;

	public String getCustomerTaxId() {
		return this.customerTaxId;
	}

	public void setCustomerTaxId(String customerTaxId) {
		this.customerTaxId = customerTaxId;
	}

	protected  Double discountedSubtotal;

	public Double getDiscountedSubtotal() {
		return this.discountedSubtotal;
	}

	public void setDiscountedSubtotal(Double discountedSubtotal) {
		this.discountedSubtotal = discountedSubtotal;
	}

	protected  Double discountedTotal;

	public Double getDiscountedTotal() {
		return this.discountedTotal;
	}

	public void setDiscountedTotal(Double discountedTotal) {
		this.discountedTotal = discountedTotal;
	}

	protected  Double discountTotal;

	public Double getDiscountTotal() {
		return this.discountTotal;
	}

	public void setDiscountTotal(Double discountTotal) {
		this.discountTotal = discountTotal;
	}

	/**
	 * Order level duty or tariff amount. Does not take into account duties or tariffs specifically on items on the order
	 */
	protected  Double dutyAmount;

	public Double getDutyAmount() {
		return this.dutyAmount;
	}

	public void setDutyAmount(Double dutyAmount) {
		this.dutyAmount = dutyAmount;
	}

	/**
	 * Duties or tariffs for the Order as well as OrderItems (e.g. if the Order has a $5 duty or tariff for any reason and an OrderItem has a $2 duty or tariff then the value in this property would be $7)
	 */
	protected  Double dutyTotal;

	public Double getDutyTotal() {
		return this.dutyTotal;
	}

	public void setDutyTotal(Double dutyTotal) {
		this.dutyTotal = dutyTotal;
	}

	protected  String email;

	public String getEmail() {
		return this.email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	protected  DateTime expirationDate;

	public DateTime getExpirationDate() {
		return this.expirationDate;
	}

	public void setExpirationDate(DateTime expirationDate) {
		this.expirationDate = expirationDate;
	}

	/**
	 * Unique identifier used by an external program to identify a  order, customer account, or wish list.
	 */
	protected  String externalId;

	public String getExternalId() {
		return this.externalId;
	}

	public void setExternalId(String externalId) {
		this.externalId = externalId;
	}

	protected  Double feeTotal;

	public Double getFeeTotal() {
		return this.feeTotal;
	}

	public void setFeeTotal(Double feeTotal) {
		this.feeTotal = feeTotal;
	}

	protected  String fulfillmentStatus;

	public String getFulfillmentStatus() {
		return this.fulfillmentStatus;
	}

	public void setFulfillmentStatus(String fulfillmentStatus) {
		this.fulfillmentStatus = fulfillmentStatus;
	}

	protected  Double handlingAmount;

	public Double getHandlingAmount() {
		return this.handlingAmount;
	}

	public void setHandlingAmount(Double handlingAmount) {
		this.handlingAmount = handlingAmount;
	}

	protected  Double handlingSubTotal;

	public Double getHandlingSubTotal() {
		return this.handlingSubTotal;
	}

	public void setHandlingSubTotal(Double handlingSubTotal) {
		this.handlingSubTotal = handlingSubTotal;
	}

	protected  Double handlingTaxTotal;

	public Double getHandlingTaxTotal() {
		return this.handlingTaxTotal;
	}

	public void setHandlingTaxTotal(Double handlingTaxTotal) {
		this.handlingTaxTotal = handlingTaxTotal;
	}

	/**
	 * This total represents the handling amount value with any applied discounts.
	 */
	protected  Double handlingTotal;

	public Double getHandlingTotal() {
		return this.handlingTotal;
	}

	public void setHandlingTotal(Double handlingTotal) {
		this.handlingTotal = handlingTotal;
	}

	protected  Boolean hasDraft;

	public Boolean getHasDraft() {
		return this.hasDraft;
	}

	public void setHasDraft(Boolean hasDraft) {
		this.hasDraft = hasDraft;
	}

	protected  String id;

	public String getId() {
		return this.id;
	}

	public void setId(String id) {
		this.id = id;
	}

	/**
	 * The date and time an order or wish list is imported into . This is not the date and time it was created in the external application.
	 */
	protected  DateTime importDate;

	public DateTime getImportDate() {
		return this.importDate;
	}

	public void setImportDate(DateTime importDate) {
		this.importDate = importDate;
	}

	protected  String ipAddress;

	public String getIpAddress() {
		return this.ipAddress;
	}

	public void setIpAddress(String ipAddress) {
		this.ipAddress = ipAddress;
	}

	protected  Boolean isDraft;

	public Boolean getIsDraft() {
		return this.isDraft;
	}

	public void setIsDraft(Boolean isDraft) {
		this.isDraft = isDraft;
	}

	/**
	 * If true, the shopper can return any of the items in this order to the tenant.
	 */
	protected  Boolean isEligibleForReturns;

	public Boolean getIsEligibleForReturns() {
		return this.isEligibleForReturns;
	}

	public void setIsEligibleForReturns(Boolean isEligibleForReturns) {
		this.isEligibleForReturns = isEligibleForReturns;
	}

	protected  Boolean isImport;

	public Boolean getIsImport() {
		return this.isImport;
	}

	public void setIsImport(Boolean isImport) {
		this.isImport = isImport;
	}

	/**
	 * True if the order is one of multiple orders created to fulfill as parent order that supports shipping to multiple adresses.
	 */
	protected  Boolean isPartialOrder;

	public Boolean getIsPartialOrder() {
		return this.isPartialOrder;
	}

	public void setIsPartialOrder(Boolean isPartialOrder) {
		this.isPartialOrder = isPartialOrder;
	}

	protected  Boolean isTaxExempt;

	public Boolean getIsTaxExempt() {
		return this.isTaxExempt;
	}

	public void setIsTaxExempt(Boolean isTaxExempt) {
		this.isTaxExempt = isTaxExempt;
	}

	protected  Boolean isUnified;

	public Boolean getIsUnified() {
		return this.isUnified;
	}

	public void setIsUnified(Boolean isUnified) {
		this.isUnified = isUnified;
	}

	protected  Double itemTaxTotal;

	public Double getItemTaxTotal() {
		return this.itemTaxTotal;
	}

	public void setItemTaxTotal(Double itemTaxTotal) {
		this.itemTaxTotal = itemTaxTotal;
	}

	protected  DateTime lastValidationDate;

	public DateTime getLastValidationDate() {
		return this.lastValidationDate;
	}

	public void setLastValidationDate(DateTime lastValidationDate) {
		this.lastValidationDate = lastValidationDate;
	}

	/**
	 * The total charge for the line item with all weighted order level manual adjustments.
	 */
	protected  Double lineItemSubtotalWithOrderAdjustments;

	public Double getLineItemSubtotalWithOrderAdjustments() {
		return this.lineItemSubtotalWithOrderAdjustments;
	}

	public void setLineItemSubtotalWithOrderAdjustments(Double lineItemSubtotalWithOrderAdjustments) {
		this.lineItemSubtotalWithOrderAdjustments = lineItemSubtotalWithOrderAdjustments;
	}

	protected  String locationCode;

	public String getLocationCode() {
		return this.locationCode;
	}

	public void setLocationCode(String locationCode) {
		this.locationCode = locationCode;
	}

	protected  Integer orderNumber;

	public Integer getOrderNumber() {
		return this.orderNumber;
	}

	public void setOrderNumber(Integer orderNumber) {
		this.orderNumber = orderNumber;
	}

	protected  String originalCartId;

	public String getOriginalCartId() {
		return this.originalCartId;
	}

	public void setOriginalCartId(String originalCartId) {
		this.originalCartId = originalCartId;
	}

	/**
	 * The unique identifier of the checkout that created the parent order (if the order is one of multiple orders created to fulfill a parent order that support shipping to multiple addresses).
	 */
	protected  String parentCheckoutId;

	public String getParentCheckoutId() {
		return this.parentCheckoutId;
	}

	public void setParentCheckoutId(String parentCheckoutId) {
		this.parentCheckoutId = parentCheckoutId;
	}

	/**
	 * The checkout number from the checkout that created the parent order (if the order is one of multiple orders created to fulfill a parent order that support shipping to multiple addresses).
	 */
	protected  Integer parentCheckoutNumber;

	public Integer getParentCheckoutNumber() {
		return this.parentCheckoutNumber;
	}

	public void setParentCheckoutNumber(Integer parentCheckoutNumber) {
		this.parentCheckoutNumber = parentCheckoutNumber;
	}

	/**
	 * If this Order has a parent Order, the parent Order ID is recorded here.
	 */
	protected  String parentOrderId;

	public String getParentOrderId() {
		return this.parentOrderId;
	}

	public void setParentOrderId(String parentOrderId) {
		this.parentOrderId = parentOrderId;
	}

	/**
	 * If the Order has a parent Order, the order number is recorded here.
	 */
	protected  Integer parentOrderNumber;

	public Integer getParentOrderNumber() {
		return this.parentOrderNumber;
	}

	public void setParentOrderNumber(Integer parentOrderNumber) {
		this.parentOrderNumber = parentOrderNumber;
	}

	protected  String parentReturnId;

	public String getParentReturnId() {
		return this.parentReturnId;
	}

	public void setParentReturnId(String parentReturnId) {
		this.parentReturnId = parentReturnId;
	}

	/**
	 * If the Order has a parent Order with a return, the return number is recorded here.
	 */
	protected  Integer parentReturnNumber;

	public Integer getParentReturnNumber() {
		return this.parentReturnNumber;
	}

	public void setParentReturnNumber(Integer parentReturnNumber) {
		this.parentReturnNumber = parentReturnNumber;
	}

	/**
	 * The number of partial orders that make up the parent order.
	 */
	protected  Integer partialOrderCount;

	public Integer getPartialOrderCount() {
		return this.partialOrderCount;
	}

	public void setPartialOrderCount(Integer partialOrderCount) {
		this.partialOrderCount = partialOrderCount;
	}

	/**
	 * The order number for the partial order.
	 */
	protected  Integer partialOrderNumber;

	public Integer getPartialOrderNumber() {
		return this.partialOrderNumber;
	}

	public void setPartialOrderNumber(Integer partialOrderNumber) {
		this.partialOrderNumber = partialOrderNumber;
	}

	protected  String paymentStatus;

	public String getPaymentStatus() {
		return this.paymentStatus;
	}

	public void setPaymentStatus(String paymentStatus) {
		this.paymentStatus = paymentStatus;
	}

	/**
	 * If the order is associated with a price list, this is the unique code of the price list.
	 */
	protected  String priceListCode;

	public String getPriceListCode() {
		return this.priceListCode;
	}

	public void setPriceListCode(String priceListCode) {
		this.priceListCode = priceListCode;
	}

	protected  Boolean readyToCapture;

	public Boolean getReadyToCapture() {
		return this.readyToCapture;
	}

	public void setReadyToCapture(Boolean readyToCapture) {
		this.readyToCapture = readyToCapture;
	}

	protected  String returnStatus;

	public String getReturnStatus() {
		return this.returnStatus;
	}

	public void setReturnStatus(String returnStatus) {
		this.returnStatus = returnStatus;
	}

	/**
	 * The total shipping amount for the order before discounts and adjustments.
	 */
	protected  Double shippingAmountBeforeDiscountsAndAdjustments;

	public Double getShippingAmountBeforeDiscountsAndAdjustments() {
		return this.shippingAmountBeforeDiscountsAndAdjustments;
	}

	public void setShippingAmountBeforeDiscountsAndAdjustments(Double shippingAmountBeforeDiscountsAndAdjustments) {
		this.shippingAmountBeforeDiscountsAndAdjustments = shippingAmountBeforeDiscountsAndAdjustments;
	}

	protected  Double shippingSubTotal;

	public Double getShippingSubTotal() {
		return this.shippingSubTotal;
	}

	public void setShippingSubTotal(Double shippingSubTotal) {
		this.shippingSubTotal = shippingSubTotal;
	}

	protected  Double shippingTaxTotal;

	public Double getShippingTaxTotal() {
		return this.shippingTaxTotal;
	}

	public void setShippingTaxTotal(Double shippingTaxTotal) {
		this.shippingTaxTotal = shippingTaxTotal;
	}

	protected  Double shippingTotal;

	public Double getShippingTotal() {
		return this.shippingTotal;
	}

	public void setShippingTotal(Double shippingTotal) {
		this.shippingTotal = shippingTotal;
	}

	protected  Integer siteId;

	public Integer getSiteId() {
		return this.siteId;
	}

	public void setSiteId(Integer siteId) {
		this.siteId = siteId;
	}

	protected  String sourceDevice;

	public String getSourceDevice() {
		return this.sourceDevice;
	}

	public void setSourceDevice(String sourceDevice) {
		this.sourceDevice = sourceDevice;
	}

	protected  String status;

	public String getStatus() {
		return this.status;
	}

	public void setStatus(String status) {
		this.status = status;
	}

	protected  DateTime submittedDate;

	public DateTime getSubmittedDate() {
		return this.submittedDate;
	}

	public void setSubmittedDate(DateTime submittedDate) {
		this.submittedDate = submittedDate;
	}

	protected  Double subtotal;

	public Double getSubtotal() {
		return this.subtotal;
	}

	public void setSubtotal(Double subtotal) {
		this.subtotal = subtotal;
	}

	protected  Double taxTotal;

	public Double getTaxTotal() {
		return this.taxTotal;
	}

	public void setTaxTotal(Double taxTotal) {
		this.taxTotal = taxTotal;
	}

	protected  Integer tenantId;

	public Integer getTenantId() {
		return this.tenantId;
	}

	public void setTenantId(Integer tenantId) {
		this.tenantId = tenantId;
	}

	protected  Double total;

	public Double getTotal() {
		return this.total;
	}

	public void setTotal(Double total) {
		this.total = total;
	}

	protected  Double totalCollected;

	public Double getTotalCollected() {
		return this.totalCollected;
	}

	public void setTotalCollected(Double totalCollected) {
		this.totalCollected = totalCollected;
	}

	/**
	 * This specifies the order type. This means, was this order placed online or offline? Online means shopper created the order at checkout, offline means the order was a phone order.
	 */
	protected  String type;

	public String getType() {
		return this.type;
	}

	public void setType(String type) {
		this.type = type;
	}

	/**
	 * Unique identifier of the customer account (shopper or system user). System-supplied and read-only. If the shopper user is anonymous, the user ID represents a system-generated user ID string.
	 */
	protected  String userId;

	public String getUserId() {
		return this.userId;
	}

	public void setUserId(String userId) {
		this.userId = userId;
	}

	protected  String version;

	public String getVersion() {
		return this.version;
	}

	public void setVersion(String version) {
		this.version = version;
	}

	protected  String visitId;

	public String getVisitId() {
		return this.visitId;
	}

	public void setVisitId(String visitId) {
		this.visitId = visitId;
	}

	protected  String webSessionId;

	public String getWebSessionId() {
		return this.webSessionId;
	}

	public void setWebSessionId(String webSessionId) {
		this.webSessionId = webSessionId;
	}

	protected  Adjustment adjustment;

	public Adjustment getAdjustment() {
		return this.adjustment;
	}

	public void setAdjustment(Adjustment adjustment) {
		this.adjustment = adjustment;
	}

	protected List<OrderAttribute> attributes;
	public List<OrderAttribute> getAttributes() {
		return this.attributes;
	}
	public void setAttributes(List<OrderAttribute> attributes) {
		this.attributes = attributes;
	}

	protected  AuditInfo auditInfo;

	public AuditInfo getAuditInfo() {
		return this.auditInfo;
	}

	public void setAuditInfo(AuditInfo auditInfo) {
		this.auditInfo = auditInfo;
	}

	protected  BillingInfo billingInfo;

	public BillingInfo getBillingInfo() {
		return this.billingInfo;
	}

	public void setBillingInfo(BillingInfo billingInfo) {
		this.billingInfo = billingInfo;
	}

	protected List<ChangeMessage> changeMessages;
	public List<ChangeMessage> getChangeMessages() {
		return this.changeMessages;
	}
	public void setChangeMessages(List<ChangeMessage> changeMessages) {
		this.changeMessages = changeMessages;
	}

	/**
	 * Custom data for a given vendor set within the commerce process.
	 */
	protected transient com.fasterxml.jackson.databind.JsonNode data;

	public com.fasterxml.jackson.databind.JsonNode getData() {
		return this.data;
	}

	public void setData(com.fasterxml.jackson.databind.JsonNode data) {
		this.data = data;
	}

	/**
	 * Specifies the fulfillment of digital packages associated with this order.
	 */
	protected List<DigitalPackage> digitalPackages;
	public List<DigitalPackage> getDigitalPackages() {
		return this.digitalPackages;
	}
	public void setDigitalPackages(List<DigitalPackage> digitalPackages) {
		this.digitalPackages = digitalPackages;
	}

	/**
	 * Saves threshold message settings for the Cart and Checkout pages.
	 */
	protected List<ThresholdMessage> discountThresholdMessages;
	public List<ThresholdMessage> getDiscountThresholdMessages() {
		return this.discountThresholdMessages;
	}
	public void setDiscountThresholdMessages(List<ThresholdMessage> discountThresholdMessages) {
		this.discountThresholdMessages = discountThresholdMessages;
	}

	/**
	 * Extra properties (key-value pairs) that extend the primary object. Think of this as a property bag of string keys and string values.
	 */
	protected List<ExtendedProperty> extendedProperties;
	public List<ExtendedProperty> getExtendedProperties() {
		return this.extendedProperties;
	}
	public void setExtendedProperties(List<ExtendedProperty> extendedProperties) {
		this.extendedProperties = extendedProperties;
	}

	protected  FulfillmentInfo fulfillmentInfo;

	public FulfillmentInfo getFulfillmentInfo() {
		return this.fulfillmentInfo;
	}

	public void setFulfillmentInfo(FulfillmentInfo fulfillmentInfo) {
		this.fulfillmentInfo = fulfillmentInfo;
	}

	/**
	 * The amount to adjust the order handling fee.
	 */
	protected  Adjustment handlingAdjustment;

	public Adjustment getHandlingAdjustment() {
		return this.handlingAdjustment;
	}

	public void setHandlingAdjustment(Adjustment handlingAdjustment) {
		this.handlingAdjustment = handlingAdjustment;
	}

	/**
	 * The list of historically-applied handling discounts. The active one will have IsExcluded == false
	 */
	protected List<AppliedDiscount> handlingDiscounts;
	public List<AppliedDiscount> getHandlingDiscounts() {
		return this.handlingDiscounts;
	}
	public void setHandlingDiscounts(List<AppliedDiscount> handlingDiscounts) {
		this.handlingDiscounts = handlingDiscounts;
	}

	/**
	 * The list of invalid coupons the shopper attempted to enter for the cart or order. These coupons may no longer be valid or incorrectly entered.
	 */
	protected List<InvalidCoupon> invalidCoupons;
	public List<InvalidCoupon> getInvalidCoupons() {
		return this.invalidCoupons;
	}
	public void setInvalidCoupons(List<InvalidCoupon> invalidCoupons) {
		this.invalidCoupons = invalidCoupons;
	}

	protected List<OrderItem> items;
	public List<OrderItem> getItems() {
		return this.items;
	}
	public void setItems(List<OrderItem> items) {
		this.items = items;
	}

	protected List<OrderNote> notes;
	public List<OrderNote> getNotes() {
		return this.notes;
	}
	public void setNotes(List<OrderNote> notes) {
		this.notes = notes;
	}

	protected List<AppliedDiscount> orderDiscounts;
	public List<AppliedDiscount> getOrderDiscounts() {
		return this.orderDiscounts;
	}
	public void setOrderDiscounts(List<AppliedDiscount> orderDiscounts) {
		this.orderDiscounts = orderDiscounts;
	}

	protected List<Package> packages;
	public List<Package> getPackages() {
		return this.packages;
	}
	public void setPackages(List<Package> packages) {
		this.packages = packages;
	}

	protected List<Payment> payments;
	public List<Payment> getPayments() {
		return this.payments;
	}
	public void setPayments(List<Payment> payments) {
		this.payments = payments;
	}

	protected List<Pickup> pickups;
	public List<Pickup> getPickups() {
		return this.pickups;
	}
	public void setPickups(List<Pickup> pickups) {
		this.pickups = pickups;
	}

	/**
	 * Refunds associated with this order. A refund is a single exchange of money from merchant to customer that either encapsulates a refund to a credit card or an issuance of a store credit. Refunds does not reduce the 'amount collected' on an order and it is possible for refunds to exceed the total order amount.
	 */
	protected List<Refund> refunds;
	public List<Refund> getRefunds() {
		return this.refunds;
	}
	public void setRefunds(List<Refund> refunds) {
		this.refunds = refunds;
	}

	/**
	 * List of discounts that were rejected instead of applied to this order.
	 */
	protected List<SuggestedDiscount> rejectedDiscounts;
	public List<SuggestedDiscount> getRejectedDiscounts() {
		return this.rejectedDiscounts;
	}
	public void setRejectedDiscounts(List<SuggestedDiscount> rejectedDiscounts) {
		this.rejectedDiscounts = rejectedDiscounts;
	}

	protected List<Shipment> shipments;
	public List<Shipment> getShipments() {
		return this.shipments;
	}
	public void setShipments(List<Shipment> shipments) {
		this.shipments = shipments;
	}

	protected  Adjustment shippingAdjustment;

	public Adjustment getShippingAdjustment() {
		return this.shippingAdjustment;
	}

	public void setShippingAdjustment(Adjustment shippingAdjustment) {
		this.shippingAdjustment = shippingAdjustment;
	}

	protected List<ShippingDiscount> shippingDiscounts;
	public List<ShippingDiscount> getShippingDiscounts() {
		return this.shippingDiscounts;
	}
	public void setShippingDiscounts(List<ShippingDiscount> shippingDiscounts) {
		this.shippingDiscounts = shippingDiscounts;
	}

	protected  ShopperNotes shopperNotes;

	public ShopperNotes getShopperNotes() {
		return this.shopperNotes;
	}

	public void setShopperNotes(ShopperNotes shopperNotes) {
		this.shopperNotes = shopperNotes;
	}

	/**
	 * Refers to the BOGA discounts that are currently satisfied but whose free item has not yet been added.
	 */
	protected List<SuggestedDiscount> suggestedDiscounts;
	public List<SuggestedDiscount> getSuggestedDiscounts() {
		return this.suggestedDiscounts;
	}
	public void setSuggestedDiscounts(List<SuggestedDiscount> suggestedDiscounts) {
		this.suggestedDiscounts = suggestedDiscounts;
	}

	/**
	 * Leverage this property within a [tax Arc.js action](https://www.mozu.com/docs/arcjs/commerce-catalog-storefront-tax/commerce-catalog-storefront-tax.htm) to supplement the tax information for this item or object with custom JSON data.
	 */
	protected transient com.fasterxml.jackson.databind.JsonNode taxData;

	public com.fasterxml.jackson.databind.JsonNode getTaxData() {
		return this.taxData;
	}

	public void setTaxData(com.fasterxml.jackson.databind.JsonNode taxData) {
		this.taxData = taxData;
	}

	/**
	 * Response returned by an order validation capability application.
	 */
	protected List<OrderValidationResult> validationResults;
	public List<OrderValidationResult> getValidationResults() {
		return this.validationResults;
	}
	public void setValidationResults(List<OrderValidationResult> validationResults) {
		this.validationResults = validationResults;
	}

	private void writeObject(java.io.ObjectOutputStream out) throws IOException {
		out.defaultWriteObject();
		if(data == null){
			out.writeBoolean(false);
		} else {
			out.writeBoolean(true);
			new com.fasterxml.jackson.databind.ObjectMapper().configure(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET, false).writeValue(out, data);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException {
		in.defaultReadObject();
		if(in.readBoolean()){
			this.data = new com.fasterxml.jackson.databind.ObjectMapper().configure(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE, false).readValue(in, com.fasterxml.jackson.databind.JsonNode.class);
		}
	}

}
