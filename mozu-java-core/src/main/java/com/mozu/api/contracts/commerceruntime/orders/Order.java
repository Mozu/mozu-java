/**
 *     This code was auto-generated by a Codezu.     
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
 */
package com.mozu.api.contracts.commerceruntime.orders;

import java.util.List;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import org.joda.time.DateTime;
import com.mozu.api.contracts.commerceruntime.commerce.Adjustment;
import com.mozu.api.contracts.commerceruntime.orders.OrderAttribute;
import com.mozu.api.contracts.core.AuditInfo;
import com.mozu.api.contracts.commerceruntime.payments.BillingInfo;
import com.mozu.api.contracts.commerceruntime.commerce.ChangeMessage;
import com.mozu.api.contracts.commerceruntime.fulfillment.DigitalPackage;
import com.mozu.api.contracts.commerceruntime.fulfillment.FulfillmentInfo;
import com.mozu.api.contracts.commerceruntime.discounts.AppliedDiscount;
import com.mozu.api.contracts.commerceruntime.discounts.InvalidCoupon;
import com.mozu.api.contracts.commerceruntime.orders.OrderItem;
import com.mozu.api.contracts.commerceruntime.orders.OrderNote;
import com.mozu.api.contracts.commerceruntime.fulfillment.Package;
import com.mozu.api.contracts.commerceruntime.payments.Payment;
import com.mozu.api.contracts.commerceruntime.fulfillment.Pickup;
import com.mozu.api.contracts.commerceruntime.fulfillment.Shipment;
import com.mozu.api.contracts.commerceruntime.discounts.ShippingDiscount;
import com.mozu.api.contracts.commerceruntime.orders.ShopperNotes;
import com.mozu.api.contracts.commerceruntime.orders.OrderValidationResult;

/**
 *	Properties of an order, including its components.
 */
@JsonIgnoreProperties(ignoreUnknown = true)
public class Order implements Serializable
{
	// Default Serial Version UID
	private static final long serialVersionUID = 1L;

	/**
	 * The date and time the order was accepted by the tenant.
	 */
	protected DateTime acceptedDate;

	public DateTime getAcceptedDate() {
		return this.acceptedDate;
	}

	public void setAcceptedDate(DateTime acceptedDate) {
		this.acceptedDate = acceptedDate;
	}

	/**
	 * If true, the customer account associated with the order is opted in to receive marketing materials.
	 */
	protected Boolean acceptsMarketing;

	public Boolean getAcceptsMarketing() {
		return this.acceptsMarketing;
	}

	public void setAcceptsMarketing(Boolean acceptsMarketing) {
		this.acceptsMarketing = acceptsMarketing;
	}

	/**
	 * The amount of the order the shopper can receive in the event of a return. This amount represents the amount captured at the time the order was submitted, not when the order was returned.
	 */
	protected Double amountAvailableForRefund;

	public Double getAmountAvailableForRefund() {
		return this.amountAvailableForRefund;
	}

	public void setAmountAvailableForRefund(Double amountAvailableForRefund) {
		this.amountAvailableForRefund = amountAvailableForRefund;
	}

	/**
	 * The total amount of the order not currently associated with a payment. The shopper must create one or more payments to satisfy this amount before the order can be fully paid.
	 */
	protected Double amountRemainingForPayment;

	public Double getAmountRemainingForPayment() {
		return this.amountRemainingForPayment;
	}

	public void setAmountRemainingForPayment(Double amountRemainingForPayment) {
		this.amountRemainingForPayment = amountRemainingForPayment;
	}

	/**
	 * The available order, payment, and shipment actions a user can perform for the order.
	 */
	protected List<String> availableActions;
	public List<String> getAvailableActions() {
		return this.availableActions;
	}
	public void setAvailableActions(List<String> availableActions) {
		this.availableActions = availableActions;
	}

	/**
	 * Date when the order was cancelled. System-supplied and read-only.
	 */
	protected DateTime cancelledDate;

	public DateTime getCancelledDate() {
		return this.cancelledDate;
	}

	public void setCancelledDate(DateTime cancelledDate) {
		this.cancelledDate = cancelledDate;
	}

	/**
	 * Code that identifies the channel associated with the site where the order was submitted.
	 */
	protected String channelCode;

	public String getChannelCode() {
		return this.channelCode;
	}

	public void setChannelCode(String channelCode) {
		this.channelCode = channelCode;
	}

	/**
	 * Date when the order was closed. Closed order is an order that has been processed and the items shipped. System-supplied and read-only.
	 */
	protected DateTime closedDate;

	public DateTime getClosedDate() {
		return this.closedDate;
	}

	public void setClosedDate(DateTime closedDate) {
		this.closedDate = closedDate;
	}

	/**
	 * Array list of coupon codes associated with an order submitted using an external system. Mozu populates this list during the order import process.
	 */
	protected List<String> couponCodes;
	public List<String> getCouponCodes() {
		return this.couponCodes;
	}
	public void setCouponCodes(List<String> couponCodes) {
		this.couponCodes = couponCodes;
	}

	/**
	 * 3-letter ISO 4217 standard global currency code. Currently, only "USD" (US Dollar) is supported.
	 */
	protected String currencyCode;

	public String getCurrencyCode() {
		return this.currencyCode;
	}

	public void setCurrencyCode(String currencyCode) {
		this.currencyCode = currencyCode;
	}

	/**
	 * Numeric identifer of the customer account.
	 */
	protected Integer customerAccountId;

	public Integer getCustomerAccountId() {
		return this.customerAccountId;
	}

	public void setCustomerAccountId(Integer customerAccountId) {
		this.customerAccountId = customerAccountId;
	}

	/**
	 * The type of interaction the shopper used to submit the order. Possible values are Website, Call, Store, or Unknown.
	 */
	protected String customerInteractionType;

	public String getCustomerInteractionType() {
		return this.customerInteractionType;
	}

	public void setCustomerInteractionType(String customerInteractionType) {
		this.customerInteractionType = customerInteractionType;
	}

	/**
	 * The tax identification number (TIN) of the customer who submitted the order. If the customer who submitted the order has a customer account defined for the tenant, the system sets this value when the order is submitted.
	 */
	protected String customerTaxId;

	public String getCustomerTaxId() {
		return this.customerTaxId;
	}

	public void setCustomerTaxId(String customerTaxId) {
		this.customerTaxId = customerTaxId;
	}

	/**
	 * The aggregate total for all line items in the order, including costs associated with shopper-defined options or extras and any applied discounts.
	 */
	protected Double discountedSubtotal;

	public Double getDiscountedSubtotal() {
		return this.discountedSubtotal;
	}

	public void setDiscountedSubtotal(Double discountedSubtotal) {
		this.discountedSubtotal = discountedSubtotal;
	}

	/**
	 * The subtotal of the order including any applied discount calculations.
	 */
	protected Double discountedTotal;

	public Double getDiscountedTotal() {
		return this.discountedTotal;
	}

	public void setDiscountedTotal(Double discountedTotal) {
		this.discountedTotal = discountedTotal;
	}

	/**
	 * Estimated amount of discounts applied to all items in the order, which is system-supplied and read-only.
	 */
	protected Double discountTotal;

	public Double getDiscountTotal() {
		return this.discountTotal;
	}

	public void setDiscountTotal(Double discountTotal) {
		this.discountTotal = discountTotal;
	}

	/**
	 * The email address of the specified user or the email address associated with the specified entity.
	 */
	protected String email;

	public String getEmail() {
		return this.email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	/**
	 * The date when the order will no longer be active or considered abandoned. For example, if a guest or anonymous shopper has 14 days of inactivity, the order is considered abandoned after that period of inactivity. An order never expires for shoppers who are logged into their account. Date in UTC Date/Time. System-supplied and read-only.
	 */
	protected DateTime expirationDate;

	public DateTime getExpirationDate() {
		return this.expirationDate;
	}

	public void setExpirationDate(DateTime expirationDate) {
		this.expirationDate = expirationDate;
	}

	/**
	 * Unique identifier used by an external program to identify a Mozu order.
	 */
	protected String externalId;

	public String getExternalId() {
		return this.externalId;
	}

	public void setExternalId(String externalId) {
		this.externalId = externalId;
	}

	/**
	 * The monetary sum of all fees incurred in the order.
	 */
	protected Double feeTotal;

	public Double getFeeTotal() {
		return this.feeTotal;
	}

	public void setFeeTotal(Double feeTotal) {
		this.feeTotal = feeTotal;
	}

	/**
	 * The current fulfillment status of the order, which is "Fulfilled," "NotFulfilled," or "PartiallyFulfilled." The order is considered fulfilled when all packages are shipped or all pickups are picked up.
	 */
	protected String fulfillmentStatus;

	public String getFulfillmentStatus() {
		return this.fulfillmentStatus;
	}

	public void setFulfillmentStatus(String fulfillmentStatus) {
		this.fulfillmentStatus = fulfillmentStatus;
	}

	/**
	 * The combined price for all items in the order, including all selected options but excluding any discounts.
	 */
	protected Double handlingAmount;

	public Double getHandlingAmount() {
		return this.handlingAmount;
	}

	public void setHandlingAmount(Double handlingAmount) {
		this.handlingAmount = handlingAmount;
	}

	protected Double handlingSubTotal;

	public Double getHandlingSubTotal() {
		return this.handlingSubTotal;
	}

	public void setHandlingSubTotal(Double handlingSubTotal) {
		this.handlingSubTotal = handlingSubTotal;
	}

	/**
	 * If the handling fee for the order is subject to sales tax, the total tax amount.
	 */
	protected Double handlingTaxTotal;

	public Double getHandlingTaxTotal() {
		return this.handlingTaxTotal;
	}

	public void setHandlingTaxTotal(Double handlingTaxTotal) {
		this.handlingTaxTotal = handlingTaxTotal;
	}

	/**
	 * This total represents the handling amount value with any applied discounts.
	 */
	protected Double handlingTotal;

	public Double getHandlingTotal() {
		return this.handlingTotal;
	}

	public void setHandlingTotal(Double handlingTotal) {
		this.handlingTotal = handlingTotal;
	}

	/**
	 * If true, the order has a draft that may include one or more uncommitted changes to the order or its components.
	 */
	protected Boolean hasDraft;

	public Boolean getHasDraft() {
		return this.hasDraft;
	}

	public void setHasDraft(Boolean hasDraft) {
		this.hasDraft = hasDraft;
	}

	/**
	 * Unique identifier of the order.
	 */
	protected String id;

	public String getId() {
		return this.id;
	}

	public void setId(String id) {
		this.id = id;
	}

	/**
	 * If the order was imported from an external program, the date and time the order was imported into Mozu.
	 */
	protected DateTime importDate;

	public DateTime getImportDate() {
		return this.importDate;
	}

	public void setImportDate(DateTime importDate) {
		this.importDate = importDate;
	}

	/**
	 * The IP address from which the order originated.
	 */
	protected String ipAddress;

	public String getIpAddress() {
		return this.ipAddress;
	}

	public void setIpAddress(String ipAddress) {
		this.ipAddress = ipAddress;
	}

	/**
	 * If true, this version of the order is a draft that might contain uncommitted changes.
	 */
	protected Boolean isDraft;

	public Boolean getIsDraft() {
		return this.isDraft;
	}

	public void setIsDraft(Boolean isDraft) {
		this.isDraft = isDraft;
	}

	/**
	 * If true, the shopper can return any of the items in this order to the tenant.
	 */
	protected Boolean isEligibleForReturns;

	public Boolean getIsEligibleForReturns() {
		return this.isEligibleForReturns;
	}

	public void setIsEligibleForReturns(Boolean isEligibleForReturns) {
		this.isEligibleForReturns = isEligibleForReturns;
	}

	/**
	 * If true, this order was submitted using an external system, and the order record was imported into Mozu.
	 */
	protected Boolean isImport;

	public Boolean getIsImport() {
		return this.isImport;
	}

	public void setIsImport(Boolean isImport) {
		this.isImport = isImport;
	}

	/**
	 * If true, the order is exempt from applied sales tax.
	 */
	protected Boolean isTaxExempt;

	public Boolean getIsTaxExempt() {
		return this.isTaxExempt;
	}

	public void setIsTaxExempt(Boolean isTaxExempt) {
		this.isTaxExempt = isTaxExempt;
	}

	/**
	 * The total amount of tax applied to items in the order.
	 */
	protected Double itemTaxTotal;

	public Double getItemTaxTotal() {
		return this.itemTaxTotal;
	}

	public void setItemTaxTotal(Double itemTaxTotal) {
		this.itemTaxTotal = itemTaxTotal;
	}

	/**
	 * The date when the order was last validated against the product catalog. Date in UTC Date/Time. System-supplied and read-only.
	 */
	protected DateTime lastValidationDate;

	public DateTime getLastValidationDate() {
		return this.lastValidationDate;
	}

	public void setLastValidationDate(DateTime lastValidationDate) {
		this.lastValidationDate = lastValidationDate;
	}

	/**
	 * The unique code that identifies the location where the order was submitted.
	 */
	protected String locationCode;

	public String getLocationCode() {
		return this.locationCode;
	}

	public void setLocationCode(String locationCode) {
		this.locationCode = locationCode;
	}

	/**
	 * The order number that displays on the storefront which differs from the order ID.
	 */
	protected Integer orderNumber;

	public Integer getOrderNumber() {
		return this.orderNumber;
	}

	public void setOrderNumber(Integer orderNumber) {
		this.orderNumber = orderNumber;
	}

	/**
	 * Identifier of the cart prior to the customer proceeding to checkout.
	 */
	protected String originalCartId;

	public String getOriginalCartId() {
		return this.originalCartId;
	}

	public void setOriginalCartId(String originalCartId) {
		this.originalCartId = originalCartId;
	}

	/**
	 * If this order was created to fulfill an item replacement as part of a return merchandise authorization (RMA), the unique identifier of the return.
	 */
	protected String parentReturnId;

	public String getParentReturnId() {
		return this.parentReturnId;
	}

	public void setParentReturnId(String parentReturnId) {
		this.parentReturnId = parentReturnId;
	}

	/**
	 * Status of the payment for the specified order.
	 */
	protected String paymentStatus;

	public String getPaymentStatus() {
		return this.paymentStatus;
	}

	public void setPaymentStatus(String paymentStatus) {
		this.paymentStatus = paymentStatus;
	}

	/**
	 * Status of any returns associated with this order after it was completed.
	 */
	protected String returnStatus;

	public String getReturnStatus() {
		return this.returnStatus;
	}

	public void setReturnStatus(String returnStatus) {
		this.returnStatus = returnStatus;
	}

	/**
	 * The shipping subtotal amount calculated without any applied discounts.
	 */
	protected Double shippingSubTotal;

	public Double getShippingSubTotal() {
		return this.shippingSubTotal;
	}

	public void setShippingSubTotal(Double shippingSubTotal) {
		this.shippingSubTotal = shippingSubTotal;
	}

	/**
	 * The total amount of sales tax incurred for shipping charges on the order.
	 */
	protected Double shippingTaxTotal;

	public Double getShippingTaxTotal() {
		return this.shippingTaxTotal;
	}

	public void setShippingTaxTotal(Double shippingTaxTotal) {
		this.shippingTaxTotal = shippingTaxTotal;
	}

	/**
	 * Amount of the shipping fees for the order.
	 */
	protected Double shippingTotal;

	public Double getShippingTotal() {
		return this.shippingTotal;
	}

	public void setShippingTotal(Double shippingTotal) {
		this.shippingTotal = shippingTotal;
	}

	/**
	 * Unique identifier of the site.
	 */
	protected Integer siteId;

	public Integer getSiteId() {
		return this.siteId;
	}

	public void setSiteId(Integer siteId) {
		this.siteId = siteId;
	}

	/**
	 * The device from which the order originated in the case of offline orders.
	 */
	protected String sourceDevice;

	public String getSourceDevice() {
		return this.sourceDevice;
	}

	public void setSourceDevice(String sourceDevice) {
		this.sourceDevice = sourceDevice;
	}

	/**
	 * The current status of this order. Possible values are "Pending", "Submitted", "Processing", "Pending Review", "Closed", or "Cancelled". System-supplied and read-only.
	 */
	protected String status;

	public String getStatus() {
		return this.status;
	}

	public void setStatus(String status) {
		this.status = status;
	}

	/**
	 * The date and time the order was submitted. System-supplied and read-only.
	 */
	protected DateTime submittedDate;

	public DateTime getSubmittedDate() {
		return this.submittedDate;
	}

	public void setSubmittedDate(DateTime submittedDate) {
		this.submittedDate = submittedDate;
	}

	/**
	 * Amount of the order without sales tax, shipping costs, and other fees.
	 */
	protected Double subtotal;

	public Double getSubtotal() {
		return this.subtotal;
	}

	public void setSubtotal(Double subtotal) {
		this.subtotal = subtotal;
	}

	/**
	 * The total monetary sum of sales tax for the order.
	 */
	protected Double taxTotal;

	public Double getTaxTotal() {
		return this.taxTotal;
	}

	public void setTaxTotal(Double taxTotal) {
		this.taxTotal = taxTotal;
	}

	/**
	 * Unique identifier of the Mozu tenant.
	 */
	protected Integer tenantId;

	public Integer getTenantId() {
		return this.tenantId;
	}

	public void setTenantId(Integer tenantId) {
		this.tenantId = tenantId;
	}

	/**
	 * Amount of the order, including items, sales tax, shipping costs, and other fees.
	 */
	protected Double total;

	public Double getTotal() {
		return this.total;
	}

	public void setTotal(Double total) {
		this.total = total;
	}

	/**
	 * The total amount collected to date for the order.
	 */
	protected Double totalCollected;

	public Double getTotalCollected() {
		return this.totalCollected;
	}

	public void setTotalCollected(Double totalCollected) {
		this.totalCollected = totalCollected;
	}

	/**
	 * This specifies the order type. This means, was this order placed online or offline? Online means shopper created the order at checkout, offline means the order was a phone order.
	 */
	protected String type;

	public String getType() {
		return this.type;
	}

	public void setType(String type) {
		this.type = type;
	}

	/**
	 * The current version number of the order.
	 */
	protected String version;

	public String getVersion() {
		return this.version;
	}

	public void setVersion(String version) {
		this.version = version;
	}

	/**
	 * Unique identifier of the customer visit in which the order was created or last updated.
	 */
	protected String visitId;

	public String getVisitId() {
		return this.visitId;
	}

	public void setVisitId(String visitId) {
		this.visitId = visitId;
	}

	/**
	 * Unique identifier of the web session in which the order was created or last updated.
	 */
	protected String webSessionId;

	public String getWebSessionId() {
		return this.webSessionId;
	}

	public void setWebSessionId(String webSessionId) {
		this.webSessionId = webSessionId;
	}

	/**
	 * Properties of an ad-hoc price adjustment for an order.
	 */
	protected Adjustment adjustment;

	public Adjustment getAdjustment() {
		return this.adjustment;
	}

	public void setAdjustment(Adjustment adjustment) {
		this.adjustment = adjustment;
	}

	/**
	 * Paged list collection of order attributes.
	 */
	protected List<OrderAttribute> attributes;
	public List<OrderAttribute> getAttributes() {
		return this.attributes;
	}
	public void setAttributes(List<OrderAttribute> attributes) {
		this.attributes = attributes;
	}

	/**
	 * Identifier and datetime stamp information recorded when a user or application creates, updates, or deletes a resource entity. This value is system-supplied and read-only.
	 */
	protected AuditInfo auditInfo;

	public AuditInfo getAuditInfo() {
		return this.auditInfo;
	}

	public void setAuditInfo(AuditInfo auditInfo) {
		this.auditInfo = auditInfo;
	}

	/**
	 * Container for the customer billing information associated with an order.
	 */
	protected BillingInfo billingInfo;

	public BillingInfo getBillingInfo() {
		return this.billingInfo;
	}

	public void setBillingInfo(BillingInfo billingInfo) {
		this.billingInfo = billingInfo;
	}

	/**
	 * Paged list of notes entered when the order was modified.
	 */
	protected List<ChangeMessage> changeMessages;
	public List<ChangeMessage> getChangeMessages() {
		return this.changeMessages;
	}
	public void setChangeMessages(List<ChangeMessage> changeMessages) {
		this.changeMessages = changeMessages;
	}

	/**
	 * Specifies the fulfillment of digital packages associated with this order.
	 */
	protected List<DigitalPackage> digitalPackages;
	public List<DigitalPackage> getDigitalPackages() {
		return this.digitalPackages;
	}
	public void setDigitalPackages(List<DigitalPackage> digitalPackages) {
		this.digitalPackages = digitalPackages;
	}

	/**
	 * Properties of the item fulfillment information associated with the order. Shoppers can fulfill order items using in-store pickup or direct shipping.
	 */
	protected FulfillmentInfo fulfillmentInfo;

	public FulfillmentInfo getFulfillmentInfo() {
		return this.fulfillmentInfo;
	}

	public void setFulfillmentInfo(FulfillmentInfo fulfillmentInfo) {
		this.fulfillmentInfo = fulfillmentInfo;
	}

	protected List<AppliedDiscount> handlingDiscounts;
	public List<AppliedDiscount> getHandlingDiscounts() {
		return this.handlingDiscounts;
	}
	public void setHandlingDiscounts(List<AppliedDiscount> handlingDiscounts) {
		this.handlingDiscounts = handlingDiscounts;
	}

	/**
	 * List of invalid coupon codes the shopper entered for the order.
	 */
	protected List<InvalidCoupon> invalidCoupons;
	public List<InvalidCoupon> getInvalidCoupons() {
		return this.invalidCoupons;
	}
	public void setInvalidCoupons(List<InvalidCoupon> invalidCoupons) {
		this.invalidCoupons = invalidCoupons;
	}

	/**
	 * An array list of objects in the returned collection.
	 */
	protected List<OrderItem> items;
	public List<OrderItem> getItems() {
		return this.items;
	}
	public void setItems(List<OrderItem> items) {
		this.items = items;
	}

	/**
	 * Paged list collection of order notes.
	 */
	protected List<OrderNote> notes;
	public List<OrderNote> getNotes() {
		return this.notes;
	}
	public void setNotes(List<OrderNote> notes) {
		this.notes = notes;
	}

	/**
	 * List of order-level discounts that apply to the order.
	 */
	protected List<AppliedDiscount> orderDiscounts;
	public List<AppliedDiscount> getOrderDiscounts() {
		return this.orderDiscounts;
	}
	public void setOrderDiscounts(List<AppliedDiscount> orderDiscounts) {
		this.orderDiscounts = orderDiscounts;
	}

	/**
	 * Array list of physical packages shipped for the specified order.
	 */
	protected List<Package> packages;
	public List<Package> getPackages() {
		return this.packages;
	}
	public void setPackages(List<Package> packages) {
		this.packages = packages;
	}

	/**
	 * Wrapper for a collection of payments associated with this order. An order can include any number of payments.
	 */
	protected List<Payment> payments;
	public List<Payment> getPayments() {
		return this.payments;
	}
	public void setPayments(List<Payment> payments) {
		this.payments = payments;
	}

	/**
	 * Array list of the in-store pickups defined for the order.
	 */
	protected List<Pickup> pickups;
	public List<Pickup> getPickups() {
		return this.pickups;
	}
	public void setPickups(List<Pickup> pickups) {
		this.pickups = pickups;
	}

	/**
	 * Array list of the shipments defined to fulfill items in this order using the direct ship fulfillment method.
	 */
	protected List<Shipment> shipments;
	public List<Shipment> getShipments() {
		return this.shipments;
	}
	public void setShipments(List<Shipment> shipments) {
		this.shipments = shipments;
	}

	/**
	 * Properties of an ad-hoc price adjustment made for an order.
	 */
	protected Adjustment shippingAdjustment;

	public Adjustment getShippingAdjustment() {
		return this.shippingAdjustment;
	}

	public void setShippingAdjustment(Adjustment shippingAdjustment) {
		this.shippingAdjustment = shippingAdjustment;
	}

	/**
	 * List of shipping discounts to apply to the order.
	 */
	protected List<ShippingDiscount> shippingDiscounts;
	public List<ShippingDiscount> getShippingDiscounts() {
		return this.shippingDiscounts;
	}
	public void setShippingDiscounts(List<ShippingDiscount> shippingDiscounts) {
		this.shippingDiscounts = shippingDiscounts;
	}

	/**
	 * A paged list collection of shopper notes for the order.
	 */
	protected ShopperNotes shopperNotes;

	public ShopperNotes getShopperNotes() {
		return this.shopperNotes;
	}

	public void setShopperNotes(ShopperNotes shopperNotes) {
		this.shopperNotes = shopperNotes;
	}

	/**
	 * Response returned by an order validation capability application.
	 */
	protected List<OrderValidationResult> validationResults;
	public List<OrderValidationResult> getValidationResults() {
		return this.validationResults;
	}
	public void setValidationResults(List<OrderValidationResult> validationResults) {
		this.validationResults = validationResults;
	}

}
