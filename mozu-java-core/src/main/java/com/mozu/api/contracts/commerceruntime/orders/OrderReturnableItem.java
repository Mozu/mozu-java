/**
 *     This code was auto-generated by a Codezu.     
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
 */
package com.mozu.api.contracts.commerceruntime.orders;

import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import org.joda.time.DateTime;
import java.io.IOException;
import java.lang.ClassNotFoundException;

/**
 *	Mozu.CommerceRuntime.Contracts.Orders.OrderReturnableItem ApiType DOCUMENT_HERE 
 */
@JsonIgnoreProperties(ignoreUnknown = true)
public class OrderReturnableItem implements Serializable
{
	// Default Serial Version UID
	private static final long serialVersionUID = 1L;

	/**
	 * The fulfillment status of the item, which is one of the following values:* * 
	 */
	protected  String fulfillmentStatus;

	public String getFulfillmentStatus() {
		return this.fulfillmentStatus;
	}

	public void setFulfillmentStatus(String fulfillmentStatus) {
		this.fulfillmentStatus = fulfillmentStatus;
	}

	/**
	 * Unique identifier of the order item associated with a validation message, order, or return.
	 */
	protected  String orderItemId;

	public String getOrderItemId() {
		return this.orderItemId;
	}

	public void setOrderItemId(String orderItemId) {
		this.orderItemId = orderItemId;
	}

	/**
	 * The fully-qualified name of an attribute option on the item if it has an extra. For bundle items, this property is null.
	 */
	protected  String orderItemOptionAttributeFQN;

	public String getOrderItemOptionAttributeFQN() {
		return this.orderItemOptionAttributeFQN;
	}

	public void setOrderItemOptionAttributeFQN(String orderItemOptionAttributeFQN) {
		this.orderItemOptionAttributeFQN = orderItemOptionAttributeFQN;
	}

	/**
	 * The unique identifier of the line number associated with the item.
	 */
	protected  Integer orderLineId;

	public Integer getOrderLineId() {
		return this.orderLineId;
	}

	public void setOrderLineId(Integer orderLineId) {
		this.orderLineId = orderLineId;
	}

	/**
	 * The product code of the parent item, if applicable. For example, a product bundle is the parent of the items in the bundle, and a product is the parent of a product extra.
	 */
	protected  String parentProductCode;

	public String getParentProductCode() {
		return this.parentProductCode;
	}

	public void setParentProductCode(String parentProductCode) {
		this.parentProductCode = parentProductCode;
	}

	/**
	 * The name of the parent item, if applicable. For example, a product bundle is the parent of the items in the bundle, and a product is the parent of a product extra.
	 */
	protected  String parentProductName;

	public String getParentProductName() {
		return this.parentProductName;
	}

	public void setParentProductName(String parentProductName) {
		this.parentProductName = parentProductName;
	}

	/**
	 * The unique, user-defined product code of a product, used throughout  to reference and associate to a product.
	 */
	protected  String productCode;

	public String getProductCode() {
		return this.productCode;
	}

	public void setProductCode(String productCode) {
		this.productCode = productCode;
	}

	/**
	 * The name of the product that represents a line item in a taxable order or product bundle.
	 */
	protected  String productName;

	public String getProductName() {
		return this.productName;
	}

	public void setProductName(String productName) {
		this.productName = productName;
	}

	/**
	 * The quantity that has been fulfilled for the given line item. An item must be fulfilled before it is returnable. If an order contains Product X with a quantity of 3, and the quantity fulfilled is 2, then two Product X items are returnable (assuming all other return conditions are met).
	 */
	protected  Integer quantityFulfilled;

	public Integer getQuantityFulfilled() {
		return this.quantityFulfilled;
	}

	public void setQuantityFulfilled(Integer quantityFulfilled) {
		this.quantityFulfilled = quantityFulfilled;
	}

	/**
	 * The total quantity of an item on the order.
	 */
	protected  Integer quantityOrdered;

	public Integer getQuantityOrdered() {
		return this.quantityOrdered;
	}

	public void setQuantityOrdered(Integer quantityOrdered) {
		this.quantityOrdered = quantityOrdered;
	}

	/**
	 * The quantity of a given item that is eligible for return. This number may be smaller than the quantity ordered, and changes depending on the actions taken on the return. For example, if an order contains five of Product X, but only three of those items are fulfilled, then only three items show as returnable (assuming all other return conditions are met).
	 */
	protected  Integer quantityReturnable;

	public Integer getQuantityReturnable() {
		return this.quantityReturnable;
	}

	public void setQuantityReturnable(Integer quantityReturnable) {
		this.quantityReturnable = quantityReturnable;
	}

	protected  Integer quantityReturned;

	public Integer getQuantityReturned() {
		return this.quantityReturned;
	}

	public void setQuantityReturned(Integer quantityReturned) {
		this.quantityReturned = quantityReturned;
	}

	protected  Integer shipmentItemId;

	public Integer getShipmentItemId() {
		return this.shipmentItemId;
	}

	public void setShipmentItemId(Integer shipmentItemId) {
		this.shipmentItemId = shipmentItemId;
	}

	protected  Integer shipmentNumber;

	public Integer getShipmentNumber() {
		return this.shipmentNumber;
	}

	public void setShipmentNumber(Integer shipmentNumber) {
		this.shipmentNumber = shipmentNumber;
	}

	/**
	 * The number of discrete units that make up an individual item. For example, 1 (ordered quantity) bag of screws may contain a unity quantity of 50 screws.
	 */
	protected  Integer unitQuantity;

	public Integer getUnitQuantity() {
		return this.unitQuantity;
	}

	public void setUnitQuantity(Integer unitQuantity) {
		this.unitQuantity = unitQuantity;
	}


}
