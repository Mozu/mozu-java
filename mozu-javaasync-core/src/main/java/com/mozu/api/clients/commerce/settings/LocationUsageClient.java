/**
 *     This code was auto-generated by a Codezu.     
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
 */
package com.mozu.api.clients.commerce.settings;

import java.util.List;
import java.util.ArrayList;
import com.mozu.api.MozuClient;
import com.mozu.api.MozuClientFactory;
import com.mozu.api.MozuUrl;
import com.mozu.api.Headers;
import org.joda.time.DateTime;
import com.mozu.api.AsyncCallback;
import java.util.concurrent.CountDownLatch;
import com.mozu.api.security.AuthTicket;
import org.apache.commons.lang.StringUtils;

/** <summary>
 * Use the Location Usages resource to define the locations and location types that interact with the specified site. The system creates three default location usage types for each site after provisioning a new tenant - one for direct ship (DS), one for in-store pickup (SP), and one for store finder (storeFinder). Each site can only use a single location for the direct ship location usage type, and the location must support the direct ship fulfillment type (DS). For the in-store pickup location usage type, e
 * </summary>
 */
public class LocationUsageClient {
	
	/**
	 * 
	 * <p><pre><code>
	 * MozuClient<com.mozu.api.contracts.location.LocationUsageCollection> mozuClient=GetLocationUsagesClient();
	 * client.setBaseAddress(url);
	 * client.executeRequest();
	 * LocationUsageCollection locationUsageCollection = client.Result();
	 * </code></pre></p>
	 * @return Mozu.Api.MozuClient <com.mozu.api.contracts.location.LocationUsageCollection>
	 * @see com.mozu.api.contracts.location.LocationUsageCollection
	 */
	public static MozuClient<com.mozu.api.contracts.location.LocationUsageCollection> getLocationUsagesClient() throws Exception
	{
		return getLocationUsagesClient( null);
	}

	/**
	 * 
	 * <p><pre><code>
	 * MozuClient<com.mozu.api.contracts.location.LocationUsageCollection> mozuClient=GetLocationUsagesClient( responseFields);
	 * client.setBaseAddress(url);
	 * client.executeRequest();
	 * LocationUsageCollection locationUsageCollection = client.Result();
	 * </code></pre></p>
	 * @param responseFields Filtering syntax appended to an API call to increase or decrease the amount of data returned inside a JSON object. This parameter should only be used to retrieve data. Attempting to update data using this parameter may cause data loss.
	 * @return Mozu.Api.MozuClient <com.mozu.api.contracts.location.LocationUsageCollection>
	 * @see com.mozu.api.contracts.location.LocationUsageCollection
	 */
	public static MozuClient<com.mozu.api.contracts.location.LocationUsageCollection> getLocationUsagesClient(String responseFields) throws Exception
	{
		MozuUrl url = com.mozu.api.urls.commerce.settings.LocationUsageUrl.getLocationUsagesUrl(responseFields);
		String verb = "GET";
		Class<?> clz = com.mozu.api.contracts.location.LocationUsageCollection.class;
		MozuClient<com.mozu.api.contracts.location.LocationUsageCollection> mozuClient = (MozuClient<com.mozu.api.contracts.location.LocationUsageCollection>) MozuClientFactory.getInstance(clz);
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		return mozuClient;

	}

	/**
	 * 
	 * <p><pre><code>
	 * MozuClient<com.mozu.api.contracts.location.LocationUsage> mozuClient=GetLocationUsageClient( code);
	 * client.setBaseAddress(url);
	 * client.executeRequest();
	 * LocationUsage locationUsage = client.Result();
	 * </code></pre></p>
	 * @param code User-defined code that uniqely identifies the channel group.
	 * @return Mozu.Api.MozuClient <com.mozu.api.contracts.location.LocationUsage>
	 * @see com.mozu.api.contracts.location.LocationUsage
	 */
	public static MozuClient<com.mozu.api.contracts.location.LocationUsage> getLocationUsageClient(String code) throws Exception
	{
		return getLocationUsageClient( code,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 * MozuClient<com.mozu.api.contracts.location.LocationUsage> mozuClient=GetLocationUsageClient( code,  responseFields);
	 * client.setBaseAddress(url);
	 * client.executeRequest();
	 * LocationUsage locationUsage = client.Result();
	 * </code></pre></p>
	 * @param code User-defined code that uniqely identifies the channel group.
	 * @param responseFields Filtering syntax appended to an API call to increase or decrease the amount of data returned inside a JSON object. This parameter should only be used to retrieve data. Attempting to update data using this parameter may cause data loss.
	 * @return Mozu.Api.MozuClient <com.mozu.api.contracts.location.LocationUsage>
	 * @see com.mozu.api.contracts.location.LocationUsage
	 */
	public static MozuClient<com.mozu.api.contracts.location.LocationUsage> getLocationUsageClient(String code, String responseFields) throws Exception
	{
		MozuUrl url = com.mozu.api.urls.commerce.settings.LocationUsageUrl.getLocationUsageUrl(code, responseFields);
		String verb = "GET";
		Class<?> clz = com.mozu.api.contracts.location.LocationUsage.class;
		MozuClient<com.mozu.api.contracts.location.LocationUsage> mozuClient = (MozuClient<com.mozu.api.contracts.location.LocationUsage>) MozuClientFactory.getInstance(clz);
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		return mozuClient;

	}

	/**
	 * 
	 * <p><pre><code>
	 * MozuClient<com.mozu.api.contracts.location.LocationUsage> mozuClient=UpdateLocationUsageClient( usage,  code);
	 * client.setBaseAddress(url);
	 * client.executeRequest();
	 * LocationUsage locationUsage = client.Result();
	 * </code></pre></p>
	 * @param code User-defined code that uniqely identifies the channel group.
	 * @param usage Configuration properties of a location usage type for a specified site. The direct ship location usage type consists of a single location that represents location that supports direct ship (DS) fulfillment. The in-store pickup location usage type consists of a list of location types that represent locations that support in-store pickup (SP) fulfillment. The store finder location usage type consists of a list of location codes, location types, or both.
	 * @return Mozu.Api.MozuClient <com.mozu.api.contracts.location.LocationUsage>
	 * @see com.mozu.api.contracts.location.LocationUsage
	 * @see com.mozu.api.contracts.location.LocationUsage
	 */
	public static MozuClient<com.mozu.api.contracts.location.LocationUsage> updateLocationUsageClient(com.mozu.api.contracts.location.LocationUsage usage, String code) throws Exception
	{
		return updateLocationUsageClient( usage,  code,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 * MozuClient<com.mozu.api.contracts.location.LocationUsage> mozuClient=UpdateLocationUsageClient( usage,  code,  responseFields);
	 * client.setBaseAddress(url);
	 * client.executeRequest();
	 * LocationUsage locationUsage = client.Result();
	 * </code></pre></p>
	 * @param code User-defined code that uniqely identifies the channel group.
	 * @param responseFields Filtering syntax appended to an API call to increase or decrease the amount of data returned inside a JSON object. This parameter should only be used to retrieve data. Attempting to update data using this parameter may cause data loss.
	 * @param usage Configuration properties of a location usage type for a specified site. The direct ship location usage type consists of a single location that represents location that supports direct ship (DS) fulfillment. The in-store pickup location usage type consists of a list of location types that represent locations that support in-store pickup (SP) fulfillment. The store finder location usage type consists of a list of location codes, location types, or both.
	 * @return Mozu.Api.MozuClient <com.mozu.api.contracts.location.LocationUsage>
	 * @see com.mozu.api.contracts.location.LocationUsage
	 * @see com.mozu.api.contracts.location.LocationUsage
	 */
	public static MozuClient<com.mozu.api.contracts.location.LocationUsage> updateLocationUsageClient(com.mozu.api.contracts.location.LocationUsage usage, String code, String responseFields) throws Exception
	{
		MozuUrl url = com.mozu.api.urls.commerce.settings.LocationUsageUrl.updateLocationUsageUrl(code, responseFields);
		String verb = "PUT";
		Class<?> clz = com.mozu.api.contracts.location.LocationUsage.class;
		MozuClient<com.mozu.api.contracts.location.LocationUsage> mozuClient = (MozuClient<com.mozu.api.contracts.location.LocationUsage>) MozuClientFactory.getInstance(clz);
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		mozuClient.setBody(usage);
		return mozuClient;

	}

}



