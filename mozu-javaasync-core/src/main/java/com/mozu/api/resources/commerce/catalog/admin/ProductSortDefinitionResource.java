/**
 *     This code was auto-generated by a Codezu.     
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
 */
package com.mozu.api.resources.commerce.catalog.admin;

import com.mozu.api.ApiContext;
import java.util.List;
import java.util.ArrayList;
import com.mozu.api.MozuClient;
import com.mozu.api.MozuClientFactory;
import com.mozu.api.MozuUrl;
import com.mozu.api.Headers;
import org.joda.time.DateTime;
import com.mozu.api.AsyncCallback;
import java.util.concurrent.CountDownLatch;
import com.mozu.api.security.AuthTicket;
import org.apache.commons.lang.StringUtils;

import com.mozu.api.DataViewMode;
/** <summary>
 * 
 * </summary>
 */
public class ProductSortDefinitionResource {
	///
	/// <see cref="Mozu.Api.ApiContext"/>
	///
	private ApiContext _apiContext;

	private DataViewMode _dataViewMode;

	public ProductSortDefinitionResource(ApiContext apiContext) 
	{
		_apiContext = apiContext;
		_dataViewMode = DataViewMode.Live;
	}

	public ProductSortDefinitionResource(ApiContext apiContext, DataViewMode dataViewMode) 
	{
		_apiContext = apiContext;
		_dataViewMode = dataViewMode;
	}
		
	/**
	 * 
	 * <p><pre><code>
	 *	ProductSortDefinition productsortdefinition = new ProductSortDefinition();
	 *	ProductSortDefinitionPagedCollection productSortDefinitionPagedCollection = productsortdefinition.getProductSortDefinitions();
	 * </code></pre></p>
	 * @return com.mozu.api.contracts.productadmin.ProductSortDefinitionPagedCollection
	 * @see com.mozu.api.contracts.productadmin.ProductSortDefinitionPagedCollection
	 */
	public com.mozu.api.contracts.productadmin.ProductSortDefinitionPagedCollection getProductSortDefinitions() throws Exception
	{
		return getProductSortDefinitions( null,  null,  null,  null,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductSortDefinition productsortdefinition = new ProductSortDefinition();
	 *	CountDownLatch latch = productsortdefinition.getProductSortDefinitions( callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.productadmin.ProductSortDefinitionPagedCollection
	 * @see com.mozu.api.contracts.productadmin.ProductSortDefinitionPagedCollection
	 */
	public CountDownLatch getProductSortDefinitionsAsync( AsyncCallback<com.mozu.api.contracts.productadmin.ProductSortDefinitionPagedCollection> callback) throws Exception
	{
		return getProductSortDefinitionsAsync( null,  null,  null,  null,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductSortDefinition productsortdefinition = new ProductSortDefinition();
	 *	ProductSortDefinitionPagedCollection productSortDefinitionPagedCollection = productsortdefinition.getProductSortDefinitions( startIndex,  pageSize,  sortBy,  filter,  responseFields);
	 * </code></pre></p>
	 * @param filter 
	 * @param pageSize 
	 * @param responseFields 
	 * @param sortBy 
	 * @param startIndex 
	 * @return com.mozu.api.contracts.productadmin.ProductSortDefinitionPagedCollection
	 * @see com.mozu.api.contracts.productadmin.ProductSortDefinitionPagedCollection
	 */
	public com.mozu.api.contracts.productadmin.ProductSortDefinitionPagedCollection getProductSortDefinitions(Integer startIndex, Integer pageSize, String sortBy, String filter, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.ProductSortDefinitionPagedCollection> client = com.mozu.api.clients.commerce.catalog.admin.ProductSortDefinitionClient.getProductSortDefinitionsClient(_dataViewMode,  startIndex,  pageSize,  sortBy,  filter,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductSortDefinition productsortdefinition = new ProductSortDefinition();
	 *	CountDownLatch latch = productsortdefinition.getProductSortDefinitions( startIndex,  pageSize,  sortBy,  filter,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param filter 
	 * @param pageSize 
	 * @param responseFields 
	 * @param sortBy 
	 * @param startIndex 
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.productadmin.ProductSortDefinitionPagedCollection
	 * @see com.mozu.api.contracts.productadmin.ProductSortDefinitionPagedCollection
	 */
	public CountDownLatch getProductSortDefinitionsAsync(Integer startIndex, Integer pageSize, String sortBy, String filter, String responseFields, AsyncCallback<com.mozu.api.contracts.productadmin.ProductSortDefinitionPagedCollection> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.ProductSortDefinitionPagedCollection> client = com.mozu.api.clients.commerce.catalog.admin.ProductSortDefinitionClient.getProductSortDefinitionsClient(_dataViewMode,  startIndex,  pageSize,  sortBy,  filter,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductSortDefinition productsortdefinition = new ProductSortDefinition();
	 *	ProductSortDefinition productSortDefinition = productsortdefinition.getProductSortDefinition( productSortDefinitionId);
	 * </code></pre></p>
	 * @param productSortDefinitionId 
	 * @return com.mozu.api.contracts.productadmin.ProductSortDefinition
	 * @see com.mozu.api.contracts.productadmin.ProductSortDefinition
	 */
	public com.mozu.api.contracts.productadmin.ProductSortDefinition getProductSortDefinition(Integer productSortDefinitionId) throws Exception
	{
		return getProductSortDefinition( productSortDefinitionId,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductSortDefinition productsortdefinition = new ProductSortDefinition();
	 *	CountDownLatch latch = productsortdefinition.getProductSortDefinition( productSortDefinitionId, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param productSortDefinitionId 
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.productadmin.ProductSortDefinition
	 * @see com.mozu.api.contracts.productadmin.ProductSortDefinition
	 */
	public CountDownLatch getProductSortDefinitionAsync(Integer productSortDefinitionId, AsyncCallback<com.mozu.api.contracts.productadmin.ProductSortDefinition> callback) throws Exception
	{
		return getProductSortDefinitionAsync( productSortDefinitionId,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductSortDefinition productsortdefinition = new ProductSortDefinition();
	 *	ProductSortDefinition productSortDefinition = productsortdefinition.getProductSortDefinition( productSortDefinitionId,  responseFields);
	 * </code></pre></p>
	 * @param productSortDefinitionId 
	 * @param responseFields 
	 * @return com.mozu.api.contracts.productadmin.ProductSortDefinition
	 * @see com.mozu.api.contracts.productadmin.ProductSortDefinition
	 */
	public com.mozu.api.contracts.productadmin.ProductSortDefinition getProductSortDefinition(Integer productSortDefinitionId, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.ProductSortDefinition> client = com.mozu.api.clients.commerce.catalog.admin.ProductSortDefinitionClient.getProductSortDefinitionClient(_dataViewMode,  productSortDefinitionId,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductSortDefinition productsortdefinition = new ProductSortDefinition();
	 *	CountDownLatch latch = productsortdefinition.getProductSortDefinition( productSortDefinitionId,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param productSortDefinitionId 
	 * @param responseFields 
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.productadmin.ProductSortDefinition
	 * @see com.mozu.api.contracts.productadmin.ProductSortDefinition
	 */
	public CountDownLatch getProductSortDefinitionAsync(Integer productSortDefinitionId, String responseFields, AsyncCallback<com.mozu.api.contracts.productadmin.ProductSortDefinition> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.ProductSortDefinition> client = com.mozu.api.clients.commerce.catalog.admin.ProductSortDefinitionClient.getProductSortDefinitionClient(_dataViewMode,  productSortDefinitionId,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductSortDefinition productsortdefinition = new ProductSortDefinition();
	 *	ProductSortDefinition productSortDefinition = productsortdefinition.addProductSortDefinition( definition);
	 * </code></pre></p>
	 * @param definition 
	 * @return com.mozu.api.contracts.productadmin.ProductSortDefinition
	 * @see com.mozu.api.contracts.productadmin.ProductSortDefinition
	 * @see com.mozu.api.contracts.productadmin.ProductSortDefinition
	 */
	public com.mozu.api.contracts.productadmin.ProductSortDefinition addProductSortDefinition(com.mozu.api.contracts.productadmin.ProductSortDefinition definition) throws Exception
	{
		return addProductSortDefinition( definition,  null,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductSortDefinition productsortdefinition = new ProductSortDefinition();
	 *	CountDownLatch latch = productsortdefinition.addProductSortDefinition( definition, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param  callback callback handler for asynchronous operations
	 * @param definition 
	 * @return com.mozu.api.contracts.productadmin.ProductSortDefinition
	 * @see com.mozu.api.contracts.productadmin.ProductSortDefinition
	 * @see com.mozu.api.contracts.productadmin.ProductSortDefinition
	 */
	public CountDownLatch addProductSortDefinitionAsync(com.mozu.api.contracts.productadmin.ProductSortDefinition definition, AsyncCallback<com.mozu.api.contracts.productadmin.ProductSortDefinition> callback) throws Exception
	{
		return addProductSortDefinitionAsync( definition,  null,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductSortDefinition productsortdefinition = new ProductSortDefinition();
	 *	ProductSortDefinition productSortDefinition = productsortdefinition.addProductSortDefinition( definition,  useProvidedId,  responseFields);
	 * </code></pre></p>
	 * @param responseFields 
	 * @param useProvidedId 
	 * @param definition 
	 * @return com.mozu.api.contracts.productadmin.ProductSortDefinition
	 * @see com.mozu.api.contracts.productadmin.ProductSortDefinition
	 * @see com.mozu.api.contracts.productadmin.ProductSortDefinition
	 */
	public com.mozu.api.contracts.productadmin.ProductSortDefinition addProductSortDefinition(com.mozu.api.contracts.productadmin.ProductSortDefinition definition, Boolean useProvidedId, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.ProductSortDefinition> client = com.mozu.api.clients.commerce.catalog.admin.ProductSortDefinitionClient.addProductSortDefinitionClient(_dataViewMode,  definition,  useProvidedId,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductSortDefinition productsortdefinition = new ProductSortDefinition();
	 *	CountDownLatch latch = productsortdefinition.addProductSortDefinition( definition,  useProvidedId,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param responseFields 
	 * @param useProvidedId 
	 * @param  callback callback handler for asynchronous operations
	 * @param definition 
	 * @return com.mozu.api.contracts.productadmin.ProductSortDefinition
	 * @see com.mozu.api.contracts.productadmin.ProductSortDefinition
	 * @see com.mozu.api.contracts.productadmin.ProductSortDefinition
	 */
	public CountDownLatch addProductSortDefinitionAsync(com.mozu.api.contracts.productadmin.ProductSortDefinition definition, Boolean useProvidedId, String responseFields, AsyncCallback<com.mozu.api.contracts.productadmin.ProductSortDefinition> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.ProductSortDefinition> client = com.mozu.api.clients.commerce.catalog.admin.ProductSortDefinitionClient.addProductSortDefinitionClient(_dataViewMode,  definition,  useProvidedId,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductSortDefinition productsortdefinition = new ProductSortDefinition();
	 *	ProductSortDefinition productSortDefinition = productsortdefinition.updateProductSortDefinition( definition,  productSortDefinitionId);
	 * </code></pre></p>
	 * @param productSortDefinitionId 
	 * @param definition 
	 * @return com.mozu.api.contracts.productadmin.ProductSortDefinition
	 * @see com.mozu.api.contracts.productadmin.ProductSortDefinition
	 * @see com.mozu.api.contracts.productadmin.ProductSortDefinition
	 */
	public com.mozu.api.contracts.productadmin.ProductSortDefinition updateProductSortDefinition(com.mozu.api.contracts.productadmin.ProductSortDefinition definition, Integer productSortDefinitionId) throws Exception
	{
		return updateProductSortDefinition( definition,  productSortDefinitionId,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductSortDefinition productsortdefinition = new ProductSortDefinition();
	 *	CountDownLatch latch = productsortdefinition.updateProductSortDefinition( definition,  productSortDefinitionId, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param productSortDefinitionId 
	 * @param  callback callback handler for asynchronous operations
	 * @param definition 
	 * @return com.mozu.api.contracts.productadmin.ProductSortDefinition
	 * @see com.mozu.api.contracts.productadmin.ProductSortDefinition
	 * @see com.mozu.api.contracts.productadmin.ProductSortDefinition
	 */
	public CountDownLatch updateProductSortDefinitionAsync(com.mozu.api.contracts.productadmin.ProductSortDefinition definition, Integer productSortDefinitionId, AsyncCallback<com.mozu.api.contracts.productadmin.ProductSortDefinition> callback) throws Exception
	{
		return updateProductSortDefinitionAsync( definition,  productSortDefinitionId,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductSortDefinition productsortdefinition = new ProductSortDefinition();
	 *	ProductSortDefinition productSortDefinition = productsortdefinition.updateProductSortDefinition( definition,  productSortDefinitionId,  responseFields);
	 * </code></pre></p>
	 * @param productSortDefinitionId 
	 * @param responseFields 
	 * @param definition 
	 * @return com.mozu.api.contracts.productadmin.ProductSortDefinition
	 * @see com.mozu.api.contracts.productadmin.ProductSortDefinition
	 * @see com.mozu.api.contracts.productadmin.ProductSortDefinition
	 */
	public com.mozu.api.contracts.productadmin.ProductSortDefinition updateProductSortDefinition(com.mozu.api.contracts.productadmin.ProductSortDefinition definition, Integer productSortDefinitionId, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.ProductSortDefinition> client = com.mozu.api.clients.commerce.catalog.admin.ProductSortDefinitionClient.updateProductSortDefinitionClient(_dataViewMode,  definition,  productSortDefinitionId,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductSortDefinition productsortdefinition = new ProductSortDefinition();
	 *	CountDownLatch latch = productsortdefinition.updateProductSortDefinition( definition,  productSortDefinitionId,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param productSortDefinitionId 
	 * @param responseFields 
	 * @param  callback callback handler for asynchronous operations
	 * @param definition 
	 * @return com.mozu.api.contracts.productadmin.ProductSortDefinition
	 * @see com.mozu.api.contracts.productadmin.ProductSortDefinition
	 * @see com.mozu.api.contracts.productadmin.ProductSortDefinition
	 */
	public CountDownLatch updateProductSortDefinitionAsync(com.mozu.api.contracts.productadmin.ProductSortDefinition definition, Integer productSortDefinitionId, String responseFields, AsyncCallback<com.mozu.api.contracts.productadmin.ProductSortDefinition> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.ProductSortDefinition> client = com.mozu.api.clients.commerce.catalog.admin.ProductSortDefinitionClient.updateProductSortDefinitionClient(_dataViewMode,  definition,  productSortDefinitionId,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductSortDefinition productsortdefinition = new ProductSortDefinition();
	 *	productsortdefinition.deleteProductSortDefinition( productSortDefinitionId);
	 * </code></pre></p>
	 * @param productSortDefinitionId 
	 * @return 
	 */
	public void deleteProductSortDefinition(Integer productSortDefinitionId) throws Exception
	{
		MozuClient client = com.mozu.api.clients.commerce.catalog.admin.ProductSortDefinitionClient.deleteProductSortDefinitionClient(_dataViewMode,  productSortDefinitionId);
		client.setContext(_apiContext);
		client.executeRequest();
		client.cleanupHttpConnection();

	}

}



