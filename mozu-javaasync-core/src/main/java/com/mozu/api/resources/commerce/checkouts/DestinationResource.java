/**
 *     This code was auto-generated by a Codezu.     
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
 */
package com.mozu.api.resources.commerce.checkouts;

import com.mozu.api.ApiContext;
import java.util.List;
import java.util.ArrayList;
import com.mozu.api.MozuClient;
import com.mozu.api.MozuClientFactory;
import com.mozu.api.MozuUrl;
import com.mozu.api.Headers;
import org.joda.time.DateTime;
import com.mozu.api.AsyncCallback;
import java.util.concurrent.CountDownLatch;
import com.mozu.api.security.AuthTicket;
import org.apache.commons.lang.StringUtils;

/** <summary>
 * 
 * </summary>
 */
public class DestinationResource {
	///
	/// <see cref="Mozu.Api.ApiContext"/>
	///
	private ApiContext _apiContext;


	public DestinationResource(ApiContext apiContext) 
	{
		_apiContext = apiContext;
	}

	
	/**
	 * 
	 * <p><pre><code>
	 *	Destination destination = new Destination();
	 *	Destination destination = destination.getDestinations( checkoutId);
	 * </code></pre></p>
	 * @param checkoutId 
	 * @return List<com.mozu.api.contracts.commerceruntime.fulfillment.Destination>
	 * @see com.mozu.api.contracts.commerceruntime.fulfillment.Destination
	 */
	public List<com.mozu.api.contracts.commerceruntime.fulfillment.Destination> getDestinations(String checkoutId) throws Exception
	{
		MozuClient<List<com.mozu.api.contracts.commerceruntime.fulfillment.Destination>> client = com.mozu.api.clients.commerce.checkouts.DestinationClient.getDestinationsClient( checkoutId);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Destination destination = new Destination();
	 *	CountDownLatch latch = destination.getDestinations( checkoutId, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param checkoutId 
	 * @param  callback callback handler for asynchronous operations
	 * @return List<com.mozu.api.contracts.commerceruntime.fulfillment.Destination>
	 * @see com.mozu.api.contracts.commerceruntime.fulfillment.Destination
	 */
	public CountDownLatch getDestinationsAsync(String checkoutId, AsyncCallback<List<com.mozu.api.contracts.commerceruntime.fulfillment.Destination>> callback) throws Exception
	{
		MozuClient<List<com.mozu.api.contracts.commerceruntime.fulfillment.Destination>> client = com.mozu.api.clients.commerce.checkouts.DestinationClient.getDestinationsClient( checkoutId);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Destination destination = new Destination();
	 *	Destination destination = destination.getDestination( checkoutId,  destinationId);
	 * </code></pre></p>
	 * @param checkoutId 
	 * @param destinationId 
	 * @return com.mozu.api.contracts.commerceruntime.fulfillment.Destination
	 * @see com.mozu.api.contracts.commerceruntime.fulfillment.Destination
	 */
	public com.mozu.api.contracts.commerceruntime.fulfillment.Destination getDestination(String checkoutId, String destinationId) throws Exception
	{
		return getDestination( checkoutId,  destinationId,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	Destination destination = new Destination();
	 *	CountDownLatch latch = destination.getDestination( checkoutId,  destinationId, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param checkoutId 
	 * @param destinationId 
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.commerceruntime.fulfillment.Destination
	 * @see com.mozu.api.contracts.commerceruntime.fulfillment.Destination
	 */
	public CountDownLatch getDestinationAsync(String checkoutId, String destinationId, AsyncCallback<com.mozu.api.contracts.commerceruntime.fulfillment.Destination> callback) throws Exception
	{
		return getDestinationAsync( checkoutId,  destinationId,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	Destination destination = new Destination();
	 *	Destination destination = destination.getDestination( checkoutId,  destinationId,  responseFields);
	 * </code></pre></p>
	 * @param checkoutId 
	 * @param destinationId 
	 * @param responseFields 
	 * @return com.mozu.api.contracts.commerceruntime.fulfillment.Destination
	 * @see com.mozu.api.contracts.commerceruntime.fulfillment.Destination
	 */
	public com.mozu.api.contracts.commerceruntime.fulfillment.Destination getDestination(String checkoutId, String destinationId, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.fulfillment.Destination> client = com.mozu.api.clients.commerce.checkouts.DestinationClient.getDestinationClient( checkoutId,  destinationId,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Destination destination = new Destination();
	 *	CountDownLatch latch = destination.getDestination( checkoutId,  destinationId,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param checkoutId 
	 * @param destinationId 
	 * @param responseFields 
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.commerceruntime.fulfillment.Destination
	 * @see com.mozu.api.contracts.commerceruntime.fulfillment.Destination
	 */
	public CountDownLatch getDestinationAsync(String checkoutId, String destinationId, String responseFields, AsyncCallback<com.mozu.api.contracts.commerceruntime.fulfillment.Destination> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.fulfillment.Destination> client = com.mozu.api.clients.commerce.checkouts.DestinationClient.getDestinationClient( checkoutId,  destinationId,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Destination destination = new Destination();
	 *	Destination destination = destination.addDestination( destination,  checkoutId);
	 * </code></pre></p>
	 * @param checkoutId 
	 * @param destination 
	 * @return com.mozu.api.contracts.commerceruntime.fulfillment.Destination
	 * @see com.mozu.api.contracts.commerceruntime.fulfillment.Destination
	 * @see com.mozu.api.contracts.commerceruntime.fulfillment.Destination
	 */
	public com.mozu.api.contracts.commerceruntime.fulfillment.Destination addDestination(com.mozu.api.contracts.commerceruntime.fulfillment.Destination destination, String checkoutId) throws Exception
	{
		return addDestination( destination,  checkoutId,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	Destination destination = new Destination();
	 *	CountDownLatch latch = destination.addDestination( destination,  checkoutId, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param checkoutId 
	 * @param  callback callback handler for asynchronous operations
	 * @param destination 
	 * @return com.mozu.api.contracts.commerceruntime.fulfillment.Destination
	 * @see com.mozu.api.contracts.commerceruntime.fulfillment.Destination
	 * @see com.mozu.api.contracts.commerceruntime.fulfillment.Destination
	 */
	public CountDownLatch addDestinationAsync(com.mozu.api.contracts.commerceruntime.fulfillment.Destination destination, String checkoutId, AsyncCallback<com.mozu.api.contracts.commerceruntime.fulfillment.Destination> callback) throws Exception
	{
		return addDestinationAsync( destination,  checkoutId,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	Destination destination = new Destination();
	 *	Destination destination = destination.addDestination( destination,  checkoutId,  responseFields);
	 * </code></pre></p>
	 * @param checkoutId 
	 * @param responseFields 
	 * @param destination 
	 * @return com.mozu.api.contracts.commerceruntime.fulfillment.Destination
	 * @see com.mozu.api.contracts.commerceruntime.fulfillment.Destination
	 * @see com.mozu.api.contracts.commerceruntime.fulfillment.Destination
	 */
	public com.mozu.api.contracts.commerceruntime.fulfillment.Destination addDestination(com.mozu.api.contracts.commerceruntime.fulfillment.Destination destination, String checkoutId, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.fulfillment.Destination> client = com.mozu.api.clients.commerce.checkouts.DestinationClient.addDestinationClient( destination,  checkoutId,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Destination destination = new Destination();
	 *	CountDownLatch latch = destination.addDestination( destination,  checkoutId,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param checkoutId 
	 * @param responseFields 
	 * @param  callback callback handler for asynchronous operations
	 * @param destination 
	 * @return com.mozu.api.contracts.commerceruntime.fulfillment.Destination
	 * @see com.mozu.api.contracts.commerceruntime.fulfillment.Destination
	 * @see com.mozu.api.contracts.commerceruntime.fulfillment.Destination
	 */
	public CountDownLatch addDestinationAsync(com.mozu.api.contracts.commerceruntime.fulfillment.Destination destination, String checkoutId, String responseFields, AsyncCallback<com.mozu.api.contracts.commerceruntime.fulfillment.Destination> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.fulfillment.Destination> client = com.mozu.api.clients.commerce.checkouts.DestinationClient.addDestinationClient( destination,  checkoutId,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Destination destination = new Destination();
	 *	Destination destination = destination.updateDestination( destination,  checkoutId,  destinationId);
	 * </code></pre></p>
	 * @param checkoutId 
	 * @param destinationId 
	 * @param destination 
	 * @return com.mozu.api.contracts.commerceruntime.fulfillment.Destination
	 * @see com.mozu.api.contracts.commerceruntime.fulfillment.Destination
	 * @see com.mozu.api.contracts.commerceruntime.fulfillment.Destination
	 */
	public com.mozu.api.contracts.commerceruntime.fulfillment.Destination updateDestination(com.mozu.api.contracts.commerceruntime.fulfillment.Destination destination, String checkoutId, String destinationId) throws Exception
	{
		return updateDestination( destination,  checkoutId,  destinationId,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	Destination destination = new Destination();
	 *	CountDownLatch latch = destination.updateDestination( destination,  checkoutId,  destinationId, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param checkoutId 
	 * @param destinationId 
	 * @param  callback callback handler for asynchronous operations
	 * @param destination 
	 * @return com.mozu.api.contracts.commerceruntime.fulfillment.Destination
	 * @see com.mozu.api.contracts.commerceruntime.fulfillment.Destination
	 * @see com.mozu.api.contracts.commerceruntime.fulfillment.Destination
	 */
	public CountDownLatch updateDestinationAsync(com.mozu.api.contracts.commerceruntime.fulfillment.Destination destination, String checkoutId, String destinationId, AsyncCallback<com.mozu.api.contracts.commerceruntime.fulfillment.Destination> callback) throws Exception
	{
		return updateDestinationAsync( destination,  checkoutId,  destinationId,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	Destination destination = new Destination();
	 *	Destination destination = destination.updateDestination( destination,  checkoutId,  destinationId,  responseFields);
	 * </code></pre></p>
	 * @param checkoutId 
	 * @param destinationId 
	 * @param responseFields 
	 * @param destination 
	 * @return com.mozu.api.contracts.commerceruntime.fulfillment.Destination
	 * @see com.mozu.api.contracts.commerceruntime.fulfillment.Destination
	 * @see com.mozu.api.contracts.commerceruntime.fulfillment.Destination
	 */
	public com.mozu.api.contracts.commerceruntime.fulfillment.Destination updateDestination(com.mozu.api.contracts.commerceruntime.fulfillment.Destination destination, String checkoutId, String destinationId, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.fulfillment.Destination> client = com.mozu.api.clients.commerce.checkouts.DestinationClient.updateDestinationClient( destination,  checkoutId,  destinationId,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Destination destination = new Destination();
	 *	CountDownLatch latch = destination.updateDestination( destination,  checkoutId,  destinationId,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param checkoutId 
	 * @param destinationId 
	 * @param responseFields 
	 * @param  callback callback handler for asynchronous operations
	 * @param destination 
	 * @return com.mozu.api.contracts.commerceruntime.fulfillment.Destination
	 * @see com.mozu.api.contracts.commerceruntime.fulfillment.Destination
	 * @see com.mozu.api.contracts.commerceruntime.fulfillment.Destination
	 */
	public CountDownLatch updateDestinationAsync(com.mozu.api.contracts.commerceruntime.fulfillment.Destination destination, String checkoutId, String destinationId, String responseFields, AsyncCallback<com.mozu.api.contracts.commerceruntime.fulfillment.Destination> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.fulfillment.Destination> client = com.mozu.api.clients.commerce.checkouts.DestinationClient.updateDestinationClient( destination,  checkoutId,  destinationId,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Destination destination = new Destination();
	 *	destination.removeDestination( checkoutId,  destinationId);
	 * </code></pre></p>
	 * @param checkoutId 
	 * @param destinationId 
	 * @return 
	 */
	public void removeDestination(String checkoutId, String destinationId) throws Exception
	{
		MozuClient client = com.mozu.api.clients.commerce.checkouts.DestinationClient.removeDestinationClient( checkoutId,  destinationId);
		client.setContext(_apiContext);
		client.executeRequest();
		client.cleanupHttpConnection();

	}

}



