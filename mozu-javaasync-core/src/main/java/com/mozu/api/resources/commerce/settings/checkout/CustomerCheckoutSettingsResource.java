/**
 *     This code was auto-generated by a Codezu.     
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
 */
package com.mozu.api.resources.commerce.settings.checkout;

import com.mozu.api.ApiContext;
import java.util.List;
import java.util.ArrayList;
import com.mozu.api.MozuClient;
import com.mozu.api.MozuClientFactory;
import com.mozu.api.MozuUrl;
import com.mozu.api.Headers;
import org.joda.time.DateTime;
import com.mozu.api.AsyncCallback;
import java.util.concurrent.CountDownLatch;
import com.mozu.api.security.AuthTicket;
import org.apache.commons.lang.StringUtils;

/** <summary>
 * Use the Customer Checkout Settings resource to define login settings that apply when shoppers proceed to checkout.
 * </summary>
 */
public class CustomerCheckoutSettingsResource {
	///
	/// <see cref="Mozu.Api.ApiContext"/>
	///
	private ApiContext _apiContext;


	public CustomerCheckoutSettingsResource(ApiContext apiContext) 
	{
		_apiContext = apiContext;
	}

	
	/**
	 * 
	 * <p><pre><code>
	 *	CustomerCheckoutSettings customercheckoutsettings = new CustomerCheckoutSettings();
	 *	CustomerCheckoutSettings customerCheckoutSettings = customercheckoutsettings.getCustomerCheckoutSettings();
	 * </code></pre></p>
	 * @return com.mozu.api.contracts.sitesettings.order.CustomerCheckoutSettings
	 * @see com.mozu.api.contracts.sitesettings.order.CustomerCheckoutSettings
	 */
	public com.mozu.api.contracts.sitesettings.order.CustomerCheckoutSettings getCustomerCheckoutSettings() throws Exception
	{
		return getCustomerCheckoutSettings( null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	CustomerCheckoutSettings customercheckoutsettings = new CustomerCheckoutSettings();
	 *	CountDownLatch latch = customercheckoutsettings.getCustomerCheckoutSettings( callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.sitesettings.order.CustomerCheckoutSettings
	 * @see com.mozu.api.contracts.sitesettings.order.CustomerCheckoutSettings
	 */
	public CountDownLatch getCustomerCheckoutSettingsAsync( AsyncCallback<com.mozu.api.contracts.sitesettings.order.CustomerCheckoutSettings> callback) throws Exception
	{
		return getCustomerCheckoutSettingsAsync( null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	CustomerCheckoutSettings customercheckoutsettings = new CustomerCheckoutSettings();
	 *	CustomerCheckoutSettings customerCheckoutSettings = customercheckoutsettings.getCustomerCheckoutSettings( responseFields);
	 * </code></pre></p>
	 * @param responseFields 
	 * @return com.mozu.api.contracts.sitesettings.order.CustomerCheckoutSettings
	 * @see com.mozu.api.contracts.sitesettings.order.CustomerCheckoutSettings
	 */
	public com.mozu.api.contracts.sitesettings.order.CustomerCheckoutSettings getCustomerCheckoutSettings(String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.sitesettings.order.CustomerCheckoutSettings> client = com.mozu.api.clients.commerce.settings.checkout.CustomerCheckoutSettingsClient.getCustomerCheckoutSettingsClient( responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CustomerCheckoutSettings customercheckoutsettings = new CustomerCheckoutSettings();
	 *	CountDownLatch latch = customercheckoutsettings.getCustomerCheckoutSettings( responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param responseFields 
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.sitesettings.order.CustomerCheckoutSettings
	 * @see com.mozu.api.contracts.sitesettings.order.CustomerCheckoutSettings
	 */
	public CountDownLatch getCustomerCheckoutSettingsAsync(String responseFields, AsyncCallback<com.mozu.api.contracts.sitesettings.order.CustomerCheckoutSettings> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.sitesettings.order.CustomerCheckoutSettings> client = com.mozu.api.clients.commerce.settings.checkout.CustomerCheckoutSettingsClient.getCustomerCheckoutSettingsClient( responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CustomerCheckoutSettings customercheckoutsettings = new CustomerCheckoutSettings();
	 *	CustomerCheckoutSettings customerCheckoutSettings = customercheckoutsettings.updateCustomerCheckoutSettings( customerCheckoutSettings);
	 * </code></pre></p>
	 * @param customerCheckoutSettings All the properties to update in the checkout settings.
	 * @return com.mozu.api.contracts.sitesettings.order.CustomerCheckoutSettings
	 * @see com.mozu.api.contracts.sitesettings.order.CustomerCheckoutSettings
	 * @see com.mozu.api.contracts.sitesettings.order.CustomerCheckoutSettings
	 */
	public com.mozu.api.contracts.sitesettings.order.CustomerCheckoutSettings updateCustomerCheckoutSettings(com.mozu.api.contracts.sitesettings.order.CustomerCheckoutSettings customerCheckoutSettings) throws Exception
	{
		return updateCustomerCheckoutSettings( customerCheckoutSettings,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	CustomerCheckoutSettings customercheckoutsettings = new CustomerCheckoutSettings();
	 *	CountDownLatch latch = customercheckoutsettings.updateCustomerCheckoutSettings( customerCheckoutSettings, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param  callback callback handler for asynchronous operations
	 * @param customerCheckoutSettings All the properties to update in the checkout settings.
	 * @return com.mozu.api.contracts.sitesettings.order.CustomerCheckoutSettings
	 * @see com.mozu.api.contracts.sitesettings.order.CustomerCheckoutSettings
	 * @see com.mozu.api.contracts.sitesettings.order.CustomerCheckoutSettings
	 */
	public CountDownLatch updateCustomerCheckoutSettingsAsync(com.mozu.api.contracts.sitesettings.order.CustomerCheckoutSettings customerCheckoutSettings, AsyncCallback<com.mozu.api.contracts.sitesettings.order.CustomerCheckoutSettings> callback) throws Exception
	{
		return updateCustomerCheckoutSettingsAsync( customerCheckoutSettings,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	CustomerCheckoutSettings customercheckoutsettings = new CustomerCheckoutSettings();
	 *	CustomerCheckoutSettings customerCheckoutSettings = customercheckoutsettings.updateCustomerCheckoutSettings( customerCheckoutSettings,  responseFields);
	 * </code></pre></p>
	 * @param responseFields 
	 * @param customerCheckoutSettings All the properties to update in the checkout settings.
	 * @return com.mozu.api.contracts.sitesettings.order.CustomerCheckoutSettings
	 * @see com.mozu.api.contracts.sitesettings.order.CustomerCheckoutSettings
	 * @see com.mozu.api.contracts.sitesettings.order.CustomerCheckoutSettings
	 */
	public com.mozu.api.contracts.sitesettings.order.CustomerCheckoutSettings updateCustomerCheckoutSettings(com.mozu.api.contracts.sitesettings.order.CustomerCheckoutSettings customerCheckoutSettings, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.sitesettings.order.CustomerCheckoutSettings> client = com.mozu.api.clients.commerce.settings.checkout.CustomerCheckoutSettingsClient.updateCustomerCheckoutSettingsClient( customerCheckoutSettings,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CustomerCheckoutSettings customercheckoutsettings = new CustomerCheckoutSettings();
	 *	CountDownLatch latch = customercheckoutsettings.updateCustomerCheckoutSettings( customerCheckoutSettings,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param responseFields 
	 * @param  callback callback handler for asynchronous operations
	 * @param customerCheckoutSettings All the properties to update in the checkout settings.
	 * @return com.mozu.api.contracts.sitesettings.order.CustomerCheckoutSettings
	 * @see com.mozu.api.contracts.sitesettings.order.CustomerCheckoutSettings
	 * @see com.mozu.api.contracts.sitesettings.order.CustomerCheckoutSettings
	 */
	public CountDownLatch updateCustomerCheckoutSettingsAsync(com.mozu.api.contracts.sitesettings.order.CustomerCheckoutSettings customerCheckoutSettings, String responseFields, AsyncCallback<com.mozu.api.contracts.sitesettings.order.CustomerCheckoutSettings> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.sitesettings.order.CustomerCheckoutSettings> client = com.mozu.api.clients.commerce.settings.checkout.CustomerCheckoutSettingsClient.updateCustomerCheckoutSettingsClient( customerCheckoutSettings,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

}



