/**
 *     This code was auto-generated by a Codezu.     
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
 */
package com.mozu.api.resources.commerce.shipping.admin.carriers;

import com.mozu.api.ApiContext;
import java.util.List;
import java.util.ArrayList;
import com.mozu.api.MozuClient;
import com.mozu.api.MozuClientFactory;
import com.mozu.api.MozuUrl;
import com.mozu.api.Headers;
import org.joda.time.DateTime;
import com.mozu.api.AsyncCallback;
import java.util.concurrent.CountDownLatch;
import com.mozu.api.security.AuthTicket;
import org.apache.commons.lang.StringUtils;

/** <summary>
 * 
 * </summary>
 */
public class CarrierCredentialResource {
	///
	/// <see cref="Mozu.Api.ApiContext"/>
	///
	private ApiContext _apiContext;


	public CarrierCredentialResource(ApiContext apiContext) 
	{
		_apiContext = apiContext;
	}

	
	/**
	 * 
	 * <p><pre><code>
	 *	CarrierCredential carriercredential = new CarrierCredential();
	 *	CarrierCredentialCollection carrierCredentialCollection = carriercredential.getCarrierCredentials();
	 * </code></pre></p>
	 * @return com.mozu.api.contracts.shippingadmin.carriers.CarrierCredentialCollection
	 * @see com.mozu.api.contracts.shippingadmin.carriers.CarrierCredentialCollection
	 */
	public com.mozu.api.contracts.shippingadmin.carriers.CarrierCredentialCollection getCarrierCredentials() throws Exception
	{
		return getCarrierCredentials( null,  null,  null,  null,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	CarrierCredential carriercredential = new CarrierCredential();
	 *	CountDownLatch latch = carriercredential.getCarrierCredentials( callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.shippingadmin.carriers.CarrierCredentialCollection
	 * @see com.mozu.api.contracts.shippingadmin.carriers.CarrierCredentialCollection
	 */
	public CountDownLatch getCarrierCredentialsAsync( AsyncCallback<com.mozu.api.contracts.shippingadmin.carriers.CarrierCredentialCollection> callback) throws Exception
	{
		return getCarrierCredentialsAsync( null,  null,  null,  null,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	CarrierCredential carriercredential = new CarrierCredential();
	 *	CarrierCredentialCollection carrierCredentialCollection = carriercredential.getCarrierCredentials( startIndex,  pageSize,  sortBy,  filter,  responseFields);
	 * </code></pre></p>
	 * @param filter 
	 * @param pageSize 
	 * @param responseFields 
	 * @param sortBy 
	 * @param startIndex 
	 * @return com.mozu.api.contracts.shippingadmin.carriers.CarrierCredentialCollection
	 * @see com.mozu.api.contracts.shippingadmin.carriers.CarrierCredentialCollection
	 */
	public com.mozu.api.contracts.shippingadmin.carriers.CarrierCredentialCollection getCarrierCredentials(Integer startIndex, Integer pageSize, String sortBy, String filter, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.shippingadmin.carriers.CarrierCredentialCollection> client = com.mozu.api.clients.commerce.shipping.admin.carriers.CarrierCredentialClient.getCarrierCredentialsClient( startIndex,  pageSize,  sortBy,  filter,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CarrierCredential carriercredential = new CarrierCredential();
	 *	CountDownLatch latch = carriercredential.getCarrierCredentials( startIndex,  pageSize,  sortBy,  filter,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param filter 
	 * @param pageSize 
	 * @param responseFields 
	 * @param sortBy 
	 * @param startIndex 
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.shippingadmin.carriers.CarrierCredentialCollection
	 * @see com.mozu.api.contracts.shippingadmin.carriers.CarrierCredentialCollection
	 */
	public CountDownLatch getCarrierCredentialsAsync(Integer startIndex, Integer pageSize, String sortBy, String filter, String responseFields, AsyncCallback<com.mozu.api.contracts.shippingadmin.carriers.CarrierCredentialCollection> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.shippingadmin.carriers.CarrierCredentialCollection> client = com.mozu.api.clients.commerce.shipping.admin.carriers.CarrierCredentialClient.getCarrierCredentialsClient( startIndex,  pageSize,  sortBy,  filter,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CarrierCredential carriercredential = new CarrierCredential();
	 *	CarrierCredential carrierCredential = carriercredential.getCarrierCredential( carrierId);
	 * </code></pre></p>
	 * @param carrierId 
	 * @return com.mozu.api.contracts.shippingadmin.carriers.CarrierCredential
	 * @see com.mozu.api.contracts.shippingadmin.carriers.CarrierCredential
	 */
	public com.mozu.api.contracts.shippingadmin.carriers.CarrierCredential getCarrierCredential(String carrierId) throws Exception
	{
		return getCarrierCredential( carrierId,  null,  null,  null,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	CarrierCredential carriercredential = new CarrierCredential();
	 *	CountDownLatch latch = carriercredential.getCarrierCredential( carrierId, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param carrierId 
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.shippingadmin.carriers.CarrierCredential
	 * @see com.mozu.api.contracts.shippingadmin.carriers.CarrierCredential
	 */
	public CountDownLatch getCarrierCredentialAsync(String carrierId, AsyncCallback<com.mozu.api.contracts.shippingadmin.carriers.CarrierCredential> callback) throws Exception
	{
		return getCarrierCredentialAsync( carrierId,  null,  null,  null,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	CarrierCredential carriercredential = new CarrierCredential();
	 *	CarrierCredential carrierCredential = carriercredential.getCarrierCredential( carrierId,  siteId,  locationGroupCode,  locationCode,  responseFields);
	 * </code></pre></p>
	 * @param carrierId 
	 * @param locationCode 
	 * @param locationGroupCode 
	 * @param responseFields 
	 * @param siteId 
	 * @return com.mozu.api.contracts.shippingadmin.carriers.CarrierCredential
	 * @see com.mozu.api.contracts.shippingadmin.carriers.CarrierCredential
	 */
	public com.mozu.api.contracts.shippingadmin.carriers.CarrierCredential getCarrierCredential(String carrierId, Integer siteId, String locationGroupCode, String locationCode, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.shippingadmin.carriers.CarrierCredential> client = com.mozu.api.clients.commerce.shipping.admin.carriers.CarrierCredentialClient.getCarrierCredentialClient( carrierId,  siteId,  locationGroupCode,  locationCode,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CarrierCredential carriercredential = new CarrierCredential();
	 *	CountDownLatch latch = carriercredential.getCarrierCredential( carrierId,  siteId,  locationGroupCode,  locationCode,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param carrierId 
	 * @param locationCode 
	 * @param locationGroupCode 
	 * @param responseFields 
	 * @param siteId 
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.shippingadmin.carriers.CarrierCredential
	 * @see com.mozu.api.contracts.shippingadmin.carriers.CarrierCredential
	 */
	public CountDownLatch getCarrierCredentialAsync(String carrierId, Integer siteId, String locationGroupCode, String locationCode, String responseFields, AsyncCallback<com.mozu.api.contracts.shippingadmin.carriers.CarrierCredential> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.shippingadmin.carriers.CarrierCredential> client = com.mozu.api.clients.commerce.shipping.admin.carriers.CarrierCredentialClient.getCarrierCredentialClient( carrierId,  siteId,  locationGroupCode,  locationCode,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CarrierCredential carriercredential = new CarrierCredential();
	 *	CarrierCredential carrierCredential = carriercredential.createCarrierCredential( carrierCredential,  carrierId);
	 * </code></pre></p>
	 * @param carrierId 
	 * @param carrierCredential 
	 * @return com.mozu.api.contracts.shippingadmin.carriers.CarrierCredential
	 * @see com.mozu.api.contracts.shippingadmin.carriers.CarrierCredential
	 * @see com.mozu.api.contracts.shippingadmin.carriers.CarrierCredential
	 */
	public com.mozu.api.contracts.shippingadmin.carriers.CarrierCredential createCarrierCredential(com.mozu.api.contracts.shippingadmin.carriers.CarrierCredential carrierCredential, String carrierId) throws Exception
	{
		return createCarrierCredential( carrierCredential,  carrierId,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	CarrierCredential carriercredential = new CarrierCredential();
	 *	CountDownLatch latch = carriercredential.createCarrierCredential( carrierCredential,  carrierId, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param carrierId 
	 * @param  callback callback handler for asynchronous operations
	 * @param carrierCredential 
	 * @return com.mozu.api.contracts.shippingadmin.carriers.CarrierCredential
	 * @see com.mozu.api.contracts.shippingadmin.carriers.CarrierCredential
	 * @see com.mozu.api.contracts.shippingadmin.carriers.CarrierCredential
	 */
	public CountDownLatch createCarrierCredentialAsync(com.mozu.api.contracts.shippingadmin.carriers.CarrierCredential carrierCredential, String carrierId, AsyncCallback<com.mozu.api.contracts.shippingadmin.carriers.CarrierCredential> callback) throws Exception
	{
		return createCarrierCredentialAsync( carrierCredential,  carrierId,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	CarrierCredential carriercredential = new CarrierCredential();
	 *	CarrierCredential carrierCredential = carriercredential.createCarrierCredential( carrierCredential,  carrierId,  responseFields);
	 * </code></pre></p>
	 * @param carrierId 
	 * @param responseFields 
	 * @param carrierCredential 
	 * @return com.mozu.api.contracts.shippingadmin.carriers.CarrierCredential
	 * @see com.mozu.api.contracts.shippingadmin.carriers.CarrierCredential
	 * @see com.mozu.api.contracts.shippingadmin.carriers.CarrierCredential
	 */
	public com.mozu.api.contracts.shippingadmin.carriers.CarrierCredential createCarrierCredential(com.mozu.api.contracts.shippingadmin.carriers.CarrierCredential carrierCredential, String carrierId, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.shippingadmin.carriers.CarrierCredential> client = com.mozu.api.clients.commerce.shipping.admin.carriers.CarrierCredentialClient.createCarrierCredentialClient( carrierCredential,  carrierId,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CarrierCredential carriercredential = new CarrierCredential();
	 *	CountDownLatch latch = carriercredential.createCarrierCredential( carrierCredential,  carrierId,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param carrierId 
	 * @param responseFields 
	 * @param  callback callback handler for asynchronous operations
	 * @param carrierCredential 
	 * @return com.mozu.api.contracts.shippingadmin.carriers.CarrierCredential
	 * @see com.mozu.api.contracts.shippingadmin.carriers.CarrierCredential
	 * @see com.mozu.api.contracts.shippingadmin.carriers.CarrierCredential
	 */
	public CountDownLatch createCarrierCredentialAsync(com.mozu.api.contracts.shippingadmin.carriers.CarrierCredential carrierCredential, String carrierId, String responseFields, AsyncCallback<com.mozu.api.contracts.shippingadmin.carriers.CarrierCredential> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.shippingadmin.carriers.CarrierCredential> client = com.mozu.api.clients.commerce.shipping.admin.carriers.CarrierCredentialClient.createCarrierCredentialClient( carrierCredential,  carrierId,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CarrierCredential carriercredential = new CarrierCredential();
	 *	CarrierCredential carrierCredential = carriercredential.updateCarrierCredential( carrierCredential,  carrierId);
	 * </code></pre></p>
	 * @param carrierId 
	 * @param carrierCredential 
	 * @return com.mozu.api.contracts.shippingadmin.carriers.CarrierCredential
	 * @see com.mozu.api.contracts.shippingadmin.carriers.CarrierCredential
	 * @see com.mozu.api.contracts.shippingadmin.carriers.CarrierCredential
	 */
	public com.mozu.api.contracts.shippingadmin.carriers.CarrierCredential updateCarrierCredential(com.mozu.api.contracts.shippingadmin.carriers.CarrierCredential carrierCredential, String carrierId) throws Exception
	{
		return updateCarrierCredential( carrierCredential,  carrierId,  null,  null,  null,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	CarrierCredential carriercredential = new CarrierCredential();
	 *	CountDownLatch latch = carriercredential.updateCarrierCredential( carrierCredential,  carrierId, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param carrierId 
	 * @param  callback callback handler for asynchronous operations
	 * @param carrierCredential 
	 * @return com.mozu.api.contracts.shippingadmin.carriers.CarrierCredential
	 * @see com.mozu.api.contracts.shippingadmin.carriers.CarrierCredential
	 * @see com.mozu.api.contracts.shippingadmin.carriers.CarrierCredential
	 */
	public CountDownLatch updateCarrierCredentialAsync(com.mozu.api.contracts.shippingadmin.carriers.CarrierCredential carrierCredential, String carrierId, AsyncCallback<com.mozu.api.contracts.shippingadmin.carriers.CarrierCredential> callback) throws Exception
	{
		return updateCarrierCredentialAsync( carrierCredential,  carrierId,  null,  null,  null,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	CarrierCredential carriercredential = new CarrierCredential();
	 *	CarrierCredential carrierCredential = carriercredential.updateCarrierCredential( carrierCredential,  carrierId,  siteId,  locationGroupCode,  locationCode,  responseFields);
	 * </code></pre></p>
	 * @param carrierId 
	 * @param locationCode 
	 * @param locationGroupCode 
	 * @param responseFields 
	 * @param siteId 
	 * @param carrierCredential 
	 * @return com.mozu.api.contracts.shippingadmin.carriers.CarrierCredential
	 * @see com.mozu.api.contracts.shippingadmin.carriers.CarrierCredential
	 * @see com.mozu.api.contracts.shippingadmin.carriers.CarrierCredential
	 */
	public com.mozu.api.contracts.shippingadmin.carriers.CarrierCredential updateCarrierCredential(com.mozu.api.contracts.shippingadmin.carriers.CarrierCredential carrierCredential, String carrierId, Integer siteId, String locationGroupCode, String locationCode, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.shippingadmin.carriers.CarrierCredential> client = com.mozu.api.clients.commerce.shipping.admin.carriers.CarrierCredentialClient.updateCarrierCredentialClient( carrierCredential,  carrierId,  siteId,  locationGroupCode,  locationCode,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CarrierCredential carriercredential = new CarrierCredential();
	 *	CountDownLatch latch = carriercredential.updateCarrierCredential( carrierCredential,  carrierId,  siteId,  locationGroupCode,  locationCode,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param carrierId 
	 * @param locationCode 
	 * @param locationGroupCode 
	 * @param responseFields 
	 * @param siteId 
	 * @param  callback callback handler for asynchronous operations
	 * @param carrierCredential 
	 * @return com.mozu.api.contracts.shippingadmin.carriers.CarrierCredential
	 * @see com.mozu.api.contracts.shippingadmin.carriers.CarrierCredential
	 * @see com.mozu.api.contracts.shippingadmin.carriers.CarrierCredential
	 */
	public CountDownLatch updateCarrierCredentialAsync(com.mozu.api.contracts.shippingadmin.carriers.CarrierCredential carrierCredential, String carrierId, Integer siteId, String locationGroupCode, String locationCode, String responseFields, AsyncCallback<com.mozu.api.contracts.shippingadmin.carriers.CarrierCredential> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.shippingadmin.carriers.CarrierCredential> client = com.mozu.api.clients.commerce.shipping.admin.carriers.CarrierCredentialClient.updateCarrierCredentialClient( carrierCredential,  carrierId,  siteId,  locationGroupCode,  locationCode,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CarrierCredential carriercredential = new CarrierCredential();
	 *	Stream stream = carriercredential.deleteCarrierCredential( carrierId);
	 * </code></pre></p>
	 * @param carrierId 
	 * @return Stream
	 * @see Stream
	 */
	public java.io.InputStream deleteCarrierCredential(String carrierId) throws Exception
	{
		return deleteCarrierCredential( carrierId,  null,  null,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	CarrierCredential carriercredential = new CarrierCredential();
	 *	CountDownLatch latch = carriercredential.deleteCarrierCredential( carrierId, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param carrierId 
	 * @param  callback callback handler for asynchronous operations
	 * @return Stream
	 * @see Stream
	 */
	public CountDownLatch deleteCarrierCredentialAsync(String carrierId, AsyncCallback<java.io.InputStream> callback) throws Exception
	{
		return deleteCarrierCredentialAsync( carrierId,  null,  null,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	CarrierCredential carriercredential = new CarrierCredential();
	 *	Stream stream = carriercredential.deleteCarrierCredential( carrierId,  siteId,  locationGroupCode,  locationCode);
	 * </code></pre></p>
	 * @param carrierId 
	 * @param locationCode 
	 * @param locationGroupCode 
	 * @param siteId 
	 * @return Stream
	 * @see Stream
	 */
	public java.io.InputStream deleteCarrierCredential(String carrierId, Integer siteId, String locationGroupCode, String locationCode) throws Exception
	{
		MozuClient<java.io.InputStream> client = com.mozu.api.clients.commerce.shipping.admin.carriers.CarrierCredentialClient.deleteCarrierCredentialClient( carrierId,  siteId,  locationGroupCode,  locationCode);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CarrierCredential carriercredential = new CarrierCredential();
	 *	CountDownLatch latch = carriercredential.deleteCarrierCredential( carrierId,  siteId,  locationGroupCode,  locationCode, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param carrierId 
	 * @param locationCode 
	 * @param locationGroupCode 
	 * @param siteId 
	 * @param  callback callback handler for asynchronous operations
	 * @return Stream
	 * @see Stream
	 */
	public CountDownLatch deleteCarrierCredentialAsync(String carrierId, Integer siteId, String locationGroupCode, String locationCode, AsyncCallback<java.io.InputStream> callback) throws Exception
	{
		MozuClient<java.io.InputStream> client = com.mozu.api.clients.commerce.shipping.admin.carriers.CarrierCredentialClient.deleteCarrierCredentialClient( carrierId,  siteId,  locationGroupCode,  locationCode);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

}



