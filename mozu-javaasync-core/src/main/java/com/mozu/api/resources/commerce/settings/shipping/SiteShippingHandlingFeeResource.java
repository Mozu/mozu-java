/**
 *     This code was auto-generated by a Codezu.     
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
 */
package com.mozu.api.resources.commerce.settings.shipping;

import com.mozu.api.ApiContext;
import java.util.List;
import java.util.ArrayList;
import com.mozu.api.MozuClient;
import com.mozu.api.MozuClientFactory;
import com.mozu.api.MozuUrl;
import com.mozu.api.Headers;
import org.joda.time.DateTime;
import com.mozu.api.AsyncCallback;
import java.util.concurrent.CountDownLatch;
import com.mozu.api.security.AuthTicket;
import org.apache.commons.lang.StringUtils;

/** <summary>
 * Use the Order Handling Fee subresource to configure any shipping and handling fees to apply to orders for this site.
 * </summary>
 */
public class SiteShippingHandlingFeeResource {
	///
	/// <see cref="Mozu.Api.ApiContext"/>
	///
	private ApiContext _apiContext;


	public SiteShippingHandlingFeeResource(ApiContext apiContext) 
	{
		_apiContext = apiContext;
	}

	
	/**
	 * 
	 * <p><pre><code>
	 *	SiteShippingHandlingFee siteshippinghandlingfee = new SiteShippingHandlingFee();
	 *	SiteShippingHandlingFee siteShippingHandlingFee = siteshippinghandlingfee.getOrderHandlingFee();
	 * </code></pre></p>
	 * @return com.mozu.api.contracts.sitesettings.shipping.SiteShippingHandlingFee
	 * @see com.mozu.api.contracts.sitesettings.shipping.SiteShippingHandlingFee
	 */
	public com.mozu.api.contracts.sitesettings.shipping.SiteShippingHandlingFee getOrderHandlingFee() throws Exception
	{
		return getOrderHandlingFee( null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	SiteShippingHandlingFee siteshippinghandlingfee = new SiteShippingHandlingFee();
	 *	CountDownLatch latch = siteshippinghandlingfee.getOrderHandlingFee( callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.sitesettings.shipping.SiteShippingHandlingFee
	 * @see com.mozu.api.contracts.sitesettings.shipping.SiteShippingHandlingFee
	 */
	public CountDownLatch getOrderHandlingFeeAsync( AsyncCallback<com.mozu.api.contracts.sitesettings.shipping.SiteShippingHandlingFee> callback) throws Exception
	{
		return getOrderHandlingFeeAsync( null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	SiteShippingHandlingFee siteshippinghandlingfee = new SiteShippingHandlingFee();
	 *	SiteShippingHandlingFee siteShippingHandlingFee = siteshippinghandlingfee.getOrderHandlingFee( responseFields);
	 * </code></pre></p>
	 * @param responseFields Filtering syntax appended to an API call to increase or decrease the amount of data returned inside a JSON object. This parameter should only be used to retrieve data. Attempting to update data using this parameter may cause data loss.
	 * @return com.mozu.api.contracts.sitesettings.shipping.SiteShippingHandlingFee
	 * @see com.mozu.api.contracts.sitesettings.shipping.SiteShippingHandlingFee
	 */
	public com.mozu.api.contracts.sitesettings.shipping.SiteShippingHandlingFee getOrderHandlingFee(String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.sitesettings.shipping.SiteShippingHandlingFee> client = com.mozu.api.clients.commerce.settings.shipping.SiteShippingHandlingFeeClient.getOrderHandlingFeeClient( responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	SiteShippingHandlingFee siteshippinghandlingfee = new SiteShippingHandlingFee();
	 *	CountDownLatch latch = siteshippinghandlingfee.getOrderHandlingFee( responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param responseFields Filtering syntax appended to an API call to increase or decrease the amount of data returned inside a JSON object. This parameter should only be used to retrieve data. Attempting to update data using this parameter may cause data loss.
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.sitesettings.shipping.SiteShippingHandlingFee
	 * @see com.mozu.api.contracts.sitesettings.shipping.SiteShippingHandlingFee
	 */
	public CountDownLatch getOrderHandlingFeeAsync(String responseFields, AsyncCallback<com.mozu.api.contracts.sitesettings.shipping.SiteShippingHandlingFee> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.sitesettings.shipping.SiteShippingHandlingFee> client = com.mozu.api.clients.commerce.settings.shipping.SiteShippingHandlingFeeClient.getOrderHandlingFeeClient( responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	SiteShippingHandlingFee siteshippinghandlingfee = new SiteShippingHandlingFee();
	 *	SiteShippingHandlingFee siteShippingHandlingFee = siteshippinghandlingfee.createOrderHandlingFee( orderHandlingFee);
	 * </code></pre></p>
	 * @param orderHandlingFee Properties of the handling fee to apply to order shipments for the site.
	 * @return com.mozu.api.contracts.sitesettings.shipping.SiteShippingHandlingFee
	 * @see com.mozu.api.contracts.sitesettings.shipping.SiteShippingHandlingFee
	 * @see com.mozu.api.contracts.sitesettings.shipping.SiteShippingHandlingFee
	 */
	public com.mozu.api.contracts.sitesettings.shipping.SiteShippingHandlingFee createOrderHandlingFee(com.mozu.api.contracts.sitesettings.shipping.SiteShippingHandlingFee orderHandlingFee) throws Exception
	{
		return createOrderHandlingFee( orderHandlingFee,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	SiteShippingHandlingFee siteshippinghandlingfee = new SiteShippingHandlingFee();
	 *	CountDownLatch latch = siteshippinghandlingfee.createOrderHandlingFee( orderHandlingFee, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param  callback callback handler for asynchronous operations
	 * @param orderHandlingFee Properties of the handling fee to apply to order shipments for the site.
	 * @return com.mozu.api.contracts.sitesettings.shipping.SiteShippingHandlingFee
	 * @see com.mozu.api.contracts.sitesettings.shipping.SiteShippingHandlingFee
	 * @see com.mozu.api.contracts.sitesettings.shipping.SiteShippingHandlingFee
	 */
	public CountDownLatch createOrderHandlingFeeAsync(com.mozu.api.contracts.sitesettings.shipping.SiteShippingHandlingFee orderHandlingFee, AsyncCallback<com.mozu.api.contracts.sitesettings.shipping.SiteShippingHandlingFee> callback) throws Exception
	{
		return createOrderHandlingFeeAsync( orderHandlingFee,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	SiteShippingHandlingFee siteshippinghandlingfee = new SiteShippingHandlingFee();
	 *	SiteShippingHandlingFee siteShippingHandlingFee = siteshippinghandlingfee.createOrderHandlingFee( orderHandlingFee,  responseFields);
	 * </code></pre></p>
	 * @param responseFields Filtering syntax appended to an API call to increase or decrease the amount of data returned inside a JSON object. This parameter should only be used to retrieve data. Attempting to update data using this parameter may cause data loss.
	 * @param orderHandlingFee Properties of the handling fee to apply to order shipments for the site.
	 * @return com.mozu.api.contracts.sitesettings.shipping.SiteShippingHandlingFee
	 * @see com.mozu.api.contracts.sitesettings.shipping.SiteShippingHandlingFee
	 * @see com.mozu.api.contracts.sitesettings.shipping.SiteShippingHandlingFee
	 */
	public com.mozu.api.contracts.sitesettings.shipping.SiteShippingHandlingFee createOrderHandlingFee(com.mozu.api.contracts.sitesettings.shipping.SiteShippingHandlingFee orderHandlingFee, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.sitesettings.shipping.SiteShippingHandlingFee> client = com.mozu.api.clients.commerce.settings.shipping.SiteShippingHandlingFeeClient.createOrderHandlingFeeClient( orderHandlingFee,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	SiteShippingHandlingFee siteshippinghandlingfee = new SiteShippingHandlingFee();
	 *	CountDownLatch latch = siteshippinghandlingfee.createOrderHandlingFee( orderHandlingFee,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param responseFields Filtering syntax appended to an API call to increase or decrease the amount of data returned inside a JSON object. This parameter should only be used to retrieve data. Attempting to update data using this parameter may cause data loss.
	 * @param  callback callback handler for asynchronous operations
	 * @param orderHandlingFee Properties of the handling fee to apply to order shipments for the site.
	 * @return com.mozu.api.contracts.sitesettings.shipping.SiteShippingHandlingFee
	 * @see com.mozu.api.contracts.sitesettings.shipping.SiteShippingHandlingFee
	 * @see com.mozu.api.contracts.sitesettings.shipping.SiteShippingHandlingFee
	 */
	public CountDownLatch createOrderHandlingFeeAsync(com.mozu.api.contracts.sitesettings.shipping.SiteShippingHandlingFee orderHandlingFee, String responseFields, AsyncCallback<com.mozu.api.contracts.sitesettings.shipping.SiteShippingHandlingFee> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.sitesettings.shipping.SiteShippingHandlingFee> client = com.mozu.api.clients.commerce.settings.shipping.SiteShippingHandlingFeeClient.createOrderHandlingFeeClient( orderHandlingFee,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	SiteShippingHandlingFee siteshippinghandlingfee = new SiteShippingHandlingFee();
	 *	SiteShippingHandlingFee siteShippingHandlingFee = siteshippinghandlingfee.updateOrderHandlingFee( orderHandlingFee);
	 * </code></pre></p>
	 * @param orderHandlingFee Properties of the handling fee to apply to order shipments for the site.
	 * @return com.mozu.api.contracts.sitesettings.shipping.SiteShippingHandlingFee
	 * @see com.mozu.api.contracts.sitesettings.shipping.SiteShippingHandlingFee
	 * @see com.mozu.api.contracts.sitesettings.shipping.SiteShippingHandlingFee
	 */
	public com.mozu.api.contracts.sitesettings.shipping.SiteShippingHandlingFee updateOrderHandlingFee(com.mozu.api.contracts.sitesettings.shipping.SiteShippingHandlingFee orderHandlingFee) throws Exception
	{
		return updateOrderHandlingFee( orderHandlingFee,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	SiteShippingHandlingFee siteshippinghandlingfee = new SiteShippingHandlingFee();
	 *	CountDownLatch latch = siteshippinghandlingfee.updateOrderHandlingFee( orderHandlingFee, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param  callback callback handler for asynchronous operations
	 * @param orderHandlingFee Properties of the handling fee to apply to order shipments for the site.
	 * @return com.mozu.api.contracts.sitesettings.shipping.SiteShippingHandlingFee
	 * @see com.mozu.api.contracts.sitesettings.shipping.SiteShippingHandlingFee
	 * @see com.mozu.api.contracts.sitesettings.shipping.SiteShippingHandlingFee
	 */
	public CountDownLatch updateOrderHandlingFeeAsync(com.mozu.api.contracts.sitesettings.shipping.SiteShippingHandlingFee orderHandlingFee, AsyncCallback<com.mozu.api.contracts.sitesettings.shipping.SiteShippingHandlingFee> callback) throws Exception
	{
		return updateOrderHandlingFeeAsync( orderHandlingFee,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	SiteShippingHandlingFee siteshippinghandlingfee = new SiteShippingHandlingFee();
	 *	SiteShippingHandlingFee siteShippingHandlingFee = siteshippinghandlingfee.updateOrderHandlingFee( orderHandlingFee,  responseFields);
	 * </code></pre></p>
	 * @param responseFields Filtering syntax appended to an API call to increase or decrease the amount of data returned inside a JSON object. This parameter should only be used to retrieve data. Attempting to update data using this parameter may cause data loss.
	 * @param orderHandlingFee Properties of the handling fee to apply to order shipments for the site.
	 * @return com.mozu.api.contracts.sitesettings.shipping.SiteShippingHandlingFee
	 * @see com.mozu.api.contracts.sitesettings.shipping.SiteShippingHandlingFee
	 * @see com.mozu.api.contracts.sitesettings.shipping.SiteShippingHandlingFee
	 */
	public com.mozu.api.contracts.sitesettings.shipping.SiteShippingHandlingFee updateOrderHandlingFee(com.mozu.api.contracts.sitesettings.shipping.SiteShippingHandlingFee orderHandlingFee, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.sitesettings.shipping.SiteShippingHandlingFee> client = com.mozu.api.clients.commerce.settings.shipping.SiteShippingHandlingFeeClient.updateOrderHandlingFeeClient( orderHandlingFee,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	SiteShippingHandlingFee siteshippinghandlingfee = new SiteShippingHandlingFee();
	 *	CountDownLatch latch = siteshippinghandlingfee.updateOrderHandlingFee( orderHandlingFee,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param responseFields Filtering syntax appended to an API call to increase or decrease the amount of data returned inside a JSON object. This parameter should only be used to retrieve data. Attempting to update data using this parameter may cause data loss.
	 * @param  callback callback handler for asynchronous operations
	 * @param orderHandlingFee Properties of the handling fee to apply to order shipments for the site.
	 * @return com.mozu.api.contracts.sitesettings.shipping.SiteShippingHandlingFee
	 * @see com.mozu.api.contracts.sitesettings.shipping.SiteShippingHandlingFee
	 * @see com.mozu.api.contracts.sitesettings.shipping.SiteShippingHandlingFee
	 */
	public CountDownLatch updateOrderHandlingFeeAsync(com.mozu.api.contracts.sitesettings.shipping.SiteShippingHandlingFee orderHandlingFee, String responseFields, AsyncCallback<com.mozu.api.contracts.sitesettings.shipping.SiteShippingHandlingFee> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.sitesettings.shipping.SiteShippingHandlingFee> client = com.mozu.api.clients.commerce.settings.shipping.SiteShippingHandlingFeeClient.updateOrderHandlingFeeClient( orderHandlingFee,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

}



