/**
 *     This code was auto-generated by a Codezu.     
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
 */
package com.mozu.api.resources.commerce.settings.general;

import com.mozu.api.ApiContext;
import java.util.List;
import java.util.ArrayList;
import com.mozu.api.MozuClient;
import com.mozu.api.MozuClientFactory;
import com.mozu.api.MozuUrl;
import com.mozu.api.Headers;
import org.joda.time.DateTime;
import com.mozu.api.AsyncCallback;
import java.util.concurrent.CountDownLatch;
import com.mozu.api.security.AuthTicket;
import org.apache.commons.lang.StringUtils;

/** <summary>
 * 
 * </summary>
 */
public class CustomRouteSettingsResource {
	///
	/// <see cref="Mozu.Api.ApiContext"/>
	///
	private ApiContext _apiContext;


	public CustomRouteSettingsResource(ApiContext apiContext) 
	{
		_apiContext = apiContext;
	}

	
	/**
	 * 
	 * <p><pre><code>
	 *	CustomRouteSettings customroutesettings = new CustomRouteSettings();
	 *	CustomRouteSettings customRouteSettings = customroutesettings.getCustomRouteSettings();
	 * </code></pre></p>
	 * @return com.mozu.api.contracts.sitesettings.general.general.routing.CustomRouteSettings
	 * @see com.mozu.api.contracts.sitesettings.general.general.routing.CustomRouteSettings
	 */
	public com.mozu.api.contracts.sitesettings.general.general.routing.CustomRouteSettings getCustomRouteSettings() throws Exception
	{
		return getCustomRouteSettings( null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	CustomRouteSettings customroutesettings = new CustomRouteSettings();
	 *	CountDownLatch latch = customroutesettings.getCustomRouteSettings( callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.sitesettings.general.general.routing.CustomRouteSettings
	 * @see com.mozu.api.contracts.sitesettings.general.general.routing.CustomRouteSettings
	 */
	public CountDownLatch getCustomRouteSettingsAsync( AsyncCallback<com.mozu.api.contracts.sitesettings.general.general.routing.CustomRouteSettings> callback) throws Exception
	{
		return getCustomRouteSettingsAsync( null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	CustomRouteSettings customroutesettings = new CustomRouteSettings();
	 *	CustomRouteSettings customRouteSettings = customroutesettings.getCustomRouteSettings( responseFields);
	 * </code></pre></p>
	 * @param responseFields 
	 * @return com.mozu.api.contracts.sitesettings.general.general.routing.CustomRouteSettings
	 * @see com.mozu.api.contracts.sitesettings.general.general.routing.CustomRouteSettings
	 */
	public com.mozu.api.contracts.sitesettings.general.general.routing.CustomRouteSettings getCustomRouteSettings(String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.sitesettings.general.general.routing.CustomRouteSettings> client = com.mozu.api.clients.commerce.settings.general.CustomRouteSettingsClient.getCustomRouteSettingsClient( responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CustomRouteSettings customroutesettings = new CustomRouteSettings();
	 *	CountDownLatch latch = customroutesettings.getCustomRouteSettings( responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param responseFields 
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.sitesettings.general.general.routing.CustomRouteSettings
	 * @see com.mozu.api.contracts.sitesettings.general.general.routing.CustomRouteSettings
	 */
	public CountDownLatch getCustomRouteSettingsAsync(String responseFields, AsyncCallback<com.mozu.api.contracts.sitesettings.general.general.routing.CustomRouteSettings> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.sitesettings.general.general.routing.CustomRouteSettings> client = com.mozu.api.clients.commerce.settings.general.CustomRouteSettingsClient.getCustomRouteSettingsClient( responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CustomRouteSettings customroutesettings = new CustomRouteSettings();
	 *	CustomRouteSettings customRouteSettings = customroutesettings.createCustomRouteSettings( settings);
	 * </code></pre></p>
	 * @param settings 
	 * @return com.mozu.api.contracts.sitesettings.general.general.routing.CustomRouteSettings
	 * @see com.mozu.api.contracts.sitesettings.general.general.routing.CustomRouteSettings
	 * @see com.mozu.api.contracts.sitesettings.general.general.routing.CustomRouteSettings
	 */
	public com.mozu.api.contracts.sitesettings.general.general.routing.CustomRouteSettings createCustomRouteSettings(com.mozu.api.contracts.sitesettings.general.general.routing.CustomRouteSettings settings) throws Exception
	{
		return createCustomRouteSettings( settings,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	CustomRouteSettings customroutesettings = new CustomRouteSettings();
	 *	CountDownLatch latch = customroutesettings.createCustomRouteSettings( settings, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param  callback callback handler for asynchronous operations
	 * @param settings 
	 * @return com.mozu.api.contracts.sitesettings.general.general.routing.CustomRouteSettings
	 * @see com.mozu.api.contracts.sitesettings.general.general.routing.CustomRouteSettings
	 * @see com.mozu.api.contracts.sitesettings.general.general.routing.CustomRouteSettings
	 */
	public CountDownLatch createCustomRouteSettingsAsync(com.mozu.api.contracts.sitesettings.general.general.routing.CustomRouteSettings settings, AsyncCallback<com.mozu.api.contracts.sitesettings.general.general.routing.CustomRouteSettings> callback) throws Exception
	{
		return createCustomRouteSettingsAsync( settings,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	CustomRouteSettings customroutesettings = new CustomRouteSettings();
	 *	CustomRouteSettings customRouteSettings = customroutesettings.createCustomRouteSettings( settings,  responseFields);
	 * </code></pre></p>
	 * @param responseFields 
	 * @param settings 
	 * @return com.mozu.api.contracts.sitesettings.general.general.routing.CustomRouteSettings
	 * @see com.mozu.api.contracts.sitesettings.general.general.routing.CustomRouteSettings
	 * @see com.mozu.api.contracts.sitesettings.general.general.routing.CustomRouteSettings
	 */
	public com.mozu.api.contracts.sitesettings.general.general.routing.CustomRouteSettings createCustomRouteSettings(com.mozu.api.contracts.sitesettings.general.general.routing.CustomRouteSettings settings, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.sitesettings.general.general.routing.CustomRouteSettings> client = com.mozu.api.clients.commerce.settings.general.CustomRouteSettingsClient.createCustomRouteSettingsClient( settings,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CustomRouteSettings customroutesettings = new CustomRouteSettings();
	 *	CountDownLatch latch = customroutesettings.createCustomRouteSettings( settings,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param responseFields 
	 * @param  callback callback handler for asynchronous operations
	 * @param settings 
	 * @return com.mozu.api.contracts.sitesettings.general.general.routing.CustomRouteSettings
	 * @see com.mozu.api.contracts.sitesettings.general.general.routing.CustomRouteSettings
	 * @see com.mozu.api.contracts.sitesettings.general.general.routing.CustomRouteSettings
	 */
	public CountDownLatch createCustomRouteSettingsAsync(com.mozu.api.contracts.sitesettings.general.general.routing.CustomRouteSettings settings, String responseFields, AsyncCallback<com.mozu.api.contracts.sitesettings.general.general.routing.CustomRouteSettings> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.sitesettings.general.general.routing.CustomRouteSettings> client = com.mozu.api.clients.commerce.settings.general.CustomRouteSettingsClient.createCustomRouteSettingsClient( settings,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CustomRouteSettings customroutesettings = new CustomRouteSettings();
	 *	CustomRouteSettings customRouteSettings = customroutesettings.updateCustomRouteSettings( settings);
	 * </code></pre></p>
	 * @param settings 
	 * @return com.mozu.api.contracts.sitesettings.general.general.routing.CustomRouteSettings
	 * @see com.mozu.api.contracts.sitesettings.general.general.routing.CustomRouteSettings
	 * @see com.mozu.api.contracts.sitesettings.general.general.routing.CustomRouteSettings
	 */
	public com.mozu.api.contracts.sitesettings.general.general.routing.CustomRouteSettings updateCustomRouteSettings(com.mozu.api.contracts.sitesettings.general.general.routing.CustomRouteSettings settings) throws Exception
	{
		return updateCustomRouteSettings( settings,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	CustomRouteSettings customroutesettings = new CustomRouteSettings();
	 *	CountDownLatch latch = customroutesettings.updateCustomRouteSettings( settings, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param  callback callback handler for asynchronous operations
	 * @param settings 
	 * @return com.mozu.api.contracts.sitesettings.general.general.routing.CustomRouteSettings
	 * @see com.mozu.api.contracts.sitesettings.general.general.routing.CustomRouteSettings
	 * @see com.mozu.api.contracts.sitesettings.general.general.routing.CustomRouteSettings
	 */
	public CountDownLatch updateCustomRouteSettingsAsync(com.mozu.api.contracts.sitesettings.general.general.routing.CustomRouteSettings settings, AsyncCallback<com.mozu.api.contracts.sitesettings.general.general.routing.CustomRouteSettings> callback) throws Exception
	{
		return updateCustomRouteSettingsAsync( settings,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	CustomRouteSettings customroutesettings = new CustomRouteSettings();
	 *	CustomRouteSettings customRouteSettings = customroutesettings.updateCustomRouteSettings( settings,  responseFields);
	 * </code></pre></p>
	 * @param responseFields 
	 * @param settings 
	 * @return com.mozu.api.contracts.sitesettings.general.general.routing.CustomRouteSettings
	 * @see com.mozu.api.contracts.sitesettings.general.general.routing.CustomRouteSettings
	 * @see com.mozu.api.contracts.sitesettings.general.general.routing.CustomRouteSettings
	 */
	public com.mozu.api.contracts.sitesettings.general.general.routing.CustomRouteSettings updateCustomRouteSettings(com.mozu.api.contracts.sitesettings.general.general.routing.CustomRouteSettings settings, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.sitesettings.general.general.routing.CustomRouteSettings> client = com.mozu.api.clients.commerce.settings.general.CustomRouteSettingsClient.updateCustomRouteSettingsClient( settings,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CustomRouteSettings customroutesettings = new CustomRouteSettings();
	 *	CountDownLatch latch = customroutesettings.updateCustomRouteSettings( settings,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param responseFields 
	 * @param  callback callback handler for asynchronous operations
	 * @param settings 
	 * @return com.mozu.api.contracts.sitesettings.general.general.routing.CustomRouteSettings
	 * @see com.mozu.api.contracts.sitesettings.general.general.routing.CustomRouteSettings
	 * @see com.mozu.api.contracts.sitesettings.general.general.routing.CustomRouteSettings
	 */
	public CountDownLatch updateCustomRouteSettingsAsync(com.mozu.api.contracts.sitesettings.general.general.routing.CustomRouteSettings settings, String responseFields, AsyncCallback<com.mozu.api.contracts.sitesettings.general.general.routing.CustomRouteSettings> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.sitesettings.general.general.routing.CustomRouteSettings> client = com.mozu.api.clients.commerce.settings.general.CustomRouteSettingsClient.updateCustomRouteSettingsClient( settings,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CustomRouteSettings customroutesettings = new CustomRouteSettings();
	 *	Stream stream = customroutesettings.deleteCustomRouteSettings();
	 * </code></pre></p>
	 * @return Stream
	 * @see Stream
	 */
	public java.io.InputStream deleteCustomRouteSettings() throws Exception
	{
		MozuClient<java.io.InputStream> client = com.mozu.api.clients.commerce.settings.general.CustomRouteSettingsClient.deleteCustomRouteSettingsClient();
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CustomRouteSettings customroutesettings = new CustomRouteSettings();
	 *	CountDownLatch latch = customroutesettings.deleteCustomRouteSettings( callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param  callback callback handler for asynchronous operations
	 * @return Stream
	 * @see Stream
	 */
	public CountDownLatch deleteCustomRouteSettingsAsync( AsyncCallback<java.io.InputStream> callback) throws Exception
	{
		MozuClient<java.io.InputStream> client = com.mozu.api.clients.commerce.settings.general.CustomRouteSettingsClient.deleteCustomRouteSettingsClient();
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

}



