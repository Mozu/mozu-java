/**
 *     This code was auto-generated by a Codezu.     
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
 */
package com.mozu.api.resources.commerce.catalog.admin;

import com.mozu.api.ApiContext;
import java.util.List;
import java.util.ArrayList;
import com.mozu.api.MozuClient;
import com.mozu.api.MozuClientFactory;
import com.mozu.api.MozuUrl;
import com.mozu.api.Headers;
import org.joda.time.DateTime;
import com.mozu.api.AsyncCallback;
import java.util.concurrent.CountDownLatch;
import com.mozu.api.security.AuthTicket;
import org.apache.commons.lang.StringUtils;

import com.mozu.api.DataViewMode;
/** <summary>
 * Temporarily hold a product from inventory while a shopper is filling out payment information. Create a product reservation when a shopper proceeds to check out and then release the reservation when the order process is complete.
 * </summary>
 */
public class ProductReservationResource {
	///
	/// <see cref="Mozu.Api.ApiContext"/>
	///
	private ApiContext _apiContext;

	private DataViewMode _dataViewMode;

	public ProductReservationResource(ApiContext apiContext) 
	{
		_apiContext = apiContext;
		_dataViewMode = DataViewMode.Live;
	}

	public ProductReservationResource(ApiContext apiContext, DataViewMode dataViewMode) 
	{
		_apiContext = apiContext;
		_dataViewMode = dataViewMode;
	}
		
	/**
	 * 
	 * <p><pre><code>
	 *	ProductReservation productreservation = new ProductReservation();
	 *	ProductReservationCollection productReservationCollection = productreservation.getProductReservations();
	 * </code></pre></p>
	 * @param dataViewMode DataViewMode
	 * @return com.mozu.api.contracts.productadmin.ProductReservationCollection
	 * @see com.mozu.api.contracts.productadmin.ProductReservationCollection
	 */
	public com.mozu.api.contracts.productadmin.ProductReservationCollection getProductReservations() throws Exception
	{
		return getProductReservations( null,  null,  null,  null,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductReservation productreservation = new ProductReservation();
	 *	CountDownLatch latch = productreservation.getProductReservations( callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param  callback callback handler for asynchronous operations
	 * @param dataViewMode DataViewMode
	 * @return com.mozu.api.contracts.productadmin.ProductReservationCollection
	 * @see com.mozu.api.contracts.productadmin.ProductReservationCollection
	 */
	public CountDownLatch getProductReservationsAsync( AsyncCallback<com.mozu.api.contracts.productadmin.ProductReservationCollection> callback) throws Exception
	{
		return getProductReservationsAsync( null,  null,  null,  null,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductReservation productreservation = new ProductReservation();
	 *	ProductReservationCollection productReservationCollection = productreservation.getProductReservations( startIndex,  pageSize,  sortBy,  filter,  responseFields);
	 * </code></pre></p>
	 * @param filter 
	 * @param pageSize Used to page results from a query. Indicates the maximum number of entities to return from a query. Default value: 20. Max value: 200.
	 * @param responseFields 
	 * @param sortBy The element to sort the results by and the order in which the results appear. Either ascending order (a-z) which accepts 'asc' or 'asc' or descending order (z-a) which accepts 'desc' or 'desc'. The sortBy parameter follows an available property.
	 * @param startIndex 
	 * @param dataViewMode DataViewMode
	 * @return com.mozu.api.contracts.productadmin.ProductReservationCollection
	 * @see com.mozu.api.contracts.productadmin.ProductReservationCollection
	 */
	public com.mozu.api.contracts.productadmin.ProductReservationCollection getProductReservations(Integer startIndex, Integer pageSize, String sortBy, String filter, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.ProductReservationCollection> client = com.mozu.api.clients.commerce.catalog.admin.ProductReservationClient.getProductReservationsClient(_dataViewMode,  startIndex,  pageSize,  sortBy,  filter,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductReservation productreservation = new ProductReservation();
	 *	CountDownLatch latch = productreservation.getProductReservations( startIndex,  pageSize,  sortBy,  filter,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param filter 
	 * @param pageSize Used to page results from a query. Indicates the maximum number of entities to return from a query. Default value: 20. Max value: 200.
	 * @param responseFields 
	 * @param sortBy The element to sort the results by and the order in which the results appear. Either ascending order (a-z) which accepts 'asc' or 'asc' or descending order (z-a) which accepts 'desc' or 'desc'. The sortBy parameter follows an available property.
	 * @param startIndex 
	 * @param  callback callback handler for asynchronous operations
	 * @param dataViewMode DataViewMode
	 * @return com.mozu.api.contracts.productadmin.ProductReservationCollection
	 * @see com.mozu.api.contracts.productadmin.ProductReservationCollection
	 */
	public CountDownLatch getProductReservationsAsync(Integer startIndex, Integer pageSize, String sortBy, String filter, String responseFields, AsyncCallback<com.mozu.api.contracts.productadmin.ProductReservationCollection> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.ProductReservationCollection> client = com.mozu.api.clients.commerce.catalog.admin.ProductReservationClient.getProductReservationsClient(_dataViewMode,  startIndex,  pageSize,  sortBy,  filter,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductReservation productreservation = new ProductReservation();
	 *	ProductReservation productReservation = productreservation.getProductReservation( productReservationId);
	 * </code></pre></p>
	 * @param productReservationId Unique identifier of the product reservation.
	 * @param dataViewMode DataViewMode
	 * @return com.mozu.api.contracts.productadmin.ProductReservation
	 * @see com.mozu.api.contracts.productadmin.ProductReservation
	 */
	public com.mozu.api.contracts.productadmin.ProductReservation getProductReservation(Integer productReservationId) throws Exception
	{
		return getProductReservation( productReservationId,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductReservation productreservation = new ProductReservation();
	 *	CountDownLatch latch = productreservation.getProductReservation( productReservationId, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param productReservationId Unique identifier of the product reservation.
	 * @param  callback callback handler for asynchronous operations
	 * @param dataViewMode DataViewMode
	 * @return com.mozu.api.contracts.productadmin.ProductReservation
	 * @see com.mozu.api.contracts.productadmin.ProductReservation
	 */
	public CountDownLatch getProductReservationAsync(Integer productReservationId, AsyncCallback<com.mozu.api.contracts.productadmin.ProductReservation> callback) throws Exception
	{
		return getProductReservationAsync( productReservationId,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductReservation productreservation = new ProductReservation();
	 *	ProductReservation productReservation = productreservation.getProductReservation( productReservationId,  responseFields);
	 * </code></pre></p>
	 * @param productReservationId Unique identifier of the product reservation.
	 * @param responseFields 
	 * @param dataViewMode DataViewMode
	 * @return com.mozu.api.contracts.productadmin.ProductReservation
	 * @see com.mozu.api.contracts.productadmin.ProductReservation
	 */
	public com.mozu.api.contracts.productadmin.ProductReservation getProductReservation(Integer productReservationId, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.ProductReservation> client = com.mozu.api.clients.commerce.catalog.admin.ProductReservationClient.getProductReservationClient(_dataViewMode,  productReservationId,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductReservation productreservation = new ProductReservation();
	 *	CountDownLatch latch = productreservation.getProductReservation( productReservationId,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param productReservationId Unique identifier of the product reservation.
	 * @param responseFields 
	 * @param  callback callback handler for asynchronous operations
	 * @param dataViewMode DataViewMode
	 * @return com.mozu.api.contracts.productadmin.ProductReservation
	 * @see com.mozu.api.contracts.productadmin.ProductReservation
	 */
	public CountDownLatch getProductReservationAsync(Integer productReservationId, String responseFields, AsyncCallback<com.mozu.api.contracts.productadmin.ProductReservation> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.ProductReservation> client = com.mozu.api.clients.commerce.catalog.admin.ProductReservationClient.getProductReservationClient(_dataViewMode,  productReservationId,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductReservation productreservation = new ProductReservation();
	 *	ProductReservation productReservation = productreservation.addProductReservations( productReservations);
	 * </code></pre></p>
	 * @param dataViewMode DataViewMode
	 * @param productReservations Details of the product reservations to add.
	 * @return List<com.mozu.api.contracts.productadmin.ProductReservation>
	 * @see com.mozu.api.contracts.productadmin.ProductReservation
	 * @see com.mozu.api.contracts.productadmin.ProductReservation
	 */
	public List<com.mozu.api.contracts.productadmin.ProductReservation> addProductReservations(List<com.mozu.api.contracts.productadmin.ProductReservation> productReservations) throws Exception
	{
		return addProductReservations( productReservations,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductReservation productreservation = new ProductReservation();
	 *	CountDownLatch latch = productreservation.addProductReservations( productReservations, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param  callback callback handler for asynchronous operations
	 * @param dataViewMode DataViewMode
	 * @param productReservations Details of the product reservations to add.
	 * @return List<com.mozu.api.contracts.productadmin.ProductReservation>
	 * @see com.mozu.api.contracts.productadmin.ProductReservation
	 * @see com.mozu.api.contracts.productadmin.ProductReservation
	 */
	public CountDownLatch addProductReservationsAsync(List<com.mozu.api.contracts.productadmin.ProductReservation> productReservations, AsyncCallback<List<com.mozu.api.contracts.productadmin.ProductReservation>> callback) throws Exception
	{
		return addProductReservationsAsync( productReservations,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductReservation productreservation = new ProductReservation();
	 *	ProductReservation productReservation = productreservation.addProductReservations( productReservations,  skipInventoryCheck);
	 * </code></pre></p>
	 * @param skipInventoryCheck If true, skip the process to validate inventory when creating this product reservation.
	 * @param dataViewMode DataViewMode
	 * @param productReservations Details of the product reservations to add.
	 * @return List<com.mozu.api.contracts.productadmin.ProductReservation>
	 * @see com.mozu.api.contracts.productadmin.ProductReservation
	 * @see com.mozu.api.contracts.productadmin.ProductReservation
	 */
	public List<com.mozu.api.contracts.productadmin.ProductReservation> addProductReservations(List<com.mozu.api.contracts.productadmin.ProductReservation> productReservations, Boolean skipInventoryCheck) throws Exception
	{
		MozuClient<List<com.mozu.api.contracts.productadmin.ProductReservation>> client = com.mozu.api.clients.commerce.catalog.admin.ProductReservationClient.addProductReservationsClient(_dataViewMode,  productReservations,  skipInventoryCheck);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductReservation productreservation = new ProductReservation();
	 *	CountDownLatch latch = productreservation.addProductReservations( productReservations,  skipInventoryCheck, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param skipInventoryCheck If true, skip the process to validate inventory when creating this product reservation.
	 * @param  callback callback handler for asynchronous operations
	 * @param dataViewMode DataViewMode
	 * @param productReservations Details of the product reservations to add.
	 * @return List<com.mozu.api.contracts.productadmin.ProductReservation>
	 * @see com.mozu.api.contracts.productadmin.ProductReservation
	 * @see com.mozu.api.contracts.productadmin.ProductReservation
	 */
	public CountDownLatch addProductReservationsAsync(List<com.mozu.api.contracts.productadmin.ProductReservation> productReservations, Boolean skipInventoryCheck, AsyncCallback<List<com.mozu.api.contracts.productadmin.ProductReservation>> callback) throws Exception
	{
		MozuClient<List<com.mozu.api.contracts.productadmin.ProductReservation>> client = com.mozu.api.clients.commerce.catalog.admin.ProductReservationClient.addProductReservationsClient(_dataViewMode,  productReservations,  skipInventoryCheck);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductReservation productreservation = new ProductReservation();
	 *	Stream stream = productreservation.commitReservations( productReservations);
	 * </code></pre></p>
	 * @param dataViewMode DataViewMode
	 * @param productReservations List of unique identifiers of the reservations to commit.
	 * @return Stream
	 * @see Stream
	 * @see com.mozu.api.contracts.productadmin.ProductReservation
	 */
	public java.io.InputStream commitReservations(List<com.mozu.api.contracts.productadmin.ProductReservation> productReservations) throws Exception
	{
		MozuClient<java.io.InputStream> client = com.mozu.api.clients.commerce.catalog.admin.ProductReservationClient.commitReservationsClient(_dataViewMode,  productReservations);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductReservation productreservation = new ProductReservation();
	 *	CountDownLatch latch = productreservation.commitReservations( productReservations, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param  callback callback handler for asynchronous operations
	 * @param dataViewMode DataViewMode
	 * @param productReservations List of unique identifiers of the reservations to commit.
	 * @return Stream
	 * @see Stream
	 * @see com.mozu.api.contracts.productadmin.ProductReservation
	 */
	public CountDownLatch commitReservationsAsync(List<com.mozu.api.contracts.productadmin.ProductReservation> productReservations, AsyncCallback<java.io.InputStream> callback) throws Exception
	{
		MozuClient<java.io.InputStream> client = com.mozu.api.clients.commerce.catalog.admin.ProductReservationClient.commitReservationsClient(_dataViewMode,  productReservations);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductReservation productreservation = new ProductReservation();
	 *	ProductReservation productReservation = productreservation.updateProductReservations( productReservations);
	 * </code></pre></p>
	 * @param dataViewMode DataViewMode
	 * @param productReservations Properties of the product reservations to update.
	 * @return List<com.mozu.api.contracts.productadmin.ProductReservation>
	 * @see com.mozu.api.contracts.productadmin.ProductReservation
	 * @see com.mozu.api.contracts.productadmin.ProductReservation
	 */
	public List<com.mozu.api.contracts.productadmin.ProductReservation> updateProductReservations(List<com.mozu.api.contracts.productadmin.ProductReservation> productReservations) throws Exception
	{
		return updateProductReservations( productReservations,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductReservation productreservation = new ProductReservation();
	 *	CountDownLatch latch = productreservation.updateProductReservations( productReservations, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param  callback callback handler for asynchronous operations
	 * @param dataViewMode DataViewMode
	 * @param productReservations Properties of the product reservations to update.
	 * @return List<com.mozu.api.contracts.productadmin.ProductReservation>
	 * @see com.mozu.api.contracts.productadmin.ProductReservation
	 * @see com.mozu.api.contracts.productadmin.ProductReservation
	 */
	public CountDownLatch updateProductReservationsAsync(List<com.mozu.api.contracts.productadmin.ProductReservation> productReservations, AsyncCallback<List<com.mozu.api.contracts.productadmin.ProductReservation>> callback) throws Exception
	{
		return updateProductReservationsAsync( productReservations,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductReservation productreservation = new ProductReservation();
	 *	ProductReservation productReservation = productreservation.updateProductReservations( productReservations,  skipInventoryCheck);
	 * </code></pre></p>
	 * @param skipInventoryCheck If true, skip the inventory validation process when updating this product reservation.
	 * @param dataViewMode DataViewMode
	 * @param productReservations Properties of the product reservations to update.
	 * @return List<com.mozu.api.contracts.productadmin.ProductReservation>
	 * @see com.mozu.api.contracts.productadmin.ProductReservation
	 * @see com.mozu.api.contracts.productadmin.ProductReservation
	 */
	public List<com.mozu.api.contracts.productadmin.ProductReservation> updateProductReservations(List<com.mozu.api.contracts.productadmin.ProductReservation> productReservations, Boolean skipInventoryCheck) throws Exception
	{
		MozuClient<List<com.mozu.api.contracts.productadmin.ProductReservation>> client = com.mozu.api.clients.commerce.catalog.admin.ProductReservationClient.updateProductReservationsClient(_dataViewMode,  productReservations,  skipInventoryCheck);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductReservation productreservation = new ProductReservation();
	 *	CountDownLatch latch = productreservation.updateProductReservations( productReservations,  skipInventoryCheck, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param skipInventoryCheck If true, skip the inventory validation process when updating this product reservation.
	 * @param  callback callback handler for asynchronous operations
	 * @param dataViewMode DataViewMode
	 * @param productReservations Properties of the product reservations to update.
	 * @return List<com.mozu.api.contracts.productadmin.ProductReservation>
	 * @see com.mozu.api.contracts.productadmin.ProductReservation
	 * @see com.mozu.api.contracts.productadmin.ProductReservation
	 */
	public CountDownLatch updateProductReservationsAsync(List<com.mozu.api.contracts.productadmin.ProductReservation> productReservations, Boolean skipInventoryCheck, AsyncCallback<List<com.mozu.api.contracts.productadmin.ProductReservation>> callback) throws Exception
	{
		MozuClient<List<com.mozu.api.contracts.productadmin.ProductReservation>> client = com.mozu.api.clients.commerce.catalog.admin.ProductReservationClient.updateProductReservationsClient(_dataViewMode,  productReservations,  skipInventoryCheck);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductReservation productreservation = new ProductReservation();
	 *	Stream stream = productreservation.deleteProductReservation( productReservationId);
	 * </code></pre></p>
	 * @param productReservationId Unique identifier of the reservation.
	 * @param dataViewMode DataViewMode
	 * @return Stream
	 * @see Stream
	 */
	public java.io.InputStream deleteProductReservation(Integer productReservationId) throws Exception
	{
		MozuClient<java.io.InputStream> client = com.mozu.api.clients.commerce.catalog.admin.ProductReservationClient.deleteProductReservationClient(_dataViewMode,  productReservationId);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductReservation productreservation = new ProductReservation();
	 *	CountDownLatch latch = productreservation.deleteProductReservation( productReservationId, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param productReservationId Unique identifier of the reservation.
	 * @param  callback callback handler for asynchronous operations
	 * @param dataViewMode DataViewMode
	 * @return Stream
	 * @see Stream
	 */
	public CountDownLatch deleteProductReservationAsync(Integer productReservationId, AsyncCallback<java.io.InputStream> callback) throws Exception
	{
		MozuClient<java.io.InputStream> client = com.mozu.api.clients.commerce.catalog.admin.ProductReservationClient.deleteProductReservationClient(_dataViewMode,  productReservationId);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

}



