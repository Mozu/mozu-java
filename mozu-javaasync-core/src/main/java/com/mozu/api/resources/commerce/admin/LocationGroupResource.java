/**
 *     This code was auto-generated by a Codezu.     
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
 */
package com.mozu.api.resources.commerce.admin;

import com.mozu.api.ApiContext;
import java.util.List;
import java.util.ArrayList;
import com.mozu.api.MozuClient;
import com.mozu.api.MozuClientFactory;
import com.mozu.api.MozuUrl;
import com.mozu.api.Headers;
import org.joda.time.DateTime;
import com.mozu.api.AsyncCallback;
import java.util.concurrent.CountDownLatch;
import com.mozu.api.security.AuthTicket;
import org.apache.commons.lang.StringUtils;

/** <summary>
 * 
 * </summary>
 */
public class LocationGroupResource {
	///
	/// <see cref="Mozu.Api.ApiContext"/>
	///
	private ApiContext _apiContext;


	public LocationGroupResource(ApiContext apiContext) 
	{
		_apiContext = apiContext;
	}

	
	/**
	 * 
	 * <p><pre><code>
	 *	LocationGroup locationgroup = new LocationGroup();
	 *	LocationGroupCollection locationGroupCollection = locationgroup.getLocationGroups();
	 * </code></pre></p>
	 * @return com.mozu.api.contracts.location.LocationGroupCollection
	 * @see com.mozu.api.contracts.location.LocationGroupCollection
	 */
	public com.mozu.api.contracts.location.LocationGroupCollection getLocationGroups() throws Exception
	{
		return getLocationGroups( null,  null,  null,  null,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	LocationGroup locationgroup = new LocationGroup();
	 *	CountDownLatch latch = locationgroup.getLocationGroups( callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.location.LocationGroupCollection
	 * @see com.mozu.api.contracts.location.LocationGroupCollection
	 */
	public CountDownLatch getLocationGroupsAsync( AsyncCallback<com.mozu.api.contracts.location.LocationGroupCollection> callback) throws Exception
	{
		return getLocationGroupsAsync( null,  null,  null,  null,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	LocationGroup locationgroup = new LocationGroup();
	 *	LocationGroupCollection locationGroupCollection = locationgroup.getLocationGroups( startIndex,  pageSize,  sortBy,  filter,  responseFields);
	 * </code></pre></p>
	 * @param filter 
	 * @param pageSize 
	 * @param responseFields 
	 * @param sortBy 
	 * @param startIndex 
	 * @return com.mozu.api.contracts.location.LocationGroupCollection
	 * @see com.mozu.api.contracts.location.LocationGroupCollection
	 */
	public com.mozu.api.contracts.location.LocationGroupCollection getLocationGroups(Integer startIndex, Integer pageSize, String sortBy, String filter, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.location.LocationGroupCollection> client = com.mozu.api.clients.commerce.admin.LocationGroupClient.getLocationGroupsClient( startIndex,  pageSize,  sortBy,  filter,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	LocationGroup locationgroup = new LocationGroup();
	 *	CountDownLatch latch = locationgroup.getLocationGroups( startIndex,  pageSize,  sortBy,  filter,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param filter 
	 * @param pageSize 
	 * @param responseFields 
	 * @param sortBy 
	 * @param startIndex 
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.location.LocationGroupCollection
	 * @see com.mozu.api.contracts.location.LocationGroupCollection
	 */
	public CountDownLatch getLocationGroupsAsync(Integer startIndex, Integer pageSize, String sortBy, String filter, String responseFields, AsyncCallback<com.mozu.api.contracts.location.LocationGroupCollection> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.location.LocationGroupCollection> client = com.mozu.api.clients.commerce.admin.LocationGroupClient.getLocationGroupsClient( startIndex,  pageSize,  sortBy,  filter,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	LocationGroup locationgroup = new LocationGroup();
	 *	LocationGroup locationGroup = locationgroup.getLocationGroup( locationGroupCode);
	 * </code></pre></p>
	 * @param locationGroupCode 
	 * @return com.mozu.api.contracts.location.LocationGroup
	 * @see com.mozu.api.contracts.location.LocationGroup
	 */
	public com.mozu.api.contracts.location.LocationGroup getLocationGroup(String locationGroupCode) throws Exception
	{
		return getLocationGroup( locationGroupCode,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	LocationGroup locationgroup = new LocationGroup();
	 *	CountDownLatch latch = locationgroup.getLocationGroup( locationGroupCode, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param locationGroupCode 
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.location.LocationGroup
	 * @see com.mozu.api.contracts.location.LocationGroup
	 */
	public CountDownLatch getLocationGroupAsync(String locationGroupCode, AsyncCallback<com.mozu.api.contracts.location.LocationGroup> callback) throws Exception
	{
		return getLocationGroupAsync( locationGroupCode,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	LocationGroup locationgroup = new LocationGroup();
	 *	LocationGroup locationGroup = locationgroup.getLocationGroup( locationGroupCode,  responseFields);
	 * </code></pre></p>
	 * @param locationGroupCode 
	 * @param responseFields 
	 * @return com.mozu.api.contracts.location.LocationGroup
	 * @see com.mozu.api.contracts.location.LocationGroup
	 */
	public com.mozu.api.contracts.location.LocationGroup getLocationGroup(String locationGroupCode, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.location.LocationGroup> client = com.mozu.api.clients.commerce.admin.LocationGroupClient.getLocationGroupClient( locationGroupCode,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	LocationGroup locationgroup = new LocationGroup();
	 *	CountDownLatch latch = locationgroup.getLocationGroup( locationGroupCode,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param locationGroupCode 
	 * @param responseFields 
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.location.LocationGroup
	 * @see com.mozu.api.contracts.location.LocationGroup
	 */
	public CountDownLatch getLocationGroupAsync(String locationGroupCode, String responseFields, AsyncCallback<com.mozu.api.contracts.location.LocationGroup> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.location.LocationGroup> client = com.mozu.api.clients.commerce.admin.LocationGroupClient.getLocationGroupClient( locationGroupCode,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	LocationGroup locationgroup = new LocationGroup();
	 *	LocationGroup locationGroup = locationgroup.addLocationGroup( group);
	 * </code></pre></p>
	 * @param group 
	 * @return com.mozu.api.contracts.location.LocationGroup
	 * @see com.mozu.api.contracts.location.LocationGroup
	 * @see com.mozu.api.contracts.location.LocationGroup
	 */
	public com.mozu.api.contracts.location.LocationGroup addLocationGroup(com.mozu.api.contracts.location.LocationGroup group) throws Exception
	{
		return addLocationGroup( group,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	LocationGroup locationgroup = new LocationGroup();
	 *	CountDownLatch latch = locationgroup.addLocationGroup( group, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param  callback callback handler for asynchronous operations
	 * @param group 
	 * @return com.mozu.api.contracts.location.LocationGroup
	 * @see com.mozu.api.contracts.location.LocationGroup
	 * @see com.mozu.api.contracts.location.LocationGroup
	 */
	public CountDownLatch addLocationGroupAsync(com.mozu.api.contracts.location.LocationGroup group, AsyncCallback<com.mozu.api.contracts.location.LocationGroup> callback) throws Exception
	{
		return addLocationGroupAsync( group,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	LocationGroup locationgroup = new LocationGroup();
	 *	LocationGroup locationGroup = locationgroup.addLocationGroup( group,  responseFields);
	 * </code></pre></p>
	 * @param responseFields 
	 * @param group 
	 * @return com.mozu.api.contracts.location.LocationGroup
	 * @see com.mozu.api.contracts.location.LocationGroup
	 * @see com.mozu.api.contracts.location.LocationGroup
	 */
	public com.mozu.api.contracts.location.LocationGroup addLocationGroup(com.mozu.api.contracts.location.LocationGroup group, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.location.LocationGroup> client = com.mozu.api.clients.commerce.admin.LocationGroupClient.addLocationGroupClient( group,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	LocationGroup locationgroup = new LocationGroup();
	 *	CountDownLatch latch = locationgroup.addLocationGroup( group,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param responseFields 
	 * @param  callback callback handler for asynchronous operations
	 * @param group 
	 * @return com.mozu.api.contracts.location.LocationGroup
	 * @see com.mozu.api.contracts.location.LocationGroup
	 * @see com.mozu.api.contracts.location.LocationGroup
	 */
	public CountDownLatch addLocationGroupAsync(com.mozu.api.contracts.location.LocationGroup group, String responseFields, AsyncCallback<com.mozu.api.contracts.location.LocationGroup> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.location.LocationGroup> client = com.mozu.api.clients.commerce.admin.LocationGroupClient.addLocationGroupClient( group,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	LocationGroup locationgroup = new LocationGroup();
	 *	LocationGroup locationGroup = locationgroup.updateLocationGroup( locationGroup,  locationGroupCode);
	 * </code></pre></p>
	 * @param locationGroupCode 
	 * @param locationGroup 
	 * @return com.mozu.api.contracts.location.LocationGroup
	 * @see com.mozu.api.contracts.location.LocationGroup
	 * @see com.mozu.api.contracts.location.LocationGroup
	 */
	public com.mozu.api.contracts.location.LocationGroup updateLocationGroup(com.mozu.api.contracts.location.LocationGroup locationGroup, String locationGroupCode) throws Exception
	{
		return updateLocationGroup( locationGroup,  locationGroupCode,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	LocationGroup locationgroup = new LocationGroup();
	 *	CountDownLatch latch = locationgroup.updateLocationGroup( locationGroup,  locationGroupCode, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param locationGroupCode 
	 * @param  callback callback handler for asynchronous operations
	 * @param locationGroup 
	 * @return com.mozu.api.contracts.location.LocationGroup
	 * @see com.mozu.api.contracts.location.LocationGroup
	 * @see com.mozu.api.contracts.location.LocationGroup
	 */
	public CountDownLatch updateLocationGroupAsync(com.mozu.api.contracts.location.LocationGroup locationGroup, String locationGroupCode, AsyncCallback<com.mozu.api.contracts.location.LocationGroup> callback) throws Exception
	{
		return updateLocationGroupAsync( locationGroup,  locationGroupCode,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	LocationGroup locationgroup = new LocationGroup();
	 *	LocationGroup locationGroup = locationgroup.updateLocationGroup( locationGroup,  locationGroupCode,  responseFields);
	 * </code></pre></p>
	 * @param locationGroupCode 
	 * @param responseFields 
	 * @param locationGroup 
	 * @return com.mozu.api.contracts.location.LocationGroup
	 * @see com.mozu.api.contracts.location.LocationGroup
	 * @see com.mozu.api.contracts.location.LocationGroup
	 */
	public com.mozu.api.contracts.location.LocationGroup updateLocationGroup(com.mozu.api.contracts.location.LocationGroup locationGroup, String locationGroupCode, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.location.LocationGroup> client = com.mozu.api.clients.commerce.admin.LocationGroupClient.updateLocationGroupClient( locationGroup,  locationGroupCode,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	LocationGroup locationgroup = new LocationGroup();
	 *	CountDownLatch latch = locationgroup.updateLocationGroup( locationGroup,  locationGroupCode,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param locationGroupCode 
	 * @param responseFields 
	 * @param  callback callback handler for asynchronous operations
	 * @param locationGroup 
	 * @return com.mozu.api.contracts.location.LocationGroup
	 * @see com.mozu.api.contracts.location.LocationGroup
	 * @see com.mozu.api.contracts.location.LocationGroup
	 */
	public CountDownLatch updateLocationGroupAsync(com.mozu.api.contracts.location.LocationGroup locationGroup, String locationGroupCode, String responseFields, AsyncCallback<com.mozu.api.contracts.location.LocationGroup> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.location.LocationGroup> client = com.mozu.api.clients.commerce.admin.LocationGroupClient.updateLocationGroupClient( locationGroup,  locationGroupCode,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	LocationGroup locationgroup = new LocationGroup();
	 *	Stream stream = locationgroup.deleteLocationGroup( locationGroupCode);
	 * </code></pre></p>
	 * @param locationGroupCode 
	 * @return Stream
	 * @see Stream
	 */
	public java.io.InputStream deleteLocationGroup(String locationGroupCode) throws Exception
	{
		MozuClient<java.io.InputStream> client = com.mozu.api.clients.commerce.admin.LocationGroupClient.deleteLocationGroupClient( locationGroupCode);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	LocationGroup locationgroup = new LocationGroup();
	 *	CountDownLatch latch = locationgroup.deleteLocationGroup( locationGroupCode, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param locationGroupCode 
	 * @param  callback callback handler for asynchronous operations
	 * @return Stream
	 * @see Stream
	 */
	public CountDownLatch deleteLocationGroupAsync(String locationGroupCode, AsyncCallback<java.io.InputStream> callback) throws Exception
	{
		MozuClient<java.io.InputStream> client = com.mozu.api.clients.commerce.admin.LocationGroupClient.deleteLocationGroupClient( locationGroupCode);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

}



