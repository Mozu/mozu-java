/**
 *     This code was auto-generated by a Codezu.     
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
 */
package com.mozu.api.resources.commerce.catalog.admin.products;

import com.mozu.api.ApiContext;
import java.util.List;
import java.util.ArrayList;
import com.mozu.api.MozuClient;
import com.mozu.api.MozuClientFactory;
import com.mozu.api.MozuUrl;
import com.mozu.api.Headers;
import org.joda.time.DateTime;
import com.mozu.api.AsyncCallback;
import java.util.concurrent.CountDownLatch;
import com.mozu.api.security.AuthTicket;
import org.apache.commons.lang.StringUtils;

import com.mozu.api.DataViewMode;
/** <summary>
 * Use the product variations sub-resource to manage the variations of a product based on its attributes. For example, a t-shirt product could be offered in six variations: Small Black, Medium Black, Large Black, Small White, Medium White, and Large White.
 * </summary>
 */
public class ProductVariationResource {
	///
	/// <see cref="Mozu.Api.ApiContext"/>
	///
	private ApiContext _apiContext;

	private DataViewMode _dataViewMode;

	public ProductVariationResource(ApiContext apiContext) 
	{
		_apiContext = apiContext;
		_dataViewMode = DataViewMode.Live;
	}

	public ProductVariationResource(ApiContext apiContext, DataViewMode dataViewMode) 
	{
		_apiContext = apiContext;
		_dataViewMode = dataViewMode;
	}
		
	/**
	 * 
	 * <p><pre><code>
	 *	ProductVariation productvariation = new ProductVariation();
	 *	ProductVariationDeltaPrice productVariationDeltaPrice = productvariation.getProductVariationLocalizedDeltaPrices( productCode,  variationKey);
	 * </code></pre></p>
	 * @param productCode 
	 * @param variationKey 
	 * @return List<com.mozu.api.contracts.productadmin.ProductVariationDeltaPrice>
	 * @see com.mozu.api.contracts.productadmin.ProductVariationDeltaPrice
	 */
	public List<com.mozu.api.contracts.productadmin.ProductVariationDeltaPrice> getProductVariationLocalizedDeltaPrices(String productCode, String variationKey) throws Exception
	{
		MozuClient<List<com.mozu.api.contracts.productadmin.ProductVariationDeltaPrice>> client = com.mozu.api.clients.commerce.catalog.admin.products.ProductVariationClient.getProductVariationLocalizedDeltaPricesClient(_dataViewMode,  productCode,  variationKey);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductVariation productvariation = new ProductVariation();
	 *	CountDownLatch latch = productvariation.getProductVariationLocalizedDeltaPrices( productCode,  variationKey, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param productCode 
	 * @param variationKey 
	 * @param  callback callback handler for asynchronous operations
	 * @return List<com.mozu.api.contracts.productadmin.ProductVariationDeltaPrice>
	 * @see com.mozu.api.contracts.productadmin.ProductVariationDeltaPrice
	 */
	public CountDownLatch getProductVariationLocalizedDeltaPricesAsync(String productCode, String variationKey, AsyncCallback<List<com.mozu.api.contracts.productadmin.ProductVariationDeltaPrice>> callback) throws Exception
	{
		MozuClient<List<com.mozu.api.contracts.productadmin.ProductVariationDeltaPrice>> client = com.mozu.api.clients.commerce.catalog.admin.products.ProductVariationClient.getProductVariationLocalizedDeltaPricesClient(_dataViewMode,  productCode,  variationKey);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductVariation productvariation = new ProductVariation();
	 *	ProductVariationDeltaPrice productVariationDeltaPrice = productvariation.getProductVariationLocalizedDeltaPrice( productCode,  variationKey,  currencyCode);
	 * </code></pre></p>
	 * @param currencyCode 
	 * @param productCode 
	 * @param variationKey 
	 * @return com.mozu.api.contracts.productadmin.ProductVariationDeltaPrice
	 * @see com.mozu.api.contracts.productadmin.ProductVariationDeltaPrice
	 */
	public com.mozu.api.contracts.productadmin.ProductVariationDeltaPrice getProductVariationLocalizedDeltaPrice(String productCode, String variationKey, String currencyCode) throws Exception
	{
		return getProductVariationLocalizedDeltaPrice( productCode,  variationKey,  currencyCode,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductVariation productvariation = new ProductVariation();
	 *	CountDownLatch latch = productvariation.getProductVariationLocalizedDeltaPrice( productCode,  variationKey,  currencyCode, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param currencyCode 
	 * @param productCode 
	 * @param variationKey 
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.productadmin.ProductVariationDeltaPrice
	 * @see com.mozu.api.contracts.productadmin.ProductVariationDeltaPrice
	 */
	public CountDownLatch getProductVariationLocalizedDeltaPriceAsync(String productCode, String variationKey, String currencyCode, AsyncCallback<com.mozu.api.contracts.productadmin.ProductVariationDeltaPrice> callback) throws Exception
	{
		return getProductVariationLocalizedDeltaPriceAsync( productCode,  variationKey,  currencyCode,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductVariation productvariation = new ProductVariation();
	 *	ProductVariationDeltaPrice productVariationDeltaPrice = productvariation.getProductVariationLocalizedDeltaPrice( productCode,  variationKey,  currencyCode,  responseFields);
	 * </code></pre></p>
	 * @param currencyCode 
	 * @param productCode 
	 * @param responseFields 
	 * @param variationKey 
	 * @return com.mozu.api.contracts.productadmin.ProductVariationDeltaPrice
	 * @see com.mozu.api.contracts.productadmin.ProductVariationDeltaPrice
	 */
	public com.mozu.api.contracts.productadmin.ProductVariationDeltaPrice getProductVariationLocalizedDeltaPrice(String productCode, String variationKey, String currencyCode, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.ProductVariationDeltaPrice> client = com.mozu.api.clients.commerce.catalog.admin.products.ProductVariationClient.getProductVariationLocalizedDeltaPriceClient(_dataViewMode,  productCode,  variationKey,  currencyCode,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductVariation productvariation = new ProductVariation();
	 *	CountDownLatch latch = productvariation.getProductVariationLocalizedDeltaPrice( productCode,  variationKey,  currencyCode,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param currencyCode 
	 * @param productCode 
	 * @param responseFields 
	 * @param variationKey 
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.productadmin.ProductVariationDeltaPrice
	 * @see com.mozu.api.contracts.productadmin.ProductVariationDeltaPrice
	 */
	public CountDownLatch getProductVariationLocalizedDeltaPriceAsync(String productCode, String variationKey, String currencyCode, String responseFields, AsyncCallback<com.mozu.api.contracts.productadmin.ProductVariationDeltaPrice> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.ProductVariationDeltaPrice> client = com.mozu.api.clients.commerce.catalog.admin.products.ProductVariationClient.getProductVariationLocalizedDeltaPriceClient(_dataViewMode,  productCode,  variationKey,  currencyCode,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductVariation productvariation = new ProductVariation();
	 *	ProductVariationFixedPrice productVariationFixedPrice = productvariation.getProductVariationLocalizedPrices( productCode,  variationKey);
	 * </code></pre></p>
	 * @param productCode 
	 * @param variationKey 
	 * @return List<com.mozu.api.contracts.productadmin.ProductVariationFixedPrice>
	 * @see com.mozu.api.contracts.productadmin.ProductVariationFixedPrice
	 */
	public List<com.mozu.api.contracts.productadmin.ProductVariationFixedPrice> getProductVariationLocalizedPrices(String productCode, String variationKey) throws Exception
	{
		MozuClient<List<com.mozu.api.contracts.productadmin.ProductVariationFixedPrice>> client = com.mozu.api.clients.commerce.catalog.admin.products.ProductVariationClient.getProductVariationLocalizedPricesClient(_dataViewMode,  productCode,  variationKey);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductVariation productvariation = new ProductVariation();
	 *	CountDownLatch latch = productvariation.getProductVariationLocalizedPrices( productCode,  variationKey, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param productCode 
	 * @param variationKey 
	 * @param  callback callback handler for asynchronous operations
	 * @return List<com.mozu.api.contracts.productadmin.ProductVariationFixedPrice>
	 * @see com.mozu.api.contracts.productadmin.ProductVariationFixedPrice
	 */
	public CountDownLatch getProductVariationLocalizedPricesAsync(String productCode, String variationKey, AsyncCallback<List<com.mozu.api.contracts.productadmin.ProductVariationFixedPrice>> callback) throws Exception
	{
		MozuClient<List<com.mozu.api.contracts.productadmin.ProductVariationFixedPrice>> client = com.mozu.api.clients.commerce.catalog.admin.products.ProductVariationClient.getProductVariationLocalizedPricesClient(_dataViewMode,  productCode,  variationKey);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductVariation productvariation = new ProductVariation();
	 *	ProductVariationFixedPrice productVariationFixedPrice = productvariation.getProductVariationLocalizedPrice( productCode,  variationKey,  currencyCode);
	 * </code></pre></p>
	 * @param currencyCode 
	 * @param productCode 
	 * @param variationKey 
	 * @return com.mozu.api.contracts.productadmin.ProductVariationFixedPrice
	 * @see com.mozu.api.contracts.productadmin.ProductVariationFixedPrice
	 */
	public com.mozu.api.contracts.productadmin.ProductVariationFixedPrice getProductVariationLocalizedPrice(String productCode, String variationKey, String currencyCode) throws Exception
	{
		return getProductVariationLocalizedPrice( productCode,  variationKey,  currencyCode,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductVariation productvariation = new ProductVariation();
	 *	CountDownLatch latch = productvariation.getProductVariationLocalizedPrice( productCode,  variationKey,  currencyCode, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param currencyCode 
	 * @param productCode 
	 * @param variationKey 
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.productadmin.ProductVariationFixedPrice
	 * @see com.mozu.api.contracts.productadmin.ProductVariationFixedPrice
	 */
	public CountDownLatch getProductVariationLocalizedPriceAsync(String productCode, String variationKey, String currencyCode, AsyncCallback<com.mozu.api.contracts.productadmin.ProductVariationFixedPrice> callback) throws Exception
	{
		return getProductVariationLocalizedPriceAsync( productCode,  variationKey,  currencyCode,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductVariation productvariation = new ProductVariation();
	 *	ProductVariationFixedPrice productVariationFixedPrice = productvariation.getProductVariationLocalizedPrice( productCode,  variationKey,  currencyCode,  responseFields);
	 * </code></pre></p>
	 * @param currencyCode 
	 * @param productCode 
	 * @param responseFields 
	 * @param variationKey 
	 * @return com.mozu.api.contracts.productadmin.ProductVariationFixedPrice
	 * @see com.mozu.api.contracts.productadmin.ProductVariationFixedPrice
	 */
	public com.mozu.api.contracts.productadmin.ProductVariationFixedPrice getProductVariationLocalizedPrice(String productCode, String variationKey, String currencyCode, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.ProductVariationFixedPrice> client = com.mozu.api.clients.commerce.catalog.admin.products.ProductVariationClient.getProductVariationLocalizedPriceClient(_dataViewMode,  productCode,  variationKey,  currencyCode,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductVariation productvariation = new ProductVariation();
	 *	CountDownLatch latch = productvariation.getProductVariationLocalizedPrice( productCode,  variationKey,  currencyCode,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param currencyCode 
	 * @param productCode 
	 * @param responseFields 
	 * @param variationKey 
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.productadmin.ProductVariationFixedPrice
	 * @see com.mozu.api.contracts.productadmin.ProductVariationFixedPrice
	 */
	public CountDownLatch getProductVariationLocalizedPriceAsync(String productCode, String variationKey, String currencyCode, String responseFields, AsyncCallback<com.mozu.api.contracts.productadmin.ProductVariationFixedPrice> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.ProductVariationFixedPrice> client = com.mozu.api.clients.commerce.catalog.admin.products.ProductVariationClient.getProductVariationLocalizedPriceClient(_dataViewMode,  productCode,  variationKey,  currencyCode,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductVariation productvariation = new ProductVariation();
	 *	ProductVariation productVariation = productvariation.getProductVariation( productCode,  variationKey);
	 * </code></pre></p>
	 * @param productCode 
	 * @param variationKey System-generated key that represents the attribute values that uniquely identify a specific product variation.
	 * @return com.mozu.api.contracts.productadmin.ProductVariation
	 * @see com.mozu.api.contracts.productadmin.ProductVariation
	 */
	public com.mozu.api.contracts.productadmin.ProductVariation getProductVariation(String productCode, String variationKey) throws Exception
	{
		return getProductVariation( productCode,  variationKey,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductVariation productvariation = new ProductVariation();
	 *	CountDownLatch latch = productvariation.getProductVariation( productCode,  variationKey, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param productCode 
	 * @param variationKey System-generated key that represents the attribute values that uniquely identify a specific product variation.
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.productadmin.ProductVariation
	 * @see com.mozu.api.contracts.productadmin.ProductVariation
	 */
	public CountDownLatch getProductVariationAsync(String productCode, String variationKey, AsyncCallback<com.mozu.api.contracts.productadmin.ProductVariation> callback) throws Exception
	{
		return getProductVariationAsync( productCode,  variationKey,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductVariation productvariation = new ProductVariation();
	 *	ProductVariation productVariation = productvariation.getProductVariation( productCode,  variationKey,  responseFields);
	 * </code></pre></p>
	 * @param productCode 
	 * @param responseFields 
	 * @param variationKey System-generated key that represents the attribute values that uniquely identify a specific product variation.
	 * @return com.mozu.api.contracts.productadmin.ProductVariation
	 * @see com.mozu.api.contracts.productadmin.ProductVariation
	 */
	public com.mozu.api.contracts.productadmin.ProductVariation getProductVariation(String productCode, String variationKey, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.ProductVariation> client = com.mozu.api.clients.commerce.catalog.admin.products.ProductVariationClient.getProductVariationClient(_dataViewMode,  productCode,  variationKey,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductVariation productvariation = new ProductVariation();
	 *	CountDownLatch latch = productvariation.getProductVariation( productCode,  variationKey,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param productCode 
	 * @param responseFields 
	 * @param variationKey System-generated key that represents the attribute values that uniquely identify a specific product variation.
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.productadmin.ProductVariation
	 * @see com.mozu.api.contracts.productadmin.ProductVariation
	 */
	public CountDownLatch getProductVariationAsync(String productCode, String variationKey, String responseFields, AsyncCallback<com.mozu.api.contracts.productadmin.ProductVariation> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.ProductVariation> client = com.mozu.api.clients.commerce.catalog.admin.products.ProductVariationClient.getProductVariationClient(_dataViewMode,  productCode,  variationKey,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductVariation productvariation = new ProductVariation();
	 *	ProductVariationPagedCollection productVariationPagedCollection = productvariation.getProductVariations( productCode);
	 * </code></pre></p>
	 * @param productCode 
	 * @return com.mozu.api.contracts.productadmin.ProductVariationPagedCollection
	 * @see com.mozu.api.contracts.productadmin.ProductVariationPagedCollection
	 */
	public com.mozu.api.contracts.productadmin.ProductVariationPagedCollection getProductVariations(String productCode) throws Exception
	{
		return getProductVariations( productCode,  null,  null,  null,  null,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductVariation productvariation = new ProductVariation();
	 *	CountDownLatch latch = productvariation.getProductVariations( productCode, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param productCode 
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.productadmin.ProductVariationPagedCollection
	 * @see com.mozu.api.contracts.productadmin.ProductVariationPagedCollection
	 */
	public CountDownLatch getProductVariationsAsync(String productCode, AsyncCallback<com.mozu.api.contracts.productadmin.ProductVariationPagedCollection> callback) throws Exception
	{
		return getProductVariationsAsync( productCode,  null,  null,  null,  null,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductVariation productvariation = new ProductVariation();
	 *	ProductVariationPagedCollection productVariationPagedCollection = productvariation.getProductVariations( productCode,  startIndex,  pageSize,  sortBy,  filter,  responseFields);
	 * </code></pre></p>
	 * @param filter 
	 * @param pageSize 
	 * @param productCode 
	 * @param responseFields 
	 * @param sortBy 
	 * @param startIndex 
	 * @return com.mozu.api.contracts.productadmin.ProductVariationPagedCollection
	 * @see com.mozu.api.contracts.productadmin.ProductVariationPagedCollection
	 */
	public com.mozu.api.contracts.productadmin.ProductVariationPagedCollection getProductVariations(String productCode, Integer startIndex, Integer pageSize, String sortBy, String filter, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.ProductVariationPagedCollection> client = com.mozu.api.clients.commerce.catalog.admin.products.ProductVariationClient.getProductVariationsClient(_dataViewMode,  productCode,  startIndex,  pageSize,  sortBy,  filter,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductVariation productvariation = new ProductVariation();
	 *	CountDownLatch latch = productvariation.getProductVariations( productCode,  startIndex,  pageSize,  sortBy,  filter,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param filter 
	 * @param pageSize 
	 * @param productCode 
	 * @param responseFields 
	 * @param sortBy 
	 * @param startIndex 
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.productadmin.ProductVariationPagedCollection
	 * @see com.mozu.api.contracts.productadmin.ProductVariationPagedCollection
	 */
	public CountDownLatch getProductVariationsAsync(String productCode, Integer startIndex, Integer pageSize, String sortBy, String filter, String responseFields, AsyncCallback<com.mozu.api.contracts.productadmin.ProductVariationPagedCollection> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.ProductVariationPagedCollection> client = com.mozu.api.clients.commerce.catalog.admin.products.ProductVariationClient.getProductVariationsClient(_dataViewMode,  productCode,  startIndex,  pageSize,  sortBy,  filter,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductVariation productvariation = new ProductVariation();
	 *	ProductVariationDeltaPrice productVariationDeltaPrice = productvariation.addProductVariationLocalizedDeltaPrice( localizedDeltaPrice,  productCode,  variationKey);
	 * </code></pre></p>
	 * @param productCode 
	 * @param variationKey 
	 * @param localizedDeltaPrice 
	 * @return com.mozu.api.contracts.productadmin.ProductVariationDeltaPrice
	 * @see com.mozu.api.contracts.productadmin.ProductVariationDeltaPrice
	 * @see com.mozu.api.contracts.productadmin.ProductVariationDeltaPrice
	 */
	public com.mozu.api.contracts.productadmin.ProductVariationDeltaPrice addProductVariationLocalizedDeltaPrice(com.mozu.api.contracts.productadmin.ProductVariationDeltaPrice localizedDeltaPrice, String productCode, String variationKey) throws Exception
	{
		return addProductVariationLocalizedDeltaPrice( localizedDeltaPrice,  productCode,  variationKey,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductVariation productvariation = new ProductVariation();
	 *	CountDownLatch latch = productvariation.addProductVariationLocalizedDeltaPrice( localizedDeltaPrice,  productCode,  variationKey, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param productCode 
	 * @param variationKey 
	 * @param  callback callback handler for asynchronous operations
	 * @param localizedDeltaPrice 
	 * @return com.mozu.api.contracts.productadmin.ProductVariationDeltaPrice
	 * @see com.mozu.api.contracts.productadmin.ProductVariationDeltaPrice
	 * @see com.mozu.api.contracts.productadmin.ProductVariationDeltaPrice
	 */
	public CountDownLatch addProductVariationLocalizedDeltaPriceAsync(com.mozu.api.contracts.productadmin.ProductVariationDeltaPrice localizedDeltaPrice, String productCode, String variationKey, AsyncCallback<com.mozu.api.contracts.productadmin.ProductVariationDeltaPrice> callback) throws Exception
	{
		return addProductVariationLocalizedDeltaPriceAsync( localizedDeltaPrice,  productCode,  variationKey,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductVariation productvariation = new ProductVariation();
	 *	ProductVariationDeltaPrice productVariationDeltaPrice = productvariation.addProductVariationLocalizedDeltaPrice( localizedDeltaPrice,  productCode,  variationKey,  responseFields);
	 * </code></pre></p>
	 * @param productCode 
	 * @param responseFields 
	 * @param variationKey 
	 * @param localizedDeltaPrice 
	 * @return com.mozu.api.contracts.productadmin.ProductVariationDeltaPrice
	 * @see com.mozu.api.contracts.productadmin.ProductVariationDeltaPrice
	 * @see com.mozu.api.contracts.productadmin.ProductVariationDeltaPrice
	 */
	public com.mozu.api.contracts.productadmin.ProductVariationDeltaPrice addProductVariationLocalizedDeltaPrice(com.mozu.api.contracts.productadmin.ProductVariationDeltaPrice localizedDeltaPrice, String productCode, String variationKey, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.ProductVariationDeltaPrice> client = com.mozu.api.clients.commerce.catalog.admin.products.ProductVariationClient.addProductVariationLocalizedDeltaPriceClient(_dataViewMode,  localizedDeltaPrice,  productCode,  variationKey,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductVariation productvariation = new ProductVariation();
	 *	CountDownLatch latch = productvariation.addProductVariationLocalizedDeltaPrice( localizedDeltaPrice,  productCode,  variationKey,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param productCode 
	 * @param responseFields 
	 * @param variationKey 
	 * @param  callback callback handler for asynchronous operations
	 * @param localizedDeltaPrice 
	 * @return com.mozu.api.contracts.productadmin.ProductVariationDeltaPrice
	 * @see com.mozu.api.contracts.productadmin.ProductVariationDeltaPrice
	 * @see com.mozu.api.contracts.productadmin.ProductVariationDeltaPrice
	 */
	public CountDownLatch addProductVariationLocalizedDeltaPriceAsync(com.mozu.api.contracts.productadmin.ProductVariationDeltaPrice localizedDeltaPrice, String productCode, String variationKey, String responseFields, AsyncCallback<com.mozu.api.contracts.productadmin.ProductVariationDeltaPrice> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.ProductVariationDeltaPrice> client = com.mozu.api.clients.commerce.catalog.admin.products.ProductVariationClient.addProductVariationLocalizedDeltaPriceClient(_dataViewMode,  localizedDeltaPrice,  productCode,  variationKey,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductVariation productvariation = new ProductVariation();
	 *	ProductVariationFixedPrice productVariationFixedPrice = productvariation.addProductVariationLocalizedPrice( localizedPrice,  productCode,  variationKey);
	 * </code></pre></p>
	 * @param productCode 
	 * @param variationKey 
	 * @param localizedPrice 
	 * @return com.mozu.api.contracts.productadmin.ProductVariationFixedPrice
	 * @see com.mozu.api.contracts.productadmin.ProductVariationFixedPrice
	 * @see com.mozu.api.contracts.productadmin.ProductVariationFixedPrice
	 */
	public com.mozu.api.contracts.productadmin.ProductVariationFixedPrice addProductVariationLocalizedPrice(com.mozu.api.contracts.productadmin.ProductVariationFixedPrice localizedPrice, String productCode, String variationKey) throws Exception
	{
		return addProductVariationLocalizedPrice( localizedPrice,  productCode,  variationKey,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductVariation productvariation = new ProductVariation();
	 *	CountDownLatch latch = productvariation.addProductVariationLocalizedPrice( localizedPrice,  productCode,  variationKey, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param productCode 
	 * @param variationKey 
	 * @param  callback callback handler for asynchronous operations
	 * @param localizedPrice 
	 * @return com.mozu.api.contracts.productadmin.ProductVariationFixedPrice
	 * @see com.mozu.api.contracts.productadmin.ProductVariationFixedPrice
	 * @see com.mozu.api.contracts.productadmin.ProductVariationFixedPrice
	 */
	public CountDownLatch addProductVariationLocalizedPriceAsync(com.mozu.api.contracts.productadmin.ProductVariationFixedPrice localizedPrice, String productCode, String variationKey, AsyncCallback<com.mozu.api.contracts.productadmin.ProductVariationFixedPrice> callback) throws Exception
	{
		return addProductVariationLocalizedPriceAsync( localizedPrice,  productCode,  variationKey,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductVariation productvariation = new ProductVariation();
	 *	ProductVariationFixedPrice productVariationFixedPrice = productvariation.addProductVariationLocalizedPrice( localizedPrice,  productCode,  variationKey,  responseFields);
	 * </code></pre></p>
	 * @param productCode 
	 * @param responseFields 
	 * @param variationKey 
	 * @param localizedPrice 
	 * @return com.mozu.api.contracts.productadmin.ProductVariationFixedPrice
	 * @see com.mozu.api.contracts.productadmin.ProductVariationFixedPrice
	 * @see com.mozu.api.contracts.productadmin.ProductVariationFixedPrice
	 */
	public com.mozu.api.contracts.productadmin.ProductVariationFixedPrice addProductVariationLocalizedPrice(com.mozu.api.contracts.productadmin.ProductVariationFixedPrice localizedPrice, String productCode, String variationKey, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.ProductVariationFixedPrice> client = com.mozu.api.clients.commerce.catalog.admin.products.ProductVariationClient.addProductVariationLocalizedPriceClient(_dataViewMode,  localizedPrice,  productCode,  variationKey,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductVariation productvariation = new ProductVariation();
	 *	CountDownLatch latch = productvariation.addProductVariationLocalizedPrice( localizedPrice,  productCode,  variationKey,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param productCode 
	 * @param responseFields 
	 * @param variationKey 
	 * @param  callback callback handler for asynchronous operations
	 * @param localizedPrice 
	 * @return com.mozu.api.contracts.productadmin.ProductVariationFixedPrice
	 * @see com.mozu.api.contracts.productadmin.ProductVariationFixedPrice
	 * @see com.mozu.api.contracts.productadmin.ProductVariationFixedPrice
	 */
	public CountDownLatch addProductVariationLocalizedPriceAsync(com.mozu.api.contracts.productadmin.ProductVariationFixedPrice localizedPrice, String productCode, String variationKey, String responseFields, AsyncCallback<com.mozu.api.contracts.productadmin.ProductVariationFixedPrice> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.ProductVariationFixedPrice> client = com.mozu.api.clients.commerce.catalog.admin.products.ProductVariationClient.addProductVariationLocalizedPriceClient(_dataViewMode,  localizedPrice,  productCode,  variationKey,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductVariation productvariation = new ProductVariation();
	 *	ProductVariationDeltaPrice productVariationDeltaPrice = productvariation.updateProductVariationLocalizedDeltaPrices( localizedDeltaPrice,  productCode,  variationKey);
	 * </code></pre></p>
	 * @param productCode 
	 * @param variationKey 
	 * @param localizedDeltaPrice 
	 * @return List<com.mozu.api.contracts.productadmin.ProductVariationDeltaPrice>
	 * @see com.mozu.api.contracts.productadmin.ProductVariationDeltaPrice
	 * @see com.mozu.api.contracts.productadmin.ProductVariationDeltaPrice
	 */
	public List<com.mozu.api.contracts.productadmin.ProductVariationDeltaPrice> updateProductVariationLocalizedDeltaPrices(List<com.mozu.api.contracts.productadmin.ProductVariationDeltaPrice> localizedDeltaPrice, String productCode, String variationKey) throws Exception
	{
		MozuClient<List<com.mozu.api.contracts.productadmin.ProductVariationDeltaPrice>> client = com.mozu.api.clients.commerce.catalog.admin.products.ProductVariationClient.updateProductVariationLocalizedDeltaPricesClient(_dataViewMode,  localizedDeltaPrice,  productCode,  variationKey);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductVariation productvariation = new ProductVariation();
	 *	CountDownLatch latch = productvariation.updateProductVariationLocalizedDeltaPrices( localizedDeltaPrice,  productCode,  variationKey, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param productCode 
	 * @param variationKey 
	 * @param  callback callback handler for asynchronous operations
	 * @param localizedDeltaPrice 
	 * @return List<com.mozu.api.contracts.productadmin.ProductVariationDeltaPrice>
	 * @see com.mozu.api.contracts.productadmin.ProductVariationDeltaPrice
	 * @see com.mozu.api.contracts.productadmin.ProductVariationDeltaPrice
	 */
	public CountDownLatch updateProductVariationLocalizedDeltaPricesAsync(List<com.mozu.api.contracts.productadmin.ProductVariationDeltaPrice> localizedDeltaPrice, String productCode, String variationKey, AsyncCallback<List<com.mozu.api.contracts.productadmin.ProductVariationDeltaPrice>> callback) throws Exception
	{
		MozuClient<List<com.mozu.api.contracts.productadmin.ProductVariationDeltaPrice>> client = com.mozu.api.clients.commerce.catalog.admin.products.ProductVariationClient.updateProductVariationLocalizedDeltaPricesClient(_dataViewMode,  localizedDeltaPrice,  productCode,  variationKey);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductVariation productvariation = new ProductVariation();
	 *	ProductVariationDeltaPrice productVariationDeltaPrice = productvariation.updateProductVariationLocalizedDeltaPrice( localizedDeltaPrice,  productCode,  variationKey,  currencyCode);
	 * </code></pre></p>
	 * @param currencyCode 
	 * @param productCode 
	 * @param variationKey 
	 * @param localizedDeltaPrice 
	 * @return com.mozu.api.contracts.productadmin.ProductVariationDeltaPrice
	 * @see com.mozu.api.contracts.productadmin.ProductVariationDeltaPrice
	 * @see com.mozu.api.contracts.productadmin.ProductVariationDeltaPrice
	 */
	public com.mozu.api.contracts.productadmin.ProductVariationDeltaPrice updateProductVariationLocalizedDeltaPrice(com.mozu.api.contracts.productadmin.ProductVariationDeltaPrice localizedDeltaPrice, String productCode, String variationKey, String currencyCode) throws Exception
	{
		return updateProductVariationLocalizedDeltaPrice( localizedDeltaPrice,  productCode,  variationKey,  currencyCode,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductVariation productvariation = new ProductVariation();
	 *	CountDownLatch latch = productvariation.updateProductVariationLocalizedDeltaPrice( localizedDeltaPrice,  productCode,  variationKey,  currencyCode, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param currencyCode 
	 * @param productCode 
	 * @param variationKey 
	 * @param  callback callback handler for asynchronous operations
	 * @param localizedDeltaPrice 
	 * @return com.mozu.api.contracts.productadmin.ProductVariationDeltaPrice
	 * @see com.mozu.api.contracts.productadmin.ProductVariationDeltaPrice
	 * @see com.mozu.api.contracts.productadmin.ProductVariationDeltaPrice
	 */
	public CountDownLatch updateProductVariationLocalizedDeltaPriceAsync(com.mozu.api.contracts.productadmin.ProductVariationDeltaPrice localizedDeltaPrice, String productCode, String variationKey, String currencyCode, AsyncCallback<com.mozu.api.contracts.productadmin.ProductVariationDeltaPrice> callback) throws Exception
	{
		return updateProductVariationLocalizedDeltaPriceAsync( localizedDeltaPrice,  productCode,  variationKey,  currencyCode,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductVariation productvariation = new ProductVariation();
	 *	ProductVariationDeltaPrice productVariationDeltaPrice = productvariation.updateProductVariationLocalizedDeltaPrice( localizedDeltaPrice,  productCode,  variationKey,  currencyCode,  responseFields);
	 * </code></pre></p>
	 * @param currencyCode 
	 * @param productCode 
	 * @param responseFields 
	 * @param variationKey 
	 * @param localizedDeltaPrice 
	 * @return com.mozu.api.contracts.productadmin.ProductVariationDeltaPrice
	 * @see com.mozu.api.contracts.productadmin.ProductVariationDeltaPrice
	 * @see com.mozu.api.contracts.productadmin.ProductVariationDeltaPrice
	 */
	public com.mozu.api.contracts.productadmin.ProductVariationDeltaPrice updateProductVariationLocalizedDeltaPrice(com.mozu.api.contracts.productadmin.ProductVariationDeltaPrice localizedDeltaPrice, String productCode, String variationKey, String currencyCode, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.ProductVariationDeltaPrice> client = com.mozu.api.clients.commerce.catalog.admin.products.ProductVariationClient.updateProductVariationLocalizedDeltaPriceClient(_dataViewMode,  localizedDeltaPrice,  productCode,  variationKey,  currencyCode,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductVariation productvariation = new ProductVariation();
	 *	CountDownLatch latch = productvariation.updateProductVariationLocalizedDeltaPrice( localizedDeltaPrice,  productCode,  variationKey,  currencyCode,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param currencyCode 
	 * @param productCode 
	 * @param responseFields 
	 * @param variationKey 
	 * @param  callback callback handler for asynchronous operations
	 * @param localizedDeltaPrice 
	 * @return com.mozu.api.contracts.productadmin.ProductVariationDeltaPrice
	 * @see com.mozu.api.contracts.productadmin.ProductVariationDeltaPrice
	 * @see com.mozu.api.contracts.productadmin.ProductVariationDeltaPrice
	 */
	public CountDownLatch updateProductVariationLocalizedDeltaPriceAsync(com.mozu.api.contracts.productadmin.ProductVariationDeltaPrice localizedDeltaPrice, String productCode, String variationKey, String currencyCode, String responseFields, AsyncCallback<com.mozu.api.contracts.productadmin.ProductVariationDeltaPrice> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.ProductVariationDeltaPrice> client = com.mozu.api.clients.commerce.catalog.admin.products.ProductVariationClient.updateProductVariationLocalizedDeltaPriceClient(_dataViewMode,  localizedDeltaPrice,  productCode,  variationKey,  currencyCode,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductVariation productvariation = new ProductVariation();
	 *	ProductVariationFixedPrice productVariationFixedPrice = productvariation.updateProductVariationLocalizedPrices( localizedPrice,  productCode,  variationKey);
	 * </code></pre></p>
	 * @param productCode 
	 * @param variationKey 
	 * @param localizedPrice 
	 * @return List<com.mozu.api.contracts.productadmin.ProductVariationFixedPrice>
	 * @see com.mozu.api.contracts.productadmin.ProductVariationFixedPrice
	 * @see com.mozu.api.contracts.productadmin.ProductVariationFixedPrice
	 */
	public List<com.mozu.api.contracts.productadmin.ProductVariationFixedPrice> updateProductVariationLocalizedPrices(List<com.mozu.api.contracts.productadmin.ProductVariationFixedPrice> localizedPrice, String productCode, String variationKey) throws Exception
	{
		MozuClient<List<com.mozu.api.contracts.productadmin.ProductVariationFixedPrice>> client = com.mozu.api.clients.commerce.catalog.admin.products.ProductVariationClient.updateProductVariationLocalizedPricesClient(_dataViewMode,  localizedPrice,  productCode,  variationKey);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductVariation productvariation = new ProductVariation();
	 *	CountDownLatch latch = productvariation.updateProductVariationLocalizedPrices( localizedPrice,  productCode,  variationKey, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param productCode 
	 * @param variationKey 
	 * @param  callback callback handler for asynchronous operations
	 * @param localizedPrice 
	 * @return List<com.mozu.api.contracts.productadmin.ProductVariationFixedPrice>
	 * @see com.mozu.api.contracts.productadmin.ProductVariationFixedPrice
	 * @see com.mozu.api.contracts.productadmin.ProductVariationFixedPrice
	 */
	public CountDownLatch updateProductVariationLocalizedPricesAsync(List<com.mozu.api.contracts.productadmin.ProductVariationFixedPrice> localizedPrice, String productCode, String variationKey, AsyncCallback<List<com.mozu.api.contracts.productadmin.ProductVariationFixedPrice>> callback) throws Exception
	{
		MozuClient<List<com.mozu.api.contracts.productadmin.ProductVariationFixedPrice>> client = com.mozu.api.clients.commerce.catalog.admin.products.ProductVariationClient.updateProductVariationLocalizedPricesClient(_dataViewMode,  localizedPrice,  productCode,  variationKey);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductVariation productvariation = new ProductVariation();
	 *	ProductVariationFixedPrice productVariationFixedPrice = productvariation.updateProductVariationLocalizedPrice( localizedPrice,  productCode,  variationKey,  currencyCode);
	 * </code></pre></p>
	 * @param currencyCode 
	 * @param productCode 
	 * @param variationKey 
	 * @param localizedPrice 
	 * @return com.mozu.api.contracts.productadmin.ProductVariationFixedPrice
	 * @see com.mozu.api.contracts.productadmin.ProductVariationFixedPrice
	 * @see com.mozu.api.contracts.productadmin.ProductVariationFixedPrice
	 */
	public com.mozu.api.contracts.productadmin.ProductVariationFixedPrice updateProductVariationLocalizedPrice(com.mozu.api.contracts.productadmin.ProductVariationFixedPrice localizedPrice, String productCode, String variationKey, String currencyCode) throws Exception
	{
		return updateProductVariationLocalizedPrice( localizedPrice,  productCode,  variationKey,  currencyCode,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductVariation productvariation = new ProductVariation();
	 *	CountDownLatch latch = productvariation.updateProductVariationLocalizedPrice( localizedPrice,  productCode,  variationKey,  currencyCode, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param currencyCode 
	 * @param productCode 
	 * @param variationKey 
	 * @param  callback callback handler for asynchronous operations
	 * @param localizedPrice 
	 * @return com.mozu.api.contracts.productadmin.ProductVariationFixedPrice
	 * @see com.mozu.api.contracts.productadmin.ProductVariationFixedPrice
	 * @see com.mozu.api.contracts.productadmin.ProductVariationFixedPrice
	 */
	public CountDownLatch updateProductVariationLocalizedPriceAsync(com.mozu.api.contracts.productadmin.ProductVariationFixedPrice localizedPrice, String productCode, String variationKey, String currencyCode, AsyncCallback<com.mozu.api.contracts.productadmin.ProductVariationFixedPrice> callback) throws Exception
	{
		return updateProductVariationLocalizedPriceAsync( localizedPrice,  productCode,  variationKey,  currencyCode,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductVariation productvariation = new ProductVariation();
	 *	ProductVariationFixedPrice productVariationFixedPrice = productvariation.updateProductVariationLocalizedPrice( localizedPrice,  productCode,  variationKey,  currencyCode,  responseFields);
	 * </code></pre></p>
	 * @param currencyCode 
	 * @param productCode 
	 * @param responseFields 
	 * @param variationKey 
	 * @param localizedPrice 
	 * @return com.mozu.api.contracts.productadmin.ProductVariationFixedPrice
	 * @see com.mozu.api.contracts.productadmin.ProductVariationFixedPrice
	 * @see com.mozu.api.contracts.productadmin.ProductVariationFixedPrice
	 */
	public com.mozu.api.contracts.productadmin.ProductVariationFixedPrice updateProductVariationLocalizedPrice(com.mozu.api.contracts.productadmin.ProductVariationFixedPrice localizedPrice, String productCode, String variationKey, String currencyCode, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.ProductVariationFixedPrice> client = com.mozu.api.clients.commerce.catalog.admin.products.ProductVariationClient.updateProductVariationLocalizedPriceClient(_dataViewMode,  localizedPrice,  productCode,  variationKey,  currencyCode,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductVariation productvariation = new ProductVariation();
	 *	CountDownLatch latch = productvariation.updateProductVariationLocalizedPrice( localizedPrice,  productCode,  variationKey,  currencyCode,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param currencyCode 
	 * @param productCode 
	 * @param responseFields 
	 * @param variationKey 
	 * @param  callback callback handler for asynchronous operations
	 * @param localizedPrice 
	 * @return com.mozu.api.contracts.productadmin.ProductVariationFixedPrice
	 * @see com.mozu.api.contracts.productadmin.ProductVariationFixedPrice
	 * @see com.mozu.api.contracts.productadmin.ProductVariationFixedPrice
	 */
	public CountDownLatch updateProductVariationLocalizedPriceAsync(com.mozu.api.contracts.productadmin.ProductVariationFixedPrice localizedPrice, String productCode, String variationKey, String currencyCode, String responseFields, AsyncCallback<com.mozu.api.contracts.productadmin.ProductVariationFixedPrice> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.ProductVariationFixedPrice> client = com.mozu.api.clients.commerce.catalog.admin.products.ProductVariationClient.updateProductVariationLocalizedPriceClient(_dataViewMode,  localizedPrice,  productCode,  variationKey,  currencyCode,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductVariation productvariation = new ProductVariation();
	 *	ProductVariation productVariation = productvariation.updateProductVariation( productVariation,  productCode,  variationKey);
	 * </code></pre></p>
	 * @param productCode 
	 * @param variationKey System-generated key that represents the attribute values that uniquely identify a specific product variation.
	 * @param productVariation Wrapper for the properties of the specified product variation.
	 * @return com.mozu.api.contracts.productadmin.ProductVariation
	 * @see com.mozu.api.contracts.productadmin.ProductVariation
	 * @see com.mozu.api.contracts.productadmin.ProductVariation
	 */
	public com.mozu.api.contracts.productadmin.ProductVariation updateProductVariation(com.mozu.api.contracts.productadmin.ProductVariation productVariation, String productCode, String variationKey) throws Exception
	{
		return updateProductVariation( productVariation,  productCode,  variationKey,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductVariation productvariation = new ProductVariation();
	 *	CountDownLatch latch = productvariation.updateProductVariation( productVariation,  productCode,  variationKey, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param productCode 
	 * @param variationKey System-generated key that represents the attribute values that uniquely identify a specific product variation.
	 * @param  callback callback handler for asynchronous operations
	 * @param productVariation Wrapper for the properties of the specified product variation.
	 * @return com.mozu.api.contracts.productadmin.ProductVariation
	 * @see com.mozu.api.contracts.productadmin.ProductVariation
	 * @see com.mozu.api.contracts.productadmin.ProductVariation
	 */
	public CountDownLatch updateProductVariationAsync(com.mozu.api.contracts.productadmin.ProductVariation productVariation, String productCode, String variationKey, AsyncCallback<com.mozu.api.contracts.productadmin.ProductVariation> callback) throws Exception
	{
		return updateProductVariationAsync( productVariation,  productCode,  variationKey,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductVariation productvariation = new ProductVariation();
	 *	ProductVariation productVariation = productvariation.updateProductVariation( productVariation,  productCode,  variationKey,  responseFields);
	 * </code></pre></p>
	 * @param productCode 
	 * @param responseFields 
	 * @param variationKey System-generated key that represents the attribute values that uniquely identify a specific product variation.
	 * @param productVariation Wrapper for the properties of the specified product variation.
	 * @return com.mozu.api.contracts.productadmin.ProductVariation
	 * @see com.mozu.api.contracts.productadmin.ProductVariation
	 * @see com.mozu.api.contracts.productadmin.ProductVariation
	 */
	public com.mozu.api.contracts.productadmin.ProductVariation updateProductVariation(com.mozu.api.contracts.productadmin.ProductVariation productVariation, String productCode, String variationKey, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.ProductVariation> client = com.mozu.api.clients.commerce.catalog.admin.products.ProductVariationClient.updateProductVariationClient(_dataViewMode,  productVariation,  productCode,  variationKey,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductVariation productvariation = new ProductVariation();
	 *	CountDownLatch latch = productvariation.updateProductVariation( productVariation,  productCode,  variationKey,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param productCode 
	 * @param responseFields 
	 * @param variationKey System-generated key that represents the attribute values that uniquely identify a specific product variation.
	 * @param  callback callback handler for asynchronous operations
	 * @param productVariation Wrapper for the properties of the specified product variation.
	 * @return com.mozu.api.contracts.productadmin.ProductVariation
	 * @see com.mozu.api.contracts.productadmin.ProductVariation
	 * @see com.mozu.api.contracts.productadmin.ProductVariation
	 */
	public CountDownLatch updateProductVariationAsync(com.mozu.api.contracts.productadmin.ProductVariation productVariation, String productCode, String variationKey, String responseFields, AsyncCallback<com.mozu.api.contracts.productadmin.ProductVariation> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.ProductVariation> client = com.mozu.api.clients.commerce.catalog.admin.products.ProductVariationClient.updateProductVariationClient(_dataViewMode,  productVariation,  productCode,  variationKey,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductVariation productvariation = new ProductVariation();
	 *	ProductVariationCollection productVariationCollection = productvariation.updateProductVariations( productVariations,  productCode);
	 * </code></pre></p>
	 * @param productCode 
	 * @param productVariations Wrapper for the collection of variations configured for the specified product code.
	 * @return com.mozu.api.contracts.productadmin.ProductVariationCollection
	 * @see com.mozu.api.contracts.productadmin.ProductVariationCollection
	 * @see com.mozu.api.contracts.productadmin.ProductVariationCollection
	 */
	public com.mozu.api.contracts.productadmin.ProductVariationCollection updateProductVariations(com.mozu.api.contracts.productadmin.ProductVariationCollection productVariations, String productCode) throws Exception
	{
		return updateProductVariations( productVariations,  productCode,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductVariation productvariation = new ProductVariation();
	 *	CountDownLatch latch = productvariation.updateProductVariations( productVariations,  productCode, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param productCode 
	 * @param  callback callback handler for asynchronous operations
	 * @param productVariations Wrapper for the collection of variations configured for the specified product code.
	 * @return com.mozu.api.contracts.productadmin.ProductVariationCollection
	 * @see com.mozu.api.contracts.productadmin.ProductVariationCollection
	 * @see com.mozu.api.contracts.productadmin.ProductVariationCollection
	 */
	public CountDownLatch updateProductVariationsAsync(com.mozu.api.contracts.productadmin.ProductVariationCollection productVariations, String productCode, AsyncCallback<com.mozu.api.contracts.productadmin.ProductVariationCollection> callback) throws Exception
	{
		return updateProductVariationsAsync( productVariations,  productCode,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductVariation productvariation = new ProductVariation();
	 *	ProductVariationCollection productVariationCollection = productvariation.updateProductVariations( productVariations,  productCode,  responseFields);
	 * </code></pre></p>
	 * @param productCode 
	 * @param responseFields 
	 * @param productVariations Wrapper for the collection of variations configured for the specified product code.
	 * @return com.mozu.api.contracts.productadmin.ProductVariationCollection
	 * @see com.mozu.api.contracts.productadmin.ProductVariationCollection
	 * @see com.mozu.api.contracts.productadmin.ProductVariationCollection
	 */
	public com.mozu.api.contracts.productadmin.ProductVariationCollection updateProductVariations(com.mozu.api.contracts.productadmin.ProductVariationCollection productVariations, String productCode, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.ProductVariationCollection> client = com.mozu.api.clients.commerce.catalog.admin.products.ProductVariationClient.updateProductVariationsClient(_dataViewMode,  productVariations,  productCode,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductVariation productvariation = new ProductVariation();
	 *	CountDownLatch latch = productvariation.updateProductVariations( productVariations,  productCode,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param productCode 
	 * @param responseFields 
	 * @param  callback callback handler for asynchronous operations
	 * @param productVariations Wrapper for the collection of variations configured for the specified product code.
	 * @return com.mozu.api.contracts.productadmin.ProductVariationCollection
	 * @see com.mozu.api.contracts.productadmin.ProductVariationCollection
	 * @see com.mozu.api.contracts.productadmin.ProductVariationCollection
	 */
	public CountDownLatch updateProductVariationsAsync(com.mozu.api.contracts.productadmin.ProductVariationCollection productVariations, String productCode, String responseFields, AsyncCallback<com.mozu.api.contracts.productadmin.ProductVariationCollection> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.ProductVariationCollection> client = com.mozu.api.clients.commerce.catalog.admin.products.ProductVariationClient.updateProductVariationsClient(_dataViewMode,  productVariations,  productCode,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductVariation productvariation = new ProductVariation();
	 *	productvariation.deleteProductVariation( productCode,  variationKey);
	 * </code></pre></p>
	 * @param productCode 
	 * @param variationKey System-generated key that represents the attribute values that uniquely identify a specific product variation.
	 * @return 
	 */
	public void deleteProductVariation(String productCode, String variationKey) throws Exception
	{
		MozuClient client = com.mozu.api.clients.commerce.catalog.admin.products.ProductVariationClient.deleteProductVariationClient(_dataViewMode,  productCode,  variationKey);
		client.setContext(_apiContext);
		client.executeRequest();
		client.cleanupHttpConnection();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductVariation productvariation = new ProductVariation();
	 *	productvariation.deleteProductVariationLocalizedDeltaPrice( productCode,  variationKey,  currencyCode);
	 * </code></pre></p>
	 * @param currencyCode 
	 * @param productCode 
	 * @param variationKey 
	 * @return 
	 */
	public void deleteProductVariationLocalizedDeltaPrice(String productCode, String variationKey, String currencyCode) throws Exception
	{
		MozuClient client = com.mozu.api.clients.commerce.catalog.admin.products.ProductVariationClient.deleteProductVariationLocalizedDeltaPriceClient(_dataViewMode,  productCode,  variationKey,  currencyCode);
		client.setContext(_apiContext);
		client.executeRequest();
		client.cleanupHttpConnection();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductVariation productvariation = new ProductVariation();
	 *	productvariation.deleteProductVariationLocalizedPrice( productCode,  variationKey,  currencyCode);
	 * </code></pre></p>
	 * @param currencyCode 
	 * @param productCode 
	 * @param variationKey 
	 * @return 
	 */
	public void deleteProductVariationLocalizedPrice(String productCode, String variationKey, String currencyCode) throws Exception
	{
		MozuClient client = com.mozu.api.clients.commerce.catalog.admin.products.ProductVariationClient.deleteProductVariationLocalizedPriceClient(_dataViewMode,  productCode,  variationKey,  currencyCode);
		client.setContext(_apiContext);
		client.executeRequest();
		client.cleanupHttpConnection();

	}

}



