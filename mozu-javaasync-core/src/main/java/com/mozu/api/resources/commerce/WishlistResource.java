/**
 *     This code was auto-generated by a Codezu.     
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
 */
package com.mozu.api.resources.commerce;

import com.mozu.api.ApiContext;
import java.util.List;
import java.util.ArrayList;
import com.mozu.api.MozuClient;
import com.mozu.api.MozuClientFactory;
import com.mozu.api.MozuUrl;
import com.mozu.api.Headers;
import org.joda.time.DateTime;
import com.mozu.api.AsyncCallback;
import java.util.concurrent.CountDownLatch;
import com.mozu.api.security.AuthTicket;
import org.apache.commons.lang.StringUtils;

/** <summary>
 * Use the Wish Lists resource to manage the shopper wish lists of products associated with a customer account. Although customer accounts are managed at the tenant level, the system stores shopper wish lists at the site level. This enables the same customer to have wish lists for each of a merchant's sites. Use the Wish List Items resource to manage items in a wish list.
 * </summary>
 */
public class WishlistResource {
	///
	/// <see cref="Mozu.Api.ApiContext"/>
	///
	private ApiContext _apiContext;


	public WishlistResource(ApiContext apiContext) 
	{
		_apiContext = apiContext;
	}

	
	/**
	 * 
	 * <p><pre><code>
	 *	Wishlist wishlist = new Wishlist();
	 *	WishlistCollection wishlistCollection = wishlist.getWishlists();
	 * </code></pre></p>
	 * @return com.mozu.api.contracts.commerceruntime.wishlists.WishlistCollection
	 * @see com.mozu.api.contracts.commerceruntime.wishlists.WishlistCollection
	 */
	public com.mozu.api.contracts.commerceruntime.wishlists.WishlistCollection getWishlists() throws Exception
	{
		return getWishlists( null,  null,  null,  null,  null,  null,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	Wishlist wishlist = new Wishlist();
	 *	CountDownLatch latch = wishlist.getWishlists( callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.commerceruntime.wishlists.WishlistCollection
	 * @see com.mozu.api.contracts.commerceruntime.wishlists.WishlistCollection
	 */
	public CountDownLatch getWishlistsAsync( AsyncCallback<com.mozu.api.contracts.commerceruntime.wishlists.WishlistCollection> callback) throws Exception
	{
		return getWishlistsAsync( null,  null,  null,  null,  null,  null,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	Wishlist wishlist = new Wishlist();
	 *	WishlistCollection wishlistCollection = wishlist.getWishlists( startIndex,  pageSize,  sortBy,  filter,  q,  qLimit,  responseFields);
	 * </code></pre></p>
	 * @param filter 
	 * @param pageSize 
	 * @param q A list of search terms to use in the query when searching across wish list name. Separate multiple search terms with a space character.
	 * @param qLimit The maximum number of search results to return in the response. You can limit any range between 1-100.
	 * @param responseFields 
	 * @param sortBy 
	 * @param startIndex 
	 * @return com.mozu.api.contracts.commerceruntime.wishlists.WishlistCollection
	 * @see com.mozu.api.contracts.commerceruntime.wishlists.WishlistCollection
	 */
	public com.mozu.api.contracts.commerceruntime.wishlists.WishlistCollection getWishlists(Integer startIndex, Integer pageSize, String sortBy, String filter, String q, Integer qLimit, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.wishlists.WishlistCollection> client = com.mozu.api.clients.commerce.WishlistClient.getWishlistsClient( startIndex,  pageSize,  sortBy,  filter,  q,  qLimit,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Wishlist wishlist = new Wishlist();
	 *	CountDownLatch latch = wishlist.getWishlists( startIndex,  pageSize,  sortBy,  filter,  q,  qLimit,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param filter 
	 * @param pageSize 
	 * @param q A list of search terms to use in the query when searching across wish list name. Separate multiple search terms with a space character.
	 * @param qLimit The maximum number of search results to return in the response. You can limit any range between 1-100.
	 * @param responseFields 
	 * @param sortBy 
	 * @param startIndex 
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.commerceruntime.wishlists.WishlistCollection
	 * @see com.mozu.api.contracts.commerceruntime.wishlists.WishlistCollection
	 */
	public CountDownLatch getWishlistsAsync(Integer startIndex, Integer pageSize, String sortBy, String filter, String q, Integer qLimit, String responseFields, AsyncCallback<com.mozu.api.contracts.commerceruntime.wishlists.WishlistCollection> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.wishlists.WishlistCollection> client = com.mozu.api.clients.commerce.WishlistClient.getWishlistsClient( startIndex,  pageSize,  sortBy,  filter,  q,  qLimit,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Wishlist wishlist = new Wishlist();
	 *	Wishlist wishlist = wishlist.getWishlist( wishlistId);
	 * </code></pre></p>
	 * @param wishlistId Unique identifier of the shopper wish list to retrieve.
	 * @return com.mozu.api.contracts.commerceruntime.wishlists.Wishlist
	 * @see com.mozu.api.contracts.commerceruntime.wishlists.Wishlist
	 */
	public com.mozu.api.contracts.commerceruntime.wishlists.Wishlist getWishlist(String wishlistId) throws Exception
	{
		return getWishlist( wishlistId,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	Wishlist wishlist = new Wishlist();
	 *	CountDownLatch latch = wishlist.getWishlist( wishlistId, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param wishlistId Unique identifier of the shopper wish list to retrieve.
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.commerceruntime.wishlists.Wishlist
	 * @see com.mozu.api.contracts.commerceruntime.wishlists.Wishlist
	 */
	public CountDownLatch getWishlistAsync(String wishlistId, AsyncCallback<com.mozu.api.contracts.commerceruntime.wishlists.Wishlist> callback) throws Exception
	{
		return getWishlistAsync( wishlistId,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	Wishlist wishlist = new Wishlist();
	 *	Wishlist wishlist = wishlist.getWishlist( wishlistId,  responseFields);
	 * </code></pre></p>
	 * @param responseFields 
	 * @param wishlistId Unique identifier of the shopper wish list to retrieve.
	 * @return com.mozu.api.contracts.commerceruntime.wishlists.Wishlist
	 * @see com.mozu.api.contracts.commerceruntime.wishlists.Wishlist
	 */
	public com.mozu.api.contracts.commerceruntime.wishlists.Wishlist getWishlist(String wishlistId, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.wishlists.Wishlist> client = com.mozu.api.clients.commerce.WishlistClient.getWishlistClient( wishlistId,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Wishlist wishlist = new Wishlist();
	 *	CountDownLatch latch = wishlist.getWishlist( wishlistId,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param responseFields 
	 * @param wishlistId Unique identifier of the shopper wish list to retrieve.
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.commerceruntime.wishlists.Wishlist
	 * @see com.mozu.api.contracts.commerceruntime.wishlists.Wishlist
	 */
	public CountDownLatch getWishlistAsync(String wishlistId, String responseFields, AsyncCallback<com.mozu.api.contracts.commerceruntime.wishlists.Wishlist> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.wishlists.Wishlist> client = com.mozu.api.clients.commerce.WishlistClient.getWishlistClient( wishlistId,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Wishlist wishlist = new Wishlist();
	 *	Wishlist wishlist = wishlist.getWishlistByName( customerAccountId,  wishlistName);
	 * </code></pre></p>
	 * @param customerAccountId The unique identifier of the customer account for which to retrieve wish lists.
	 * @param wishlistName The name of the wish list to retrieve.
	 * @return com.mozu.api.contracts.commerceruntime.wishlists.Wishlist
	 * @see com.mozu.api.contracts.commerceruntime.wishlists.Wishlist
	 */
	public com.mozu.api.contracts.commerceruntime.wishlists.Wishlist getWishlistByName(Integer customerAccountId, String wishlistName) throws Exception
	{
		return getWishlistByName( customerAccountId,  wishlistName,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	Wishlist wishlist = new Wishlist();
	 *	CountDownLatch latch = wishlist.getWishlistByName( customerAccountId,  wishlistName, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param customerAccountId The unique identifier of the customer account for which to retrieve wish lists.
	 * @param wishlistName The name of the wish list to retrieve.
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.commerceruntime.wishlists.Wishlist
	 * @see com.mozu.api.contracts.commerceruntime.wishlists.Wishlist
	 */
	public CountDownLatch getWishlistByNameAsync(Integer customerAccountId, String wishlistName, AsyncCallback<com.mozu.api.contracts.commerceruntime.wishlists.Wishlist> callback) throws Exception
	{
		return getWishlistByNameAsync( customerAccountId,  wishlistName,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	Wishlist wishlist = new Wishlist();
	 *	Wishlist wishlist = wishlist.getWishlistByName( customerAccountId,  wishlistName,  responseFields);
	 * </code></pre></p>
	 * @param customerAccountId The unique identifier of the customer account for which to retrieve wish lists.
	 * @param responseFields 
	 * @param wishlistName The name of the wish list to retrieve.
	 * @return com.mozu.api.contracts.commerceruntime.wishlists.Wishlist
	 * @see com.mozu.api.contracts.commerceruntime.wishlists.Wishlist
	 */
	public com.mozu.api.contracts.commerceruntime.wishlists.Wishlist getWishlistByName(Integer customerAccountId, String wishlistName, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.wishlists.Wishlist> client = com.mozu.api.clients.commerce.WishlistClient.getWishlistByNameClient( customerAccountId,  wishlistName,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Wishlist wishlist = new Wishlist();
	 *	CountDownLatch latch = wishlist.getWishlistByName( customerAccountId,  wishlistName,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param customerAccountId The unique identifier of the customer account for which to retrieve wish lists.
	 * @param responseFields 
	 * @param wishlistName The name of the wish list to retrieve.
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.commerceruntime.wishlists.Wishlist
	 * @see com.mozu.api.contracts.commerceruntime.wishlists.Wishlist
	 */
	public CountDownLatch getWishlistByNameAsync(Integer customerAccountId, String wishlistName, String responseFields, AsyncCallback<com.mozu.api.contracts.commerceruntime.wishlists.Wishlist> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.wishlists.Wishlist> client = com.mozu.api.clients.commerce.WishlistClient.getWishlistByNameClient( customerAccountId,  wishlistName,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Wishlist wishlist = new Wishlist();
	 *	Wishlist wishlist = wishlist.createWishlist( wishlist);
	 * </code></pre></p>
	 * @param wishlist Properties of the wish list to create.
	 * @return com.mozu.api.contracts.commerceruntime.wishlists.Wishlist
	 * @see com.mozu.api.contracts.commerceruntime.wishlists.Wishlist
	 * @see com.mozu.api.contracts.commerceruntime.wishlists.Wishlist
	 */
	public com.mozu.api.contracts.commerceruntime.wishlists.Wishlist createWishlist(com.mozu.api.contracts.commerceruntime.wishlists.Wishlist wishlist) throws Exception
	{
		return createWishlist( wishlist,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	Wishlist wishlist = new Wishlist();
	 *	CountDownLatch latch = wishlist.createWishlist( wishlist, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param  callback callback handler for asynchronous operations
	 * @param wishlist Properties of the wish list to create.
	 * @return com.mozu.api.contracts.commerceruntime.wishlists.Wishlist
	 * @see com.mozu.api.contracts.commerceruntime.wishlists.Wishlist
	 * @see com.mozu.api.contracts.commerceruntime.wishlists.Wishlist
	 */
	public CountDownLatch createWishlistAsync(com.mozu.api.contracts.commerceruntime.wishlists.Wishlist wishlist, AsyncCallback<com.mozu.api.contracts.commerceruntime.wishlists.Wishlist> callback) throws Exception
	{
		return createWishlistAsync( wishlist,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	Wishlist wishlist = new Wishlist();
	 *	Wishlist wishlist = wishlist.createWishlist( wishlist,  responseFields);
	 * </code></pre></p>
	 * @param responseFields 
	 * @param wishlist Properties of the wish list to create.
	 * @return com.mozu.api.contracts.commerceruntime.wishlists.Wishlist
	 * @see com.mozu.api.contracts.commerceruntime.wishlists.Wishlist
	 * @see com.mozu.api.contracts.commerceruntime.wishlists.Wishlist
	 */
	public com.mozu.api.contracts.commerceruntime.wishlists.Wishlist createWishlist(com.mozu.api.contracts.commerceruntime.wishlists.Wishlist wishlist, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.wishlists.Wishlist> client = com.mozu.api.clients.commerce.WishlistClient.createWishlistClient( wishlist,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Wishlist wishlist = new Wishlist();
	 *	CountDownLatch latch = wishlist.createWishlist( wishlist,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param responseFields 
	 * @param  callback callback handler for asynchronous operations
	 * @param wishlist Properties of the wish list to create.
	 * @return com.mozu.api.contracts.commerceruntime.wishlists.Wishlist
	 * @see com.mozu.api.contracts.commerceruntime.wishlists.Wishlist
	 * @see com.mozu.api.contracts.commerceruntime.wishlists.Wishlist
	 */
	public CountDownLatch createWishlistAsync(com.mozu.api.contracts.commerceruntime.wishlists.Wishlist wishlist, String responseFields, AsyncCallback<com.mozu.api.contracts.commerceruntime.wishlists.Wishlist> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.wishlists.Wishlist> client = com.mozu.api.clients.commerce.WishlistClient.createWishlistClient( wishlist,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Wishlist wishlist = new Wishlist();
	 *	Wishlist wishlist = wishlist.updateWishlist( wishlist,  wishlistId);
	 * </code></pre></p>
	 * @param wishlistId Unique identifier of the shopper wish list to update.
	 * @param wishlist Properties of the shopper wish list to update.
	 * @return com.mozu.api.contracts.commerceruntime.wishlists.Wishlist
	 * @see com.mozu.api.contracts.commerceruntime.wishlists.Wishlist
	 * @see com.mozu.api.contracts.commerceruntime.wishlists.Wishlist
	 */
	public com.mozu.api.contracts.commerceruntime.wishlists.Wishlist updateWishlist(com.mozu.api.contracts.commerceruntime.wishlists.Wishlist wishlist, String wishlistId) throws Exception
	{
		return updateWishlist( wishlist,  wishlistId,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	Wishlist wishlist = new Wishlist();
	 *	CountDownLatch latch = wishlist.updateWishlist( wishlist,  wishlistId, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param wishlistId Unique identifier of the shopper wish list to update.
	 * @param  callback callback handler for asynchronous operations
	 * @param wishlist Properties of the shopper wish list to update.
	 * @return com.mozu.api.contracts.commerceruntime.wishlists.Wishlist
	 * @see com.mozu.api.contracts.commerceruntime.wishlists.Wishlist
	 * @see com.mozu.api.contracts.commerceruntime.wishlists.Wishlist
	 */
	public CountDownLatch updateWishlistAsync(com.mozu.api.contracts.commerceruntime.wishlists.Wishlist wishlist, String wishlistId, AsyncCallback<com.mozu.api.contracts.commerceruntime.wishlists.Wishlist> callback) throws Exception
	{
		return updateWishlistAsync( wishlist,  wishlistId,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	Wishlist wishlist = new Wishlist();
	 *	Wishlist wishlist = wishlist.updateWishlist( wishlist,  wishlistId,  responseFields);
	 * </code></pre></p>
	 * @param responseFields 
	 * @param wishlistId Unique identifier of the shopper wish list to update.
	 * @param wishlist Properties of the shopper wish list to update.
	 * @return com.mozu.api.contracts.commerceruntime.wishlists.Wishlist
	 * @see com.mozu.api.contracts.commerceruntime.wishlists.Wishlist
	 * @see com.mozu.api.contracts.commerceruntime.wishlists.Wishlist
	 */
	public com.mozu.api.contracts.commerceruntime.wishlists.Wishlist updateWishlist(com.mozu.api.contracts.commerceruntime.wishlists.Wishlist wishlist, String wishlistId, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.wishlists.Wishlist> client = com.mozu.api.clients.commerce.WishlistClient.updateWishlistClient( wishlist,  wishlistId,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Wishlist wishlist = new Wishlist();
	 *	CountDownLatch latch = wishlist.updateWishlist( wishlist,  wishlistId,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param responseFields 
	 * @param wishlistId Unique identifier of the shopper wish list to update.
	 * @param  callback callback handler for asynchronous operations
	 * @param wishlist Properties of the shopper wish list to update.
	 * @return com.mozu.api.contracts.commerceruntime.wishlists.Wishlist
	 * @see com.mozu.api.contracts.commerceruntime.wishlists.Wishlist
	 * @see com.mozu.api.contracts.commerceruntime.wishlists.Wishlist
	 */
	public CountDownLatch updateWishlistAsync(com.mozu.api.contracts.commerceruntime.wishlists.Wishlist wishlist, String wishlistId, String responseFields, AsyncCallback<com.mozu.api.contracts.commerceruntime.wishlists.Wishlist> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.wishlists.Wishlist> client = com.mozu.api.clients.commerce.WishlistClient.updateWishlistClient( wishlist,  wishlistId,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Wishlist wishlist = new Wishlist();
	 *	Stream stream = wishlist.deleteWishlist( wishlistId);
	 * </code></pre></p>
	 * @param wishlistId Unique identifier of the wish list to delete.
	 * @return Stream
	 * @see Stream
	 */
	public java.io.InputStream deleteWishlist(String wishlistId) throws Exception
	{
		MozuClient<java.io.InputStream> client = com.mozu.api.clients.commerce.WishlistClient.deleteWishlistClient( wishlistId);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Wishlist wishlist = new Wishlist();
	 *	CountDownLatch latch = wishlist.deleteWishlist( wishlistId, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param wishlistId Unique identifier of the wish list to delete.
	 * @param  callback callback handler for asynchronous operations
	 * @return Stream
	 * @see Stream
	 */
	public CountDownLatch deleteWishlistAsync(String wishlistId, AsyncCallback<java.io.InputStream> callback) throws Exception
	{
		MozuClient<java.io.InputStream> client = com.mozu.api.clients.commerce.WishlistClient.deleteWishlistClient( wishlistId);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

}



