/**
 *     This code was auto-generated by a Codezu.     
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
 */
package com.mozu.api.resources.event.push;

import com.mozu.api.ApiContext;
import java.util.List;
import java.util.ArrayList;
import com.mozu.api.MozuClient;
import com.mozu.api.MozuClientFactory;
import com.mozu.api.MozuUrl;
import com.mozu.api.Headers;
import org.joda.time.DateTime;
import com.mozu.api.AsyncCallback;
import java.util.concurrent.CountDownLatch;
import com.mozu.api.security.AuthTicket;
import org.apache.commons.lang.StringUtils;

/** <summary>
 * 
 * </summary>
 */
public class SubscriptionResource {
	///
	/// <see cref="Mozu.Api.ApiContext"/>
	///
	private ApiContext _apiContext;


	public SubscriptionResource(ApiContext apiContext) 
	{
		_apiContext = apiContext;
	}

	
	/**
	 * 
	 * <p><pre><code>
	 *	Subscription subscription = new Subscription();
	 *	SubscriptionCollection subscriptionCollection = subscription.getSubscriptions();
	 * </code></pre></p>
	 * @return com.mozu.api.contracts.event.SubscriptionCollection
	 * @see com.mozu.api.contracts.event.SubscriptionCollection
	 */
	public com.mozu.api.contracts.event.SubscriptionCollection getSubscriptions() throws Exception
	{
		return getSubscriptions( null,  null,  null,  null,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	Subscription subscription = new Subscription();
	 *	CountDownLatch latch = subscription.getSubscriptions( callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.event.SubscriptionCollection
	 * @see com.mozu.api.contracts.event.SubscriptionCollection
	 */
	public CountDownLatch getSubscriptionsAsync( AsyncCallback<com.mozu.api.contracts.event.SubscriptionCollection> callback) throws Exception
	{
		return getSubscriptionsAsync( null,  null,  null,  null,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	Subscription subscription = new Subscription();
	 *	SubscriptionCollection subscriptionCollection = subscription.getSubscriptions( startIndex,  pageSize,  sortBy,  filter,  responseFields);
	 * </code></pre></p>
	 * @param filter 
	 * @param pageSize 
	 * @param responseFields 
	 * @param sortBy 
	 * @param startIndex 
	 * @return com.mozu.api.contracts.event.SubscriptionCollection
	 * @see com.mozu.api.contracts.event.SubscriptionCollection
	 */
	public com.mozu.api.contracts.event.SubscriptionCollection getSubscriptions(Integer startIndex, Integer pageSize, String sortBy, String filter, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.event.SubscriptionCollection> client = com.mozu.api.clients.event.push.SubscriptionClient.getSubscriptionsClient( startIndex,  pageSize,  sortBy,  filter,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Subscription subscription = new Subscription();
	 *	CountDownLatch latch = subscription.getSubscriptions( startIndex,  pageSize,  sortBy,  filter,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param filter 
	 * @param pageSize 
	 * @param responseFields 
	 * @param sortBy 
	 * @param startIndex 
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.event.SubscriptionCollection
	 * @see com.mozu.api.contracts.event.SubscriptionCollection
	 */
	public CountDownLatch getSubscriptionsAsync(Integer startIndex, Integer pageSize, String sortBy, String filter, String responseFields, AsyncCallback<com.mozu.api.contracts.event.SubscriptionCollection> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.event.SubscriptionCollection> client = com.mozu.api.clients.event.push.SubscriptionClient.getSubscriptionsClient( startIndex,  pageSize,  sortBy,  filter,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

}



