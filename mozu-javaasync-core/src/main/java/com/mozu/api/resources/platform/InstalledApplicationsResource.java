/**
 *     This code was auto-generated by a Codezu.     
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
 */
package com.mozu.api.resources.platform;

import com.mozu.api.ApiContext;
import java.util.List;
import java.util.ArrayList;
import com.mozu.api.MozuClient;
import com.mozu.api.MozuClientFactory;
import com.mozu.api.MozuUrl;
import com.mozu.api.Headers;
import org.joda.time.DateTime;
import com.mozu.api.AsyncCallback;
import java.util.concurrent.CountDownLatch;
import com.mozu.api.security.AuthTicket;
import org.apache.commons.lang.StringUtils;

/** <summary>
 * Use the Applications resource to update and retrieve details about the applications installed for your tenant.
 * </summary>
 */
public class InstalledApplicationsResource {
	///
	/// <see cref="Mozu.Api.ApiContext"/>
	///
	private ApiContext _apiContext;


	public InstalledApplicationsResource(ApiContext apiContext) 
	{
		_apiContext = apiContext;
	}

	
	/**
	 * 
	 * <p><pre><code>
	 *	InstalledApplications installedapplications = new InstalledApplications();
	 *	Stream stream = installedapplications.getApplication( appId);
	 * </code></pre></p>
	 * @param appId The application ID that represents the application to retrieve.
	 * @return Stream
	 * @see Stream
	 */
	public java.io.InputStream getApplication(String appId) throws Exception
	{
		MozuClient<java.io.InputStream> client = com.mozu.api.clients.platform.InstalledApplicationsClient.getApplicationClient( appId);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	InstalledApplications installedapplications = new InstalledApplications();
	 *	CountDownLatch latch = installedapplications.getApplication( appId, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param appId The application ID that represents the application to retrieve.
	 * @param  callback callback handler for asynchronous operations
	 * @return Stream
	 * @see Stream
	 */
	public CountDownLatch getApplicationAsync(String appId, AsyncCallback<java.io.InputStream> callback) throws Exception
	{
		MozuClient<java.io.InputStream> client = com.mozu.api.clients.platform.InstalledApplicationsClient.getApplicationClient( appId);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	InstalledApplications installedapplications = new InstalledApplications();
	 *	Stream stream = installedapplications.updateApplication( application,  appId);
	 * </code></pre></p>
	 * @param appId The application ID that represents the application to update.
	 * @param application Properties of the application to update.
	 * @return Stream
	 * @see Stream
	 * @see com.mozu.api.contracts.installedapplications.Application
	 */
	public java.io.InputStream updateApplication(com.mozu.api.contracts.installedapplications.Application application, String appId) throws Exception
	{
		MozuClient<java.io.InputStream> client = com.mozu.api.clients.platform.InstalledApplicationsClient.updateApplicationClient( application,  appId);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	InstalledApplications installedapplications = new InstalledApplications();
	 *	CountDownLatch latch = installedapplications.updateApplication( application,  appId, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param appId The application ID that represents the application to update.
	 * @param  callback callback handler for asynchronous operations
	 * @param application Properties of the application to update.
	 * @return Stream
	 * @see Stream
	 * @see com.mozu.api.contracts.installedapplications.Application
	 */
	public CountDownLatch updateApplicationAsync(com.mozu.api.contracts.installedapplications.Application application, String appId, AsyncCallback<java.io.InputStream> callback) throws Exception
	{
		MozuClient<java.io.InputStream> client = com.mozu.api.clients.platform.InstalledApplicationsClient.updateApplicationClient( application,  appId);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

}



