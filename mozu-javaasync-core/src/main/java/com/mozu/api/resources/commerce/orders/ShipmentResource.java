/**
 *     This code was auto-generated by a Codezu.     
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
 */
package com.mozu.api.resources.commerce.orders;

import com.mozu.api.ApiContext;
import java.util.List;
import java.util.ArrayList;
import com.mozu.api.MozuClient;
import com.mozu.api.MozuClientFactory;
import com.mozu.api.MozuUrl;
import com.mozu.api.Headers;
import org.joda.time.DateTime;
import com.mozu.api.AsyncCallback;
import java.util.concurrent.CountDownLatch;
import com.mozu.api.security.AuthTicket;
import org.apache.commons.lang.StringUtils;

/** <summary>
 * Use the shipments resource to manage shipments of collections of packages for an order.
 * </summary>
 */
public class ShipmentResource {
	///
	/// <see cref="Mozu.Api.ApiContext"/>
	///
	private ApiContext _apiContext;


	public ShipmentResource(ApiContext apiContext) 
	{
		_apiContext = apiContext;
	}

	
	/**
	 * 
	 * <p><pre><code>
	 *	Shipment shipment = new Shipment();
	 *	Shipment shipment = shipment.getShipment( orderId,  shipmentId);
	 * </code></pre></p>
	 * @param orderId Unique identifier of the order.
	 * @param shipmentId Unique identifier of the shipment to retrieve.
	 * @return com.mozu.api.contracts.commerceruntime.fulfillment.Shipment
	 * @see com.mozu.api.contracts.commerceruntime.fulfillment.Shipment
	 */
	public com.mozu.api.contracts.commerceruntime.fulfillment.Shipment getShipment(String orderId, String shipmentId) throws Exception
	{
		return getShipment( orderId,  shipmentId,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	Shipment shipment = new Shipment();
	 *	CountDownLatch latch = shipment.getShipment( orderId,  shipmentId, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param orderId Unique identifier of the order.
	 * @param shipmentId Unique identifier of the shipment to retrieve.
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.commerceruntime.fulfillment.Shipment
	 * @see com.mozu.api.contracts.commerceruntime.fulfillment.Shipment
	 */
	public CountDownLatch getShipmentAsync(String orderId, String shipmentId, AsyncCallback<com.mozu.api.contracts.commerceruntime.fulfillment.Shipment> callback) throws Exception
	{
		return getShipmentAsync( orderId,  shipmentId,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	Shipment shipment = new Shipment();
	 *	Shipment shipment = shipment.getShipment( orderId,  shipmentId,  responseFields);
	 * </code></pre></p>
	 * @param orderId Unique identifier of the order.
	 * @param responseFields Filtering syntax appended to an API call to increase or decrease the amount of data returned inside a JSON object. This parameter should only be used to retrieve data. Attempting to update data using this parameter may cause data loss.
	 * @param shipmentId Unique identifier of the shipment to retrieve.
	 * @return com.mozu.api.contracts.commerceruntime.fulfillment.Shipment
	 * @see com.mozu.api.contracts.commerceruntime.fulfillment.Shipment
	 */
	public com.mozu.api.contracts.commerceruntime.fulfillment.Shipment getShipment(String orderId, String shipmentId, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.fulfillment.Shipment> client = com.mozu.api.clients.commerce.orders.ShipmentClient.getShipmentClient( orderId,  shipmentId,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Shipment shipment = new Shipment();
	 *	CountDownLatch latch = shipment.getShipment( orderId,  shipmentId,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param orderId Unique identifier of the order.
	 * @param responseFields Filtering syntax appended to an API call to increase or decrease the amount of data returned inside a JSON object. This parameter should only be used to retrieve data. Attempting to update data using this parameter may cause data loss.
	 * @param shipmentId Unique identifier of the shipment to retrieve.
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.commerceruntime.fulfillment.Shipment
	 * @see com.mozu.api.contracts.commerceruntime.fulfillment.Shipment
	 */
	public CountDownLatch getShipmentAsync(String orderId, String shipmentId, String responseFields, AsyncCallback<com.mozu.api.contracts.commerceruntime.fulfillment.Shipment> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.fulfillment.Shipment> client = com.mozu.api.clients.commerce.orders.ShipmentClient.getShipmentClient( orderId,  shipmentId,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Shipment shipment = new Shipment();
	 *	ShippingRate shippingRate = shipment.getAvailableShipmentMethods( orderId);
	 * </code></pre></p>
	 * @param orderId Unique identifier of the order.
	 * @return List<com.mozu.api.contracts.commerceruntime.fulfillment.ShippingRate>
	 * @see com.mozu.api.contracts.commerceruntime.fulfillment.ShippingRate
	 */
	public List<com.mozu.api.contracts.commerceruntime.fulfillment.ShippingRate> getAvailableShipmentMethods(String orderId) throws Exception
	{
		return getAvailableShipmentMethods( orderId,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	Shipment shipment = new Shipment();
	 *	CountDownLatch latch = shipment.getAvailableShipmentMethods( orderId, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param orderId Unique identifier of the order.
	 * @param  callback callback handler for asynchronous operations
	 * @return List<com.mozu.api.contracts.commerceruntime.fulfillment.ShippingRate>
	 * @see com.mozu.api.contracts.commerceruntime.fulfillment.ShippingRate
	 */
	public CountDownLatch getAvailableShipmentMethodsAsync(String orderId, AsyncCallback<List<com.mozu.api.contracts.commerceruntime.fulfillment.ShippingRate>> callback) throws Exception
	{
		return getAvailableShipmentMethodsAsync( orderId,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	Shipment shipment = new Shipment();
	 *	ShippingRate shippingRate = shipment.getAvailableShipmentMethods( orderId,  draft);
	 * </code></pre></p>
	 * @param draft If true, retrieve the draft version of the order, which might include uncommitted changes to the order or its components.
	 * @param orderId Unique identifier of the order.
	 * @return List<com.mozu.api.contracts.commerceruntime.fulfillment.ShippingRate>
	 * @see com.mozu.api.contracts.commerceruntime.fulfillment.ShippingRate
	 */
	public List<com.mozu.api.contracts.commerceruntime.fulfillment.ShippingRate> getAvailableShipmentMethods(String orderId, Boolean draft) throws Exception
	{
		MozuClient<List<com.mozu.api.contracts.commerceruntime.fulfillment.ShippingRate>> client = com.mozu.api.clients.commerce.orders.ShipmentClient.getAvailableShipmentMethodsClient( orderId,  draft);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Shipment shipment = new Shipment();
	 *	CountDownLatch latch = shipment.getAvailableShipmentMethods( orderId,  draft, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param draft If true, retrieve the draft version of the order, which might include uncommitted changes to the order or its components.
	 * @param orderId Unique identifier of the order.
	 * @param  callback callback handler for asynchronous operations
	 * @return List<com.mozu.api.contracts.commerceruntime.fulfillment.ShippingRate>
	 * @see com.mozu.api.contracts.commerceruntime.fulfillment.ShippingRate
	 */
	public CountDownLatch getAvailableShipmentMethodsAsync(String orderId, Boolean draft, AsyncCallback<List<com.mozu.api.contracts.commerceruntime.fulfillment.ShippingRate>> callback) throws Exception
	{
		MozuClient<List<com.mozu.api.contracts.commerceruntime.fulfillment.ShippingRate>> client = com.mozu.api.clients.commerce.orders.ShipmentClient.getAvailableShipmentMethodsClient( orderId,  draft);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Shipment shipment = new Shipment();
	 *	Package package = shipment.createPackageShipments( packageIds,  orderId);
	 * </code></pre></p>
	 * @param orderId Unique identifier of the order.
	 * @param packageIds List of unique identifiers for each package associated with this shipment. Not all packages must belong to the same shipment.
	 * @return List<com.mozu.api.contracts.commerceruntime.fulfillment.Package>
	 * @see com.mozu.api.contracts.commerceruntime.fulfillment.Package
	 * @see string
	 */
	public List<com.mozu.api.contracts.commerceruntime.fulfillment.Package> createPackageShipments(List<String> packageIds, String orderId) throws Exception
	{
		MozuClient<List<com.mozu.api.contracts.commerceruntime.fulfillment.Package>> client = com.mozu.api.clients.commerce.orders.ShipmentClient.createPackageShipmentsClient( packageIds,  orderId);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Shipment shipment = new Shipment();
	 *	CountDownLatch latch = shipment.createPackageShipments( packageIds,  orderId, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param orderId Unique identifier of the order.
	 * @param  callback callback handler for asynchronous operations
	 * @param packageIds List of unique identifiers for each package associated with this shipment. Not all packages must belong to the same shipment.
	 * @return List<com.mozu.api.contracts.commerceruntime.fulfillment.Package>
	 * @see com.mozu.api.contracts.commerceruntime.fulfillment.Package
	 * @see string
	 */
	public CountDownLatch createPackageShipmentsAsync(List<String> packageIds, String orderId, AsyncCallback<List<com.mozu.api.contracts.commerceruntime.fulfillment.Package>> callback) throws Exception
	{
		MozuClient<List<com.mozu.api.contracts.commerceruntime.fulfillment.Package>> client = com.mozu.api.clients.commerce.orders.ShipmentClient.createPackageShipmentsClient( packageIds,  orderId);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Shipment shipment = new Shipment();
	 *	Shipment shipment = shipment.updateShipmentAdjustments( shipmentAdjustment,  orderId,  shipmentNumber);
	 * </code></pre></p>
	 * @param orderId 
	 * @param shipmentNumber 
	 * @param shipmentAdjustment 
	 * @return com.mozu.api.contracts.commerceruntime.fulfillment.Shipment
	 * @see com.mozu.api.contracts.commerceruntime.fulfillment.Shipment
	 * @see com.mozu.api.contracts.commerceruntime.fulfillment.ShipmentAdjustment
	 */
	public com.mozu.api.contracts.commerceruntime.fulfillment.Shipment updateShipmentAdjustments(com.mozu.api.contracts.commerceruntime.fulfillment.ShipmentAdjustment shipmentAdjustment, String orderId, Integer shipmentNumber) throws Exception
	{
		return updateShipmentAdjustments( shipmentAdjustment,  orderId,  shipmentNumber,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	Shipment shipment = new Shipment();
	 *	CountDownLatch latch = shipment.updateShipmentAdjustments( shipmentAdjustment,  orderId,  shipmentNumber, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param orderId 
	 * @param shipmentNumber 
	 * @param  callback callback handler for asynchronous operations
	 * @param shipmentAdjustment 
	 * @return com.mozu.api.contracts.commerceruntime.fulfillment.Shipment
	 * @see com.mozu.api.contracts.commerceruntime.fulfillment.Shipment
	 * @see com.mozu.api.contracts.commerceruntime.fulfillment.ShipmentAdjustment
	 */
	public CountDownLatch updateShipmentAdjustmentsAsync(com.mozu.api.contracts.commerceruntime.fulfillment.ShipmentAdjustment shipmentAdjustment, String orderId, Integer shipmentNumber, AsyncCallback<com.mozu.api.contracts.commerceruntime.fulfillment.Shipment> callback) throws Exception
	{
		return updateShipmentAdjustmentsAsync( shipmentAdjustment,  orderId,  shipmentNumber,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	Shipment shipment = new Shipment();
	 *	Shipment shipment = shipment.updateShipmentAdjustments( shipmentAdjustment,  orderId,  shipmentNumber,  responseFields);
	 * </code></pre></p>
	 * @param orderId 
	 * @param responseFields 
	 * @param shipmentNumber 
	 * @param shipmentAdjustment 
	 * @return com.mozu.api.contracts.commerceruntime.fulfillment.Shipment
	 * @see com.mozu.api.contracts.commerceruntime.fulfillment.Shipment
	 * @see com.mozu.api.contracts.commerceruntime.fulfillment.ShipmentAdjustment
	 */
	public com.mozu.api.contracts.commerceruntime.fulfillment.Shipment updateShipmentAdjustments(com.mozu.api.contracts.commerceruntime.fulfillment.ShipmentAdjustment shipmentAdjustment, String orderId, Integer shipmentNumber, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.fulfillment.Shipment> client = com.mozu.api.clients.commerce.orders.ShipmentClient.updateShipmentAdjustmentsClient( shipmentAdjustment,  orderId,  shipmentNumber,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Shipment shipment = new Shipment();
	 *	CountDownLatch latch = shipment.updateShipmentAdjustments( shipmentAdjustment,  orderId,  shipmentNumber,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param orderId 
	 * @param responseFields 
	 * @param shipmentNumber 
	 * @param  callback callback handler for asynchronous operations
	 * @param shipmentAdjustment 
	 * @return com.mozu.api.contracts.commerceruntime.fulfillment.Shipment
	 * @see com.mozu.api.contracts.commerceruntime.fulfillment.Shipment
	 * @see com.mozu.api.contracts.commerceruntime.fulfillment.ShipmentAdjustment
	 */
	public CountDownLatch updateShipmentAdjustmentsAsync(com.mozu.api.contracts.commerceruntime.fulfillment.ShipmentAdjustment shipmentAdjustment, String orderId, Integer shipmentNumber, String responseFields, AsyncCallback<com.mozu.api.contracts.commerceruntime.fulfillment.Shipment> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.fulfillment.Shipment> client = com.mozu.api.clients.commerce.orders.ShipmentClient.updateShipmentAdjustmentsClient( shipmentAdjustment,  orderId,  shipmentNumber,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Shipment shipment = new Shipment();
	 *	Shipment shipment = shipment.updateShipmentItem( shipmentItemAdjustment,  shipmentNumber,  itemId);
	 * </code></pre></p>
	 * @param itemId 
	 * @param shipmentNumber 
	 * @param shipmentItemAdjustment 
	 * @return com.mozu.api.contracts.commerceruntime.fulfillment.Shipment
	 * @see com.mozu.api.contracts.commerceruntime.fulfillment.Shipment
	 * @see com.mozu.api.contracts.commerceruntime.fulfillment.ShipmentItemAdjustment
	 */
	public com.mozu.api.contracts.commerceruntime.fulfillment.Shipment updateShipmentItem(com.mozu.api.contracts.commerceruntime.fulfillment.ShipmentItemAdjustment shipmentItemAdjustment, Integer shipmentNumber, Integer itemId) throws Exception
	{
		return updateShipmentItem( shipmentItemAdjustment,  shipmentNumber,  itemId,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	Shipment shipment = new Shipment();
	 *	CountDownLatch latch = shipment.updateShipmentItem( shipmentItemAdjustment,  shipmentNumber,  itemId, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param itemId 
	 * @param shipmentNumber 
	 * @param  callback callback handler for asynchronous operations
	 * @param shipmentItemAdjustment 
	 * @return com.mozu.api.contracts.commerceruntime.fulfillment.Shipment
	 * @see com.mozu.api.contracts.commerceruntime.fulfillment.Shipment
	 * @see com.mozu.api.contracts.commerceruntime.fulfillment.ShipmentItemAdjustment
	 */
	public CountDownLatch updateShipmentItemAsync(com.mozu.api.contracts.commerceruntime.fulfillment.ShipmentItemAdjustment shipmentItemAdjustment, Integer shipmentNumber, Integer itemId, AsyncCallback<com.mozu.api.contracts.commerceruntime.fulfillment.Shipment> callback) throws Exception
	{
		return updateShipmentItemAsync( shipmentItemAdjustment,  shipmentNumber,  itemId,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	Shipment shipment = new Shipment();
	 *	Shipment shipment = shipment.updateShipmentItem( shipmentItemAdjustment,  shipmentNumber,  itemId,  responseFields);
	 * </code></pre></p>
	 * @param itemId 
	 * @param responseFields 
	 * @param shipmentNumber 
	 * @param shipmentItemAdjustment 
	 * @return com.mozu.api.contracts.commerceruntime.fulfillment.Shipment
	 * @see com.mozu.api.contracts.commerceruntime.fulfillment.Shipment
	 * @see com.mozu.api.contracts.commerceruntime.fulfillment.ShipmentItemAdjustment
	 */
	public com.mozu.api.contracts.commerceruntime.fulfillment.Shipment updateShipmentItem(com.mozu.api.contracts.commerceruntime.fulfillment.ShipmentItemAdjustment shipmentItemAdjustment, Integer shipmentNumber, Integer itemId, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.fulfillment.Shipment> client = com.mozu.api.clients.commerce.orders.ShipmentClient.updateShipmentItemClient( shipmentItemAdjustment,  shipmentNumber,  itemId,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Shipment shipment = new Shipment();
	 *	CountDownLatch latch = shipment.updateShipmentItem( shipmentItemAdjustment,  shipmentNumber,  itemId,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param itemId 
	 * @param responseFields 
	 * @param shipmentNumber 
	 * @param  callback callback handler for asynchronous operations
	 * @param shipmentItemAdjustment 
	 * @return com.mozu.api.contracts.commerceruntime.fulfillment.Shipment
	 * @see com.mozu.api.contracts.commerceruntime.fulfillment.Shipment
	 * @see com.mozu.api.contracts.commerceruntime.fulfillment.ShipmentItemAdjustment
	 */
	public CountDownLatch updateShipmentItemAsync(com.mozu.api.contracts.commerceruntime.fulfillment.ShipmentItemAdjustment shipmentItemAdjustment, Integer shipmentNumber, Integer itemId, String responseFields, AsyncCallback<com.mozu.api.contracts.commerceruntime.fulfillment.Shipment> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.fulfillment.Shipment> client = com.mozu.api.clients.commerce.orders.ShipmentClient.updateShipmentItemClient( shipmentItemAdjustment,  shipmentNumber,  itemId,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Shipment shipment = new Shipment();
	 *	Shipment shipment = shipment.repriceShipment( repriceShipment,  shipmentNumber);
	 * </code></pre></p>
	 * @param shipmentNumber 
	 * @param repriceShipment 
	 * @return com.mozu.api.contracts.commerceruntime.fulfillment.Shipment
	 * @see com.mozu.api.contracts.commerceruntime.fulfillment.Shipment
	 * @see com.mozu.api.contracts.commerceruntime.fulfillment.RepriceShipmentObject
	 */
	public com.mozu.api.contracts.commerceruntime.fulfillment.Shipment repriceShipment(com.mozu.api.contracts.commerceruntime.fulfillment.RepriceShipmentObject repriceShipment, Integer shipmentNumber) throws Exception
	{
		return repriceShipment( repriceShipment,  shipmentNumber,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	Shipment shipment = new Shipment();
	 *	CountDownLatch latch = shipment.repriceShipment( repriceShipment,  shipmentNumber, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param shipmentNumber 
	 * @param  callback callback handler for asynchronous operations
	 * @param repriceShipment 
	 * @return com.mozu.api.contracts.commerceruntime.fulfillment.Shipment
	 * @see com.mozu.api.contracts.commerceruntime.fulfillment.Shipment
	 * @see com.mozu.api.contracts.commerceruntime.fulfillment.RepriceShipmentObject
	 */
	public CountDownLatch repriceShipmentAsync(com.mozu.api.contracts.commerceruntime.fulfillment.RepriceShipmentObject repriceShipment, Integer shipmentNumber, AsyncCallback<com.mozu.api.contracts.commerceruntime.fulfillment.Shipment> callback) throws Exception
	{
		return repriceShipmentAsync( repriceShipment,  shipmentNumber,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	Shipment shipment = new Shipment();
	 *	Shipment shipment = shipment.repriceShipment( repriceShipment,  shipmentNumber,  responseFields);
	 * </code></pre></p>
	 * @param responseFields 
	 * @param shipmentNumber 
	 * @param repriceShipment 
	 * @return com.mozu.api.contracts.commerceruntime.fulfillment.Shipment
	 * @see com.mozu.api.contracts.commerceruntime.fulfillment.Shipment
	 * @see com.mozu.api.contracts.commerceruntime.fulfillment.RepriceShipmentObject
	 */
	public com.mozu.api.contracts.commerceruntime.fulfillment.Shipment repriceShipment(com.mozu.api.contracts.commerceruntime.fulfillment.RepriceShipmentObject repriceShipment, Integer shipmentNumber, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.fulfillment.Shipment> client = com.mozu.api.clients.commerce.orders.ShipmentClient.repriceShipmentClient( repriceShipment,  shipmentNumber,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Shipment shipment = new Shipment();
	 *	CountDownLatch latch = shipment.repriceShipment( repriceShipment,  shipmentNumber,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param responseFields 
	 * @param shipmentNumber 
	 * @param  callback callback handler for asynchronous operations
	 * @param repriceShipment 
	 * @return com.mozu.api.contracts.commerceruntime.fulfillment.Shipment
	 * @see com.mozu.api.contracts.commerceruntime.fulfillment.Shipment
	 * @see com.mozu.api.contracts.commerceruntime.fulfillment.RepriceShipmentObject
	 */
	public CountDownLatch repriceShipmentAsync(com.mozu.api.contracts.commerceruntime.fulfillment.RepriceShipmentObject repriceShipment, Integer shipmentNumber, String responseFields, AsyncCallback<com.mozu.api.contracts.commerceruntime.fulfillment.Shipment> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.fulfillment.Shipment> client = com.mozu.api.clients.commerce.orders.ShipmentClient.repriceShipmentClient( repriceShipment,  shipmentNumber,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Shipment shipment = new Shipment();
	 *	Shipment shipment = shipment.splitShipments( splitShipments);
	 * </code></pre></p>
	 * @param splitShipments 
	 * @return List<com.mozu.api.contracts.commerceruntime.fulfillment.Shipment>
	 * @see com.mozu.api.contracts.commerceruntime.fulfillment.Shipment
	 * @see com.mozu.api.contracts.commerceruntime.fulfillment.SplitShipmentsObject
	 */
	public List<com.mozu.api.contracts.commerceruntime.fulfillment.Shipment> splitShipments(com.mozu.api.contracts.commerceruntime.fulfillment.SplitShipmentsObject splitShipments) throws Exception
	{
		MozuClient<List<com.mozu.api.contracts.commerceruntime.fulfillment.Shipment>> client = com.mozu.api.clients.commerce.orders.ShipmentClient.splitShipmentsClient( splitShipments);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Shipment shipment = new Shipment();
	 *	CountDownLatch latch = shipment.splitShipments( splitShipments, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param  callback callback handler for asynchronous operations
	 * @param splitShipments 
	 * @return List<com.mozu.api.contracts.commerceruntime.fulfillment.Shipment>
	 * @see com.mozu.api.contracts.commerceruntime.fulfillment.Shipment
	 * @see com.mozu.api.contracts.commerceruntime.fulfillment.SplitShipmentsObject
	 */
	public CountDownLatch splitShipmentsAsync(com.mozu.api.contracts.commerceruntime.fulfillment.SplitShipmentsObject splitShipments, AsyncCallback<List<com.mozu.api.contracts.commerceruntime.fulfillment.Shipment>> callback) throws Exception
	{
		MozuClient<List<com.mozu.api.contracts.commerceruntime.fulfillment.Shipment>> client = com.mozu.api.clients.commerce.orders.ShipmentClient.splitShipmentsClient( splitShipments);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Shipment shipment = new Shipment();
	 *	Stream stream = shipment.deleteShipment( orderId,  shipmentId);
	 * </code></pre></p>
	 * @param orderId Unique identifier of the order.
	 * @param shipmentId Unique identifier of the shipment to retrieve.
	 * @return Stream
	 * @see Stream
	 */
	public java.io.InputStream deleteShipment(String orderId, String shipmentId) throws Exception
	{
		MozuClient<java.io.InputStream> client = com.mozu.api.clients.commerce.orders.ShipmentClient.deleteShipmentClient( orderId,  shipmentId);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Shipment shipment = new Shipment();
	 *	CountDownLatch latch = shipment.deleteShipment( orderId,  shipmentId, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param orderId Unique identifier of the order.
	 * @param shipmentId Unique identifier of the shipment to retrieve.
	 * @param  callback callback handler for asynchronous operations
	 * @return Stream
	 * @see Stream
	 */
	public CountDownLatch deleteShipmentAsync(String orderId, String shipmentId, AsyncCallback<java.io.InputStream> callback) throws Exception
	{
		MozuClient<java.io.InputStream> client = com.mozu.api.clients.commerce.orders.ShipmentClient.deleteShipmentClient( orderId,  shipmentId);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

}



