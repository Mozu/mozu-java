/**
 *     This code was auto-generated by a Codezu.     
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
 */
package com.mozu.api.resources.commerce.catalog.admin;

import com.mozu.api.ApiContext;
import java.util.List;
import java.util.ArrayList;
import com.mozu.api.MozuClient;
import com.mozu.api.MozuClientFactory;
import com.mozu.api.MozuUrl;
import com.mozu.api.Headers;
import org.joda.time.DateTime;
import com.mozu.api.AsyncCallback;
import java.util.concurrent.CountDownLatch;
import com.mozu.api.security.AuthTicket;
import org.apache.commons.lang.StringUtils;

import com.mozu.api.DataViewMode;
/** <summary>
 * Use the Categories resource to organize products and control where they appear on the storefront. Create and maintain a hierarchy of categories and subcategories where the site will store properties.
 * </summary>
 */
public class CategoryResource {
	///
	/// <see cref="Mozu.Api.ApiContext"/>
	///
	private ApiContext _apiContext;

	private DataViewMode _dataViewMode;

	public CategoryResource(ApiContext apiContext) 
	{
		_apiContext = apiContext;
		_dataViewMode = DataViewMode.Live;
	}

	public CategoryResource(ApiContext apiContext, DataViewMode dataViewMode) 
	{
		_apiContext = apiContext;
		_dataViewMode = dataViewMode;
	}
		
	/**
	 * 
	 * <p><pre><code>
	 *	Category category = new Category();
	 *	CategoryPagedCollection categoryPagedCollection = category.getCategories();
	 * </code></pre></p>
	 * @return com.mozu.api.contracts.productadmin.CategoryPagedCollection
	 * @see com.mozu.api.contracts.productadmin.CategoryPagedCollection
	 */
	public com.mozu.api.contracts.productadmin.CategoryPagedCollection getCategories() throws Exception
	{
		return getCategories( null,  null,  null,  null,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	Category category = new Category();
	 *	CountDownLatch latch = category.getCategories( callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.productadmin.CategoryPagedCollection
	 * @see com.mozu.api.contracts.productadmin.CategoryPagedCollection
	 */
	public CountDownLatch getCategoriesAsync( AsyncCallback<com.mozu.api.contracts.productadmin.CategoryPagedCollection> callback) throws Exception
	{
		return getCategoriesAsync( null,  null,  null,  null,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	Category category = new Category();
	 *	CategoryPagedCollection categoryPagedCollection = category.getCategories( startIndex,  pageSize,  sortBy,  filter,  responseFields);
	 * </code></pre></p>
	 * @param filter A set of expressions that consist of a field, operator, and value and represent search parameter syntax when filtering results of a query. You can filter product category search results by any of its properties, including its position in the category hierarchy. Valid operators include equals (eq), does not equal (ne), greater than (gt), less than (lt), greater than or equal to (ge), less than or equal to (le), starts with (sw), or contains (cont). For example - "filter=IsDisplayed+eq+true"
	 * @param pageSize 
	 * @param responseFields 
	 * @param sortBy 
	 * @param startIndex 
	 * @return com.mozu.api.contracts.productadmin.CategoryPagedCollection
	 * @see com.mozu.api.contracts.productadmin.CategoryPagedCollection
	 */
	public com.mozu.api.contracts.productadmin.CategoryPagedCollection getCategories(Integer startIndex, Integer pageSize, String sortBy, String filter, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.CategoryPagedCollection> client = com.mozu.api.clients.commerce.catalog.admin.CategoryClient.getCategoriesClient(_dataViewMode,  startIndex,  pageSize,  sortBy,  filter,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Category category = new Category();
	 *	CountDownLatch latch = category.getCategories( startIndex,  pageSize,  sortBy,  filter,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param filter A set of expressions that consist of a field, operator, and value and represent search parameter syntax when filtering results of a query. You can filter product category search results by any of its properties, including its position in the category hierarchy. Valid operators include equals (eq), does not equal (ne), greater than (gt), less than (lt), greater than or equal to (ge), less than or equal to (le), starts with (sw), or contains (cont). For example - "filter=IsDisplayed+eq+true"
	 * @param pageSize 
	 * @param responseFields 
	 * @param sortBy 
	 * @param startIndex 
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.productadmin.CategoryPagedCollection
	 * @see com.mozu.api.contracts.productadmin.CategoryPagedCollection
	 */
	public CountDownLatch getCategoriesAsync(Integer startIndex, Integer pageSize, String sortBy, String filter, String responseFields, AsyncCallback<com.mozu.api.contracts.productadmin.CategoryPagedCollection> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.CategoryPagedCollection> client = com.mozu.api.clients.commerce.catalog.admin.CategoryClient.getCategoriesClient(_dataViewMode,  startIndex,  pageSize,  sortBy,  filter,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Category category = new Category();
	 *	CategoryCollection categoryCollection = category.getChildCategories( categoryId);
	 * </code></pre></p>
	 * @param categoryId Unique identifier of the category for which to retrieve subcategories.
	 * @return com.mozu.api.contracts.productadmin.CategoryCollection
	 * @see com.mozu.api.contracts.productadmin.CategoryCollection
	 */
	public com.mozu.api.contracts.productadmin.CategoryCollection getChildCategories(Integer categoryId) throws Exception
	{
		return getChildCategories( categoryId,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	Category category = new Category();
	 *	CountDownLatch latch = category.getChildCategories( categoryId, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param categoryId Unique identifier of the category for which to retrieve subcategories.
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.productadmin.CategoryCollection
	 * @see com.mozu.api.contracts.productadmin.CategoryCollection
	 */
	public CountDownLatch getChildCategoriesAsync(Integer categoryId, AsyncCallback<com.mozu.api.contracts.productadmin.CategoryCollection> callback) throws Exception
	{
		return getChildCategoriesAsync( categoryId,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	Category category = new Category();
	 *	CategoryCollection categoryCollection = category.getChildCategories( categoryId,  responseFields);
	 * </code></pre></p>
	 * @param categoryId Unique identifier of the category for which to retrieve subcategories.
	 * @param responseFields 
	 * @return com.mozu.api.contracts.productadmin.CategoryCollection
	 * @see com.mozu.api.contracts.productadmin.CategoryCollection
	 */
	public com.mozu.api.contracts.productadmin.CategoryCollection getChildCategories(Integer categoryId, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.CategoryCollection> client = com.mozu.api.clients.commerce.catalog.admin.CategoryClient.getChildCategoriesClient( categoryId,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Category category = new Category();
	 *	CountDownLatch latch = category.getChildCategories( categoryId,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param categoryId Unique identifier of the category for which to retrieve subcategories.
	 * @param responseFields 
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.productadmin.CategoryCollection
	 * @see com.mozu.api.contracts.productadmin.CategoryCollection
	 */
	public CountDownLatch getChildCategoriesAsync(Integer categoryId, String responseFields, AsyncCallback<com.mozu.api.contracts.productadmin.CategoryCollection> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.CategoryCollection> client = com.mozu.api.clients.commerce.catalog.admin.CategoryClient.getChildCategoriesClient( categoryId,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Category category = new Category();
	 *	Category category = category.getCategory( categoryId);
	 * </code></pre></p>
	 * @param categoryId Unique identifier of the category to retrieve.
	 * @return com.mozu.api.contracts.productadmin.Category
	 * @see com.mozu.api.contracts.productadmin.Category
	 */
	public com.mozu.api.contracts.productadmin.Category getCategory(Integer categoryId) throws Exception
	{
		return getCategory( categoryId,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	Category category = new Category();
	 *	CountDownLatch latch = category.getCategory( categoryId, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param categoryId Unique identifier of the category to retrieve.
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.productadmin.Category
	 * @see com.mozu.api.contracts.productadmin.Category
	 */
	public CountDownLatch getCategoryAsync(Integer categoryId, AsyncCallback<com.mozu.api.contracts.productadmin.Category> callback) throws Exception
	{
		return getCategoryAsync( categoryId,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	Category category = new Category();
	 *	Category category = category.getCategory( categoryId,  responseFields);
	 * </code></pre></p>
	 * @param categoryId Unique identifier of the category to retrieve.
	 * @param responseFields 
	 * @return com.mozu.api.contracts.productadmin.Category
	 * @see com.mozu.api.contracts.productadmin.Category
	 */
	public com.mozu.api.contracts.productadmin.Category getCategory(Integer categoryId, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.Category> client = com.mozu.api.clients.commerce.catalog.admin.CategoryClient.getCategoryClient(_dataViewMode,  categoryId,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Category category = new Category();
	 *	CountDownLatch latch = category.getCategory( categoryId,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param categoryId Unique identifier of the category to retrieve.
	 * @param responseFields 
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.productadmin.Category
	 * @see com.mozu.api.contracts.productadmin.Category
	 */
	public CountDownLatch getCategoryAsync(Integer categoryId, String responseFields, AsyncCallback<com.mozu.api.contracts.productadmin.Category> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.Category> client = com.mozu.api.clients.commerce.catalog.admin.CategoryClient.getCategoryClient(_dataViewMode,  categoryId,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Category category = new Category();
	 *	Category category = category.addCategory( category);
	 * </code></pre></p>
	 * @param category Properties of the new category to create. You must specify a name and parent category if you want to create it as a subcategory.
	 * @return com.mozu.api.contracts.productadmin.Category
	 * @see com.mozu.api.contracts.productadmin.Category
	 * @see com.mozu.api.contracts.productadmin.Category
	 */
	public com.mozu.api.contracts.productadmin.Category addCategory(com.mozu.api.contracts.productadmin.Category category) throws Exception
	{
		return addCategory( category,  null,  null,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	Category category = new Category();
	 *	CountDownLatch latch = category.addCategory( category, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param  callback callback handler for asynchronous operations
	 * @param category Properties of the new category to create. You must specify a name and parent category if you want to create it as a subcategory.
	 * @return com.mozu.api.contracts.productadmin.Category
	 * @see com.mozu.api.contracts.productadmin.Category
	 * @see com.mozu.api.contracts.productadmin.Category
	 */
	public CountDownLatch addCategoryAsync(com.mozu.api.contracts.productadmin.Category category, AsyncCallback<com.mozu.api.contracts.productadmin.Category> callback) throws Exception
	{
		return addCategoryAsync( category,  null,  null,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	Category category = new Category();
	 *	Category category = category.addCategory( category,  incrementSequence,  useProvidedId,  responseFields);
	 * </code></pre></p>
	 * @param incrementSequence If true, when adding a new product category, set the sequence number of the new category to an increment of one integer greater than the maximum available sequence number across all product categories. If false, set the sequence number to zero.
	 * @param responseFields 
	 * @param useProvidedId 
	 * @param category Properties of the new category to create. You must specify a name and parent category if you want to create it as a subcategory.
	 * @return com.mozu.api.contracts.productadmin.Category
	 * @see com.mozu.api.contracts.productadmin.Category
	 * @see com.mozu.api.contracts.productadmin.Category
	 */
	public com.mozu.api.contracts.productadmin.Category addCategory(com.mozu.api.contracts.productadmin.Category category, Boolean incrementSequence, Boolean useProvidedId, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.Category> client = com.mozu.api.clients.commerce.catalog.admin.CategoryClient.addCategoryClient( category,  incrementSequence,  useProvidedId,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Category category = new Category();
	 *	CountDownLatch latch = category.addCategory( category,  incrementSequence,  useProvidedId,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param incrementSequence If true, when adding a new product category, set the sequence number of the new category to an increment of one integer greater than the maximum available sequence number across all product categories. If false, set the sequence number to zero.
	 * @param responseFields 
	 * @param useProvidedId 
	 * @param  callback callback handler for asynchronous operations
	 * @param category Properties of the new category to create. You must specify a name and parent category if you want to create it as a subcategory.
	 * @return com.mozu.api.contracts.productadmin.Category
	 * @see com.mozu.api.contracts.productadmin.Category
	 * @see com.mozu.api.contracts.productadmin.Category
	 */
	public CountDownLatch addCategoryAsync(com.mozu.api.contracts.productadmin.Category category, Boolean incrementSequence, Boolean useProvidedId, String responseFields, AsyncCallback<com.mozu.api.contracts.productadmin.Category> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.Category> client = com.mozu.api.clients.commerce.catalog.admin.CategoryClient.addCategoryClient( category,  incrementSequence,  useProvidedId,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Category category = new Category();
	 *	Stream stream = category.addProductsToCategory( productCodes,  categoryId);
	 * </code></pre></p>
	 * @param categoryId 
	 * @param productCodes 
	 * @return Stream
	 * @see Stream
	 * @see string
	 */
	public java.io.InputStream addProductsToCategory(List<String> productCodes, Integer categoryId) throws Exception
	{
		MozuClient<java.io.InputStream> client = com.mozu.api.clients.commerce.catalog.admin.CategoryClient.addProductsToCategoryClient(_dataViewMode,  productCodes,  categoryId);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Category category = new Category();
	 *	CountDownLatch latch = category.addProductsToCategory( productCodes,  categoryId, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param categoryId 
	 * @param  callback callback handler for asynchronous operations
	 * @param productCodes 
	 * @return Stream
	 * @see Stream
	 * @see string
	 */
	public CountDownLatch addProductsToCategoryAsync(List<String> productCodes, Integer categoryId, AsyncCallback<java.io.InputStream> callback) throws Exception
	{
		MozuClient<java.io.InputStream> client = com.mozu.api.clients.commerce.catalog.admin.CategoryClient.addProductsToCategoryClient(_dataViewMode,  productCodes,  categoryId);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Category category = new Category();
	 *	Stream stream = category.removeProductsFromCategory( productCodes,  categoryId);
	 * </code></pre></p>
	 * @param categoryId 
	 * @param productCodes 
	 * @return Stream
	 * @see Stream
	 * @see string
	 */
	public java.io.InputStream removeProductsFromCategory(List<String> productCodes, Integer categoryId) throws Exception
	{
		MozuClient<java.io.InputStream> client = com.mozu.api.clients.commerce.catalog.admin.CategoryClient.removeProductsFromCategoryClient( productCodes,  categoryId);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Category category = new Category();
	 *	CountDownLatch latch = category.removeProductsFromCategory( productCodes,  categoryId, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param categoryId 
	 * @param  callback callback handler for asynchronous operations
	 * @param productCodes 
	 * @return Stream
	 * @see Stream
	 * @see string
	 */
	public CountDownLatch removeProductsFromCategoryAsync(List<String> productCodes, Integer categoryId, AsyncCallback<java.io.InputStream> callback) throws Exception
	{
		MozuClient<java.io.InputStream> client = com.mozu.api.clients.commerce.catalog.admin.CategoryClient.removeProductsFromCategoryClient( productCodes,  categoryId);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Category category = new Category();
	 *	DynamicExpression dynamicExpression = category.validateDynamicExpression( dynamicExpressionIn);
	 * </code></pre></p>
	 * @param dynamicExpressionIn 
	 * @return com.mozu.api.contracts.productadmin.DynamicExpression
	 * @see com.mozu.api.contracts.productadmin.DynamicExpression
	 * @see com.mozu.api.contracts.productadmin.DynamicExpression
	 */
	public com.mozu.api.contracts.productadmin.DynamicExpression validateDynamicExpression(com.mozu.api.contracts.productadmin.DynamicExpression dynamicExpressionIn) throws Exception
	{
		return validateDynamicExpression( dynamicExpressionIn,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	Category category = new Category();
	 *	CountDownLatch latch = category.validateDynamicExpression( dynamicExpressionIn, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param  callback callback handler for asynchronous operations
	 * @param dynamicExpressionIn 
	 * @return com.mozu.api.contracts.productadmin.DynamicExpression
	 * @see com.mozu.api.contracts.productadmin.DynamicExpression
	 * @see com.mozu.api.contracts.productadmin.DynamicExpression
	 */
	public CountDownLatch validateDynamicExpressionAsync(com.mozu.api.contracts.productadmin.DynamicExpression dynamicExpressionIn, AsyncCallback<com.mozu.api.contracts.productadmin.DynamicExpression> callback) throws Exception
	{
		return validateDynamicExpressionAsync( dynamicExpressionIn,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	Category category = new Category();
	 *	DynamicExpression dynamicExpression = category.validateDynamicExpression( dynamicExpressionIn,  responseFields);
	 * </code></pre></p>
	 * @param responseFields 
	 * @param dynamicExpressionIn 
	 * @return com.mozu.api.contracts.productadmin.DynamicExpression
	 * @see com.mozu.api.contracts.productadmin.DynamicExpression
	 * @see com.mozu.api.contracts.productadmin.DynamicExpression
	 */
	public com.mozu.api.contracts.productadmin.DynamicExpression validateDynamicExpression(com.mozu.api.contracts.productadmin.DynamicExpression dynamicExpressionIn, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.DynamicExpression> client = com.mozu.api.clients.commerce.catalog.admin.CategoryClient.validateDynamicExpressionClient( dynamicExpressionIn,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Category category = new Category();
	 *	CountDownLatch latch = category.validateDynamicExpression( dynamicExpressionIn,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param responseFields 
	 * @param  callback callback handler for asynchronous operations
	 * @param dynamicExpressionIn 
	 * @return com.mozu.api.contracts.productadmin.DynamicExpression
	 * @see com.mozu.api.contracts.productadmin.DynamicExpression
	 * @see com.mozu.api.contracts.productadmin.DynamicExpression
	 */
	public CountDownLatch validateDynamicExpressionAsync(com.mozu.api.contracts.productadmin.DynamicExpression dynamicExpressionIn, String responseFields, AsyncCallback<com.mozu.api.contracts.productadmin.DynamicExpression> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.DynamicExpression> client = com.mozu.api.clients.commerce.catalog.admin.CategoryClient.validateDynamicExpressionClient( dynamicExpressionIn,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Category category = new Category();
	 *	DynamicExpression dynamicExpression = category.validateRealTimeDynamicExpression( dynamicExpressionIn);
	 * </code></pre></p>
	 * @param dynamicExpressionIn 
	 * @return com.mozu.api.contracts.productadmin.DynamicExpression
	 * @see com.mozu.api.contracts.productadmin.DynamicExpression
	 * @see com.mozu.api.contracts.productadmin.DynamicExpression
	 */
	public com.mozu.api.contracts.productadmin.DynamicExpression validateRealTimeDynamicExpression(com.mozu.api.contracts.productadmin.DynamicExpression dynamicExpressionIn) throws Exception
	{
		return validateRealTimeDynamicExpression( dynamicExpressionIn,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	Category category = new Category();
	 *	CountDownLatch latch = category.validateRealTimeDynamicExpression( dynamicExpressionIn, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param  callback callback handler for asynchronous operations
	 * @param dynamicExpressionIn 
	 * @return com.mozu.api.contracts.productadmin.DynamicExpression
	 * @see com.mozu.api.contracts.productadmin.DynamicExpression
	 * @see com.mozu.api.contracts.productadmin.DynamicExpression
	 */
	public CountDownLatch validateRealTimeDynamicExpressionAsync(com.mozu.api.contracts.productadmin.DynamicExpression dynamicExpressionIn, AsyncCallback<com.mozu.api.contracts.productadmin.DynamicExpression> callback) throws Exception
	{
		return validateRealTimeDynamicExpressionAsync( dynamicExpressionIn,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	Category category = new Category();
	 *	DynamicExpression dynamicExpression = category.validateRealTimeDynamicExpression( dynamicExpressionIn,  responseFields);
	 * </code></pre></p>
	 * @param responseFields 
	 * @param dynamicExpressionIn 
	 * @return com.mozu.api.contracts.productadmin.DynamicExpression
	 * @see com.mozu.api.contracts.productadmin.DynamicExpression
	 * @see com.mozu.api.contracts.productadmin.DynamicExpression
	 */
	public com.mozu.api.contracts.productadmin.DynamicExpression validateRealTimeDynamicExpression(com.mozu.api.contracts.productadmin.DynamicExpression dynamicExpressionIn, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.DynamicExpression> client = com.mozu.api.clients.commerce.catalog.admin.CategoryClient.validateRealTimeDynamicExpressionClient( dynamicExpressionIn,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Category category = new Category();
	 *	CountDownLatch latch = category.validateRealTimeDynamicExpression( dynamicExpressionIn,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param responseFields 
	 * @param  callback callback handler for asynchronous operations
	 * @param dynamicExpressionIn 
	 * @return com.mozu.api.contracts.productadmin.DynamicExpression
	 * @see com.mozu.api.contracts.productadmin.DynamicExpression
	 * @see com.mozu.api.contracts.productadmin.DynamicExpression
	 */
	public CountDownLatch validateRealTimeDynamicExpressionAsync(com.mozu.api.contracts.productadmin.DynamicExpression dynamicExpressionIn, String responseFields, AsyncCallback<com.mozu.api.contracts.productadmin.DynamicExpression> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.DynamicExpression> client = com.mozu.api.clients.commerce.catalog.admin.CategoryClient.validateRealTimeDynamicExpressionClient( dynamicExpressionIn,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Category category = new Category();
	 *	Category category = category.updateCategory( category,  categoryId);
	 * </code></pre></p>
	 * @param categoryId Unique identifier of the category to modify.
	 * @param category Properties of the category to modify.
	 * @return com.mozu.api.contracts.productadmin.Category
	 * @see com.mozu.api.contracts.productadmin.Category
	 * @see com.mozu.api.contracts.productadmin.Category
	 */
	public com.mozu.api.contracts.productadmin.Category updateCategory(com.mozu.api.contracts.productadmin.Category category, Integer categoryId) throws Exception
	{
		return updateCategory( category,  categoryId,  null,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	Category category = new Category();
	 *	CountDownLatch latch = category.updateCategory( category,  categoryId, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param categoryId Unique identifier of the category to modify.
	 * @param  callback callback handler for asynchronous operations
	 * @param category Properties of the category to modify.
	 * @return com.mozu.api.contracts.productadmin.Category
	 * @see com.mozu.api.contracts.productadmin.Category
	 * @see com.mozu.api.contracts.productadmin.Category
	 */
	public CountDownLatch updateCategoryAsync(com.mozu.api.contracts.productadmin.Category category, Integer categoryId, AsyncCallback<com.mozu.api.contracts.productadmin.Category> callback) throws Exception
	{
		return updateCategoryAsync( category,  categoryId,  null,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	Category category = new Category();
	 *	Category category = category.updateCategory( category,  categoryId,  cascadeVisibility,  responseFields);
	 * </code></pre></p>
	 * @param cascadeVisibility If true, when changing the display option for the category, change it for all subcategories also. Default: False.
	 * @param categoryId Unique identifier of the category to modify.
	 * @param responseFields 
	 * @param category Properties of the category to modify.
	 * @return com.mozu.api.contracts.productadmin.Category
	 * @see com.mozu.api.contracts.productadmin.Category
	 * @see com.mozu.api.contracts.productadmin.Category
	 */
	public com.mozu.api.contracts.productadmin.Category updateCategory(com.mozu.api.contracts.productadmin.Category category, Integer categoryId, Boolean cascadeVisibility, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.Category> client = com.mozu.api.clients.commerce.catalog.admin.CategoryClient.updateCategoryClient( category,  categoryId,  cascadeVisibility,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Category category = new Category();
	 *	CountDownLatch latch = category.updateCategory( category,  categoryId,  cascadeVisibility,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param cascadeVisibility If true, when changing the display option for the category, change it for all subcategories also. Default: False.
	 * @param categoryId Unique identifier of the category to modify.
	 * @param responseFields 
	 * @param  callback callback handler for asynchronous operations
	 * @param category Properties of the category to modify.
	 * @return com.mozu.api.contracts.productadmin.Category
	 * @see com.mozu.api.contracts.productadmin.Category
	 * @see com.mozu.api.contracts.productadmin.Category
	 */
	public CountDownLatch updateCategoryAsync(com.mozu.api.contracts.productadmin.Category category, Integer categoryId, Boolean cascadeVisibility, String responseFields, AsyncCallback<com.mozu.api.contracts.productadmin.Category> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.Category> client = com.mozu.api.clients.commerce.catalog.admin.CategoryClient.updateCategoryClient( category,  categoryId,  cascadeVisibility,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Category category = new Category();
	 *	Stream stream = category.deleteCategoryById( categoryId);
	 * </code></pre></p>
	 * @param categoryId Unique identifier of the category to delete.
	 * @return Stream
	 * @see Stream
	 */
	public java.io.InputStream deleteCategoryById(Integer categoryId) throws Exception
	{
		return deleteCategoryById( categoryId,  null,  null,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	Category category = new Category();
	 *	CountDownLatch latch = category.deleteCategoryById( categoryId, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param categoryId Unique identifier of the category to delete.
	 * @param  callback callback handler for asynchronous operations
	 * @return Stream
	 * @see Stream
	 */
	public CountDownLatch deleteCategoryByIdAsync(Integer categoryId, AsyncCallback<java.io.InputStream> callback) throws Exception
	{
		return deleteCategoryByIdAsync( categoryId,  null,  null,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	Category category = new Category();
	 *	Stream stream = category.deleteCategoryById( categoryId,  cascadeDelete,  forceDelete,  reassignToParent);
	 * </code></pre></p>
	 * @param cascadeDelete If true, also delete all subcategories associated with the specified category.
	 * @param categoryId Unique identifier of the category to delete.
	 * @param forceDelete 
	 * @param reassignToParent 
	 * @return Stream
	 * @see Stream
	 */
	public java.io.InputStream deleteCategoryById(Integer categoryId, Boolean cascadeDelete, Boolean forceDelete, Boolean reassignToParent) throws Exception
	{
		MozuClient<java.io.InputStream> client = com.mozu.api.clients.commerce.catalog.admin.CategoryClient.deleteCategoryByIdClient( categoryId,  cascadeDelete,  forceDelete,  reassignToParent);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Category category = new Category();
	 *	CountDownLatch latch = category.deleteCategoryById( categoryId,  cascadeDelete,  forceDelete,  reassignToParent, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param cascadeDelete If true, also delete all subcategories associated with the specified category.
	 * @param categoryId Unique identifier of the category to delete.
	 * @param forceDelete 
	 * @param reassignToParent 
	 * @param  callback callback handler for asynchronous operations
	 * @return Stream
	 * @see Stream
	 */
	public CountDownLatch deleteCategoryByIdAsync(Integer categoryId, Boolean cascadeDelete, Boolean forceDelete, Boolean reassignToParent, AsyncCallback<java.io.InputStream> callback) throws Exception
	{
		MozuClient<java.io.InputStream> client = com.mozu.api.clients.commerce.catalog.admin.CategoryClient.deleteCategoryByIdClient( categoryId,  cascadeDelete,  forceDelete,  reassignToParent);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

}



