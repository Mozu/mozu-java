/**
 *     This code was auto-generated by a Codezu.     
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
 */
package com.mozu.api.resources.commerce.catalog.storefront;

import com.mozu.api.ApiContext;
import java.util.List;
import java.util.ArrayList;
import com.mozu.api.MozuClient;
import com.mozu.api.MozuClientFactory;
import com.mozu.api.MozuUrl;
import com.mozu.api.Headers;
import org.joda.time.DateTime;
import com.mozu.api.AsyncCallback;
import java.util.concurrent.CountDownLatch;
import com.mozu.api.security.AuthTicket;
import org.apache.commons.lang.StringUtils;

import com.mozu.api.DataViewMode;
/** <summary>
 * Use the Storefront Products  resource to manage the shopper product selection process during a visit to the web storefront. You can update product options as shoppers pick and choose their product choices. A shopper cannot add a product to a cart until all of its required options have been selected.
 * </summary>
 */
public class ProductResource {
	///
	/// <see cref="Mozu.Api.ApiContext"/>
	///
	private ApiContext _apiContext;

	private DataViewMode _dataViewMode;

	public ProductResource(ApiContext apiContext) 
	{
		_apiContext = apiContext;
		_dataViewMode = DataViewMode.Live;
	}

	public ProductResource(ApiContext apiContext, DataViewMode dataViewMode) 
	{
		_apiContext = apiContext;
		_dataViewMode = dataViewMode;
	}
		
	/**
	 * 
	 * <p><pre><code>
	 *	Product product = new Product();
	 *	ProductCollection productCollection = product.getProducts();
	 * </code></pre></p>
	 * @return com.mozu.api.contracts.productruntime.ProductCollection
	 * @see com.mozu.api.contracts.productruntime.ProductCollection
	 */
	public com.mozu.api.contracts.productruntime.ProductCollection getProducts() throws Exception
	{
		return getProducts( null,  null,  null,  null,  null,  null,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	Product product = new Product();
	 *	CountDownLatch latch = product.getProducts( callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.productruntime.ProductCollection
	 * @see com.mozu.api.contracts.productruntime.ProductCollection
	 */
	public CountDownLatch getProductsAsync( AsyncCallback<com.mozu.api.contracts.productruntime.ProductCollection> callback) throws Exception
	{
		return getProductsAsync( null,  null,  null,  null,  null,  null,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	Product product = new Product();
	 *	ProductCollection productCollection = product.getProducts( filter,  startIndex,  pageSize,  sortBy,  responseOptions,  cursorMark,  responseFields);
	 * </code></pre></p>
	 * @param cursorMark 
	 * @param filter 
	 * @param pageSize Used to page results from a query. Indicates the maximum number of entities to return from a single query. Default value: 20. Maximum value: 200.
	 * @param responseFields 
	 * @param responseOptions 
	 * @param sortBy 
	 * @param startIndex 
	 * @return com.mozu.api.contracts.productruntime.ProductCollection
	 * @see com.mozu.api.contracts.productruntime.ProductCollection
	 */
	public com.mozu.api.contracts.productruntime.ProductCollection getProducts(String filter, Integer startIndex, Integer pageSize, String sortBy, String responseOptions, String cursorMark, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productruntime.ProductCollection> client = com.mozu.api.clients.commerce.catalog.storefront.ProductClient.getProductsClient(_dataViewMode,  filter,  startIndex,  pageSize,  sortBy,  responseOptions,  cursorMark,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Product product = new Product();
	 *	CountDownLatch latch = product.getProducts( filter,  startIndex,  pageSize,  sortBy,  responseOptions,  cursorMark,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param cursorMark 
	 * @param filter 
	 * @param pageSize Used to page results from a query. Indicates the maximum number of entities to return from a single query. Default value: 20. Maximum value: 200.
	 * @param responseFields 
	 * @param responseOptions 
	 * @param sortBy 
	 * @param startIndex 
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.productruntime.ProductCollection
	 * @see com.mozu.api.contracts.productruntime.ProductCollection
	 */
	public CountDownLatch getProductsAsync(String filter, Integer startIndex, Integer pageSize, String sortBy, String responseOptions, String cursorMark, String responseFields, AsyncCallback<com.mozu.api.contracts.productruntime.ProductCollection> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productruntime.ProductCollection> client = com.mozu.api.clients.commerce.catalog.storefront.ProductClient.getProductsClient(_dataViewMode,  filter,  startIndex,  pageSize,  sortBy,  responseOptions,  cursorMark,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Product product = new Product();
	 *	LocationInventoryCollection locationInventoryCollection = product.getProductInventory( productCode);
	 * </code></pre></p>
	 * @param productCode 
	 * @return com.mozu.api.contracts.productruntime.LocationInventoryCollection
	 * @see com.mozu.api.contracts.productruntime.LocationInventoryCollection
	 */
	public com.mozu.api.contracts.productruntime.LocationInventoryCollection getProductInventory(String productCode) throws Exception
	{
		return getProductInventory( productCode,  null,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	Product product = new Product();
	 *	CountDownLatch latch = product.getProductInventory( productCode, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param productCode 
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.productruntime.LocationInventoryCollection
	 * @see com.mozu.api.contracts.productruntime.LocationInventoryCollection
	 */
	public CountDownLatch getProductInventoryAsync(String productCode, AsyncCallback<com.mozu.api.contracts.productruntime.LocationInventoryCollection> callback) throws Exception
	{
		return getProductInventoryAsync( productCode,  null,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	Product product = new Product();
	 *	LocationInventoryCollection locationInventoryCollection = product.getProductInventory( productCode,  locationCodes,  responseFields);
	 * </code></pre></p>
	 * @param locationCodes Array of location codes for which to retrieve product inventory information.
	 * @param productCode 
	 * @param responseFields 
	 * @return com.mozu.api.contracts.productruntime.LocationInventoryCollection
	 * @see com.mozu.api.contracts.productruntime.LocationInventoryCollection
	 */
	public com.mozu.api.contracts.productruntime.LocationInventoryCollection getProductInventory(String productCode, String locationCodes, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productruntime.LocationInventoryCollection> client = com.mozu.api.clients.commerce.catalog.storefront.ProductClient.getProductInventoryClient(_dataViewMode,  productCode,  locationCodes,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Product product = new Product();
	 *	CountDownLatch latch = product.getProductInventory( productCode,  locationCodes,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param locationCodes Array of location codes for which to retrieve product inventory information.
	 * @param productCode 
	 * @param responseFields 
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.productruntime.LocationInventoryCollection
	 * @see com.mozu.api.contracts.productruntime.LocationInventoryCollection
	 */
	public CountDownLatch getProductInventoryAsync(String productCode, String locationCodes, String responseFields, AsyncCallback<com.mozu.api.contracts.productruntime.LocationInventoryCollection> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productruntime.LocationInventoryCollection> client = com.mozu.api.clients.commerce.catalog.storefront.ProductClient.getProductInventoryClient(_dataViewMode,  productCode,  locationCodes,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Product product = new Product();
	 *	Product product = product.getProduct( productCode);
	 * </code></pre></p>
	 * @param productCode 
	 * @return com.mozu.api.contracts.productruntime.Product
	 * @see com.mozu.api.contracts.productruntime.Product
	 */
	public com.mozu.api.contracts.productruntime.Product getProduct(String productCode) throws Exception
	{
		return getProduct( productCode,  null,  null,  null,  null,  null,  null,  null,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	Product product = new Product();
	 *	CountDownLatch latch = product.getProduct( productCode, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param productCode 
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.productruntime.Product
	 * @see com.mozu.api.contracts.productruntime.Product
	 */
	public CountDownLatch getProductAsync(String productCode, AsyncCallback<com.mozu.api.contracts.productruntime.Product> callback) throws Exception
	{
		return getProductAsync( productCode,  null,  null,  null,  null,  null,  null,  null,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	Product product = new Product();
	 *	Product product = product.getProduct( productCode,  variationProductCode,  allowInactive,  skipInventoryCheck,  supressOutOfStock404,  quantity,  acceptVariantProductCode,  purchaseLocation,  responseFields);
	 * </code></pre></p>
	 * @param acceptVariantProductCode 
	 * @param allowInactive If true, returns an inactive product as part of the query.
	 * @param productCode 
	 * @param purchaseLocation 
	 * @param quantity 
	 * @param responseFields 
	 * @param skipInventoryCheck If true, skip the inventory validation process for the specified product.
	 * @param supressOutOfStock404 
	 * @param variationProductCode Merchant-created code associated with a specific product variation. Variation product codes maintain an association with the base product code.
	 * @return com.mozu.api.contracts.productruntime.Product
	 * @see com.mozu.api.contracts.productruntime.Product
	 */
	public com.mozu.api.contracts.productruntime.Product getProduct(String productCode, String variationProductCode, Boolean allowInactive, Boolean skipInventoryCheck, Boolean supressOutOfStock404, Integer quantity, Boolean acceptVariantProductCode, String purchaseLocation, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productruntime.Product> client = com.mozu.api.clients.commerce.catalog.storefront.ProductClient.getProductClient(_dataViewMode,  productCode,  variationProductCode,  allowInactive,  skipInventoryCheck,  supressOutOfStock404,  quantity,  acceptVariantProductCode,  purchaseLocation,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Product product = new Product();
	 *	CountDownLatch latch = product.getProduct( productCode,  variationProductCode,  allowInactive,  skipInventoryCheck,  supressOutOfStock404,  quantity,  acceptVariantProductCode,  purchaseLocation,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param acceptVariantProductCode 
	 * @param allowInactive If true, returns an inactive product as part of the query.
	 * @param productCode 
	 * @param purchaseLocation 
	 * @param quantity 
	 * @param responseFields 
	 * @param skipInventoryCheck If true, skip the inventory validation process for the specified product.
	 * @param supressOutOfStock404 
	 * @param variationProductCode Merchant-created code associated with a specific product variation. Variation product codes maintain an association with the base product code.
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.productruntime.Product
	 * @see com.mozu.api.contracts.productruntime.Product
	 */
	public CountDownLatch getProductAsync(String productCode, String variationProductCode, Boolean allowInactive, Boolean skipInventoryCheck, Boolean supressOutOfStock404, Integer quantity, Boolean acceptVariantProductCode, String purchaseLocation, String responseFields, AsyncCallback<com.mozu.api.contracts.productruntime.Product> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productruntime.Product> client = com.mozu.api.clients.commerce.catalog.storefront.ProductClient.getProductClient(_dataViewMode,  productCode,  variationProductCode,  allowInactive,  skipInventoryCheck,  supressOutOfStock404,  quantity,  acceptVariantProductCode,  purchaseLocation,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Product product = new Product();
	 *	Product product = product.getProductForIndexing( productCode);
	 * </code></pre></p>
	 * @param productCode 
	 * @return com.mozu.api.contracts.productruntime.Product
	 * @see com.mozu.api.contracts.productruntime.Product
	 */
	public com.mozu.api.contracts.productruntime.Product getProductForIndexing(String productCode) throws Exception
	{
		return getProductForIndexing( productCode,  null,  null,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	Product product = new Product();
	 *	CountDownLatch latch = product.getProductForIndexing( productCode, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param productCode 
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.productruntime.Product
	 * @see com.mozu.api.contracts.productruntime.Product
	 */
	public CountDownLatch getProductForIndexingAsync(String productCode, AsyncCallback<com.mozu.api.contracts.productruntime.Product> callback) throws Exception
	{
		return getProductForIndexingAsync( productCode,  null,  null,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	Product product = new Product();
	 *	Product product = product.getProductForIndexing( productCode,  productVersion,  lastModifiedDate,  responseFields);
	 * </code></pre></p>
	 * @param lastModifiedDate 
	 * @param productCode 
	 * @param productVersion 
	 * @param responseFields 
	 * @return com.mozu.api.contracts.productruntime.Product
	 * @see com.mozu.api.contracts.productruntime.Product
	 */
	public com.mozu.api.contracts.productruntime.Product getProductForIndexing(String productCode, Long productVersion, DateTime lastModifiedDate, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productruntime.Product> client = com.mozu.api.clients.commerce.catalog.storefront.ProductClient.getProductForIndexingClient(_dataViewMode,  productCode,  productVersion,  lastModifiedDate,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Product product = new Product();
	 *	CountDownLatch latch = product.getProductForIndexing( productCode,  productVersion,  lastModifiedDate,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param lastModifiedDate 
	 * @param productCode 
	 * @param productVersion 
	 * @param responseFields 
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.productruntime.Product
	 * @see com.mozu.api.contracts.productruntime.Product
	 */
	public CountDownLatch getProductForIndexingAsync(String productCode, Long productVersion, DateTime lastModifiedDate, String responseFields, AsyncCallback<com.mozu.api.contracts.productruntime.Product> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productruntime.Product> client = com.mozu.api.clients.commerce.catalog.storefront.ProductClient.getProductForIndexingClient(_dataViewMode,  productCode,  productVersion,  lastModifiedDate,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Product product = new Product();
	 *	ConfiguredProduct configuredProduct = product.configuredProduct( productOptionSelections,  productCode);
	 * </code></pre></p>
	 * @param productCode 
	 * @param productOptionSelections For a product with shopper-configurable options, the properties of the product options selected by the shopper.
	 * @return com.mozu.api.contracts.productruntime.ConfiguredProduct
	 * @see com.mozu.api.contracts.productruntime.ConfiguredProduct
	 * @see com.mozu.api.contracts.productruntime.ProductOptionSelections
	 */
	public com.mozu.api.contracts.productruntime.ConfiguredProduct configuredProduct(com.mozu.api.contracts.productruntime.ProductOptionSelections productOptionSelections, String productCode) throws Exception
	{
		return configuredProduct( productOptionSelections,  productCode,  null,  null,  null,  null,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	Product product = new Product();
	 *	CountDownLatch latch = product.configuredProduct( productOptionSelections,  productCode, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param productCode 
	 * @param  callback callback handler for asynchronous operations
	 * @param productOptionSelections For a product with shopper-configurable options, the properties of the product options selected by the shopper.
	 * @return com.mozu.api.contracts.productruntime.ConfiguredProduct
	 * @see com.mozu.api.contracts.productruntime.ConfiguredProduct
	 * @see com.mozu.api.contracts.productruntime.ProductOptionSelections
	 */
	public CountDownLatch configuredProductAsync(com.mozu.api.contracts.productruntime.ProductOptionSelections productOptionSelections, String productCode, AsyncCallback<com.mozu.api.contracts.productruntime.ConfiguredProduct> callback) throws Exception
	{
		return configuredProductAsync( productOptionSelections,  productCode,  null,  null,  null,  null,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	Product product = new Product();
	 *	ConfiguredProduct configuredProduct = product.configuredProduct( productOptionSelections,  productCode,  includeOptionDetails,  skipInventoryCheck,  quantity,  purchaseLocation,  responseFields);
	 * </code></pre></p>
	 * @param includeOptionDetails If true, the response returns details about the product. If false, returns a product summary such as the product name, price, and sale price.
	 * @param productCode 
	 * @param purchaseLocation 
	 * @param quantity 
	 * @param responseFields 
	 * @param skipInventoryCheck If true, skip the inventory validation process for the specified product.
	 * @param productOptionSelections For a product with shopper-configurable options, the properties of the product options selected by the shopper.
	 * @return com.mozu.api.contracts.productruntime.ConfiguredProduct
	 * @see com.mozu.api.contracts.productruntime.ConfiguredProduct
	 * @see com.mozu.api.contracts.productruntime.ProductOptionSelections
	 */
	public com.mozu.api.contracts.productruntime.ConfiguredProduct configuredProduct(com.mozu.api.contracts.productruntime.ProductOptionSelections productOptionSelections, String productCode, Boolean includeOptionDetails, Boolean skipInventoryCheck, Integer quantity, String purchaseLocation, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productruntime.ConfiguredProduct> client = com.mozu.api.clients.commerce.catalog.storefront.ProductClient.configuredProductClient( productOptionSelections,  productCode,  includeOptionDetails,  skipInventoryCheck,  quantity,  purchaseLocation,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Product product = new Product();
	 *	CountDownLatch latch = product.configuredProduct( productOptionSelections,  productCode,  includeOptionDetails,  skipInventoryCheck,  quantity,  purchaseLocation,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param includeOptionDetails If true, the response returns details about the product. If false, returns a product summary such as the product name, price, and sale price.
	 * @param productCode 
	 * @param purchaseLocation 
	 * @param quantity 
	 * @param responseFields 
	 * @param skipInventoryCheck If true, skip the inventory validation process for the specified product.
	 * @param  callback callback handler for asynchronous operations
	 * @param productOptionSelections For a product with shopper-configurable options, the properties of the product options selected by the shopper.
	 * @return com.mozu.api.contracts.productruntime.ConfiguredProduct
	 * @see com.mozu.api.contracts.productruntime.ConfiguredProduct
	 * @see com.mozu.api.contracts.productruntime.ProductOptionSelections
	 */
	public CountDownLatch configuredProductAsync(com.mozu.api.contracts.productruntime.ProductOptionSelections productOptionSelections, String productCode, Boolean includeOptionDetails, Boolean skipInventoryCheck, Integer quantity, String purchaseLocation, String responseFields, AsyncCallback<com.mozu.api.contracts.productruntime.ConfiguredProduct> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productruntime.ConfiguredProduct> client = com.mozu.api.clients.commerce.catalog.storefront.ProductClient.configuredProductClient( productOptionSelections,  productCode,  includeOptionDetails,  skipInventoryCheck,  quantity,  purchaseLocation,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Product product = new Product();
	 *	ProductValidationSummary productValidationSummary = product.validateProduct( productOptionSelections,  productCode);
	 * </code></pre></p>
	 * @param productCode 
	 * @param productOptionSelections For a product with shopper-configurable options, the properties of the product options selected by the shopper.
	 * @return com.mozu.api.contracts.productruntime.ProductValidationSummary
	 * @see com.mozu.api.contracts.productruntime.ProductValidationSummary
	 * @see com.mozu.api.contracts.productruntime.ProductOptionSelections
	 */
	public com.mozu.api.contracts.productruntime.ProductValidationSummary validateProduct(com.mozu.api.contracts.productruntime.ProductOptionSelections productOptionSelections, String productCode) throws Exception
	{
		return validateProduct( productOptionSelections,  productCode,  null,  null,  null,  null,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	Product product = new Product();
	 *	CountDownLatch latch = product.validateProduct( productOptionSelections,  productCode, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param productCode 
	 * @param  callback callback handler for asynchronous operations
	 * @param productOptionSelections For a product with shopper-configurable options, the properties of the product options selected by the shopper.
	 * @return com.mozu.api.contracts.productruntime.ProductValidationSummary
	 * @see com.mozu.api.contracts.productruntime.ProductValidationSummary
	 * @see com.mozu.api.contracts.productruntime.ProductOptionSelections
	 */
	public CountDownLatch validateProductAsync(com.mozu.api.contracts.productruntime.ProductOptionSelections productOptionSelections, String productCode, AsyncCallback<com.mozu.api.contracts.productruntime.ProductValidationSummary> callback) throws Exception
	{
		return validateProductAsync( productOptionSelections,  productCode,  null,  null,  null,  null,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	Product product = new Product();
	 *	ProductValidationSummary productValidationSummary = product.validateProduct( productOptionSelections,  productCode,  skipInventoryCheck,  quantity,  skipDefaults,  purchaseLocation,  responseFields);
	 * </code></pre></p>
	 * @param productCode 
	 * @param purchaseLocation 
	 * @param quantity 
	 * @param responseFields 
	 * @param skipDefaults 
	 * @param skipInventoryCheck If true, skip the inventory validation process for the specified product.
	 * @param productOptionSelections For a product with shopper-configurable options, the properties of the product options selected by the shopper.
	 * @return com.mozu.api.contracts.productruntime.ProductValidationSummary
	 * @see com.mozu.api.contracts.productruntime.ProductValidationSummary
	 * @see com.mozu.api.contracts.productruntime.ProductOptionSelections
	 */
	public com.mozu.api.contracts.productruntime.ProductValidationSummary validateProduct(com.mozu.api.contracts.productruntime.ProductOptionSelections productOptionSelections, String productCode, Boolean skipInventoryCheck, Integer quantity, Boolean skipDefaults, String purchaseLocation, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productruntime.ProductValidationSummary> client = com.mozu.api.clients.commerce.catalog.storefront.ProductClient.validateProductClient( productOptionSelections,  productCode,  skipInventoryCheck,  quantity,  skipDefaults,  purchaseLocation,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Product product = new Product();
	 *	CountDownLatch latch = product.validateProduct( productOptionSelections,  productCode,  skipInventoryCheck,  quantity,  skipDefaults,  purchaseLocation,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param productCode 
	 * @param purchaseLocation 
	 * @param quantity 
	 * @param responseFields 
	 * @param skipDefaults 
	 * @param skipInventoryCheck If true, skip the inventory validation process for the specified product.
	 * @param  callback callback handler for asynchronous operations
	 * @param productOptionSelections For a product with shopper-configurable options, the properties of the product options selected by the shopper.
	 * @return com.mozu.api.contracts.productruntime.ProductValidationSummary
	 * @see com.mozu.api.contracts.productruntime.ProductValidationSummary
	 * @see com.mozu.api.contracts.productruntime.ProductOptionSelections
	 */
	public CountDownLatch validateProductAsync(com.mozu.api.contracts.productruntime.ProductOptionSelections productOptionSelections, String productCode, Boolean skipInventoryCheck, Integer quantity, Boolean skipDefaults, String purchaseLocation, String responseFields, AsyncCallback<com.mozu.api.contracts.productruntime.ProductValidationSummary> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productruntime.ProductValidationSummary> client = com.mozu.api.clients.commerce.catalog.storefront.ProductClient.validateProductClient( productOptionSelections,  productCode,  skipInventoryCheck,  quantity,  skipDefaults,  purchaseLocation,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Product product = new Product();
	 *	DiscountValidationSummary discountValidationSummary = product.validateDiscounts( discountSelections,  productCode);
	 * </code></pre></p>
	 * @param productCode 
	 * @param discountSelections List of discount IDs to evaluate for the specified product.
	 * @return com.mozu.api.contracts.productruntime.DiscountValidationSummary
	 * @see com.mozu.api.contracts.productruntime.DiscountValidationSummary
	 * @see com.mozu.api.contracts.productruntime.DiscountSelections
	 */
	public com.mozu.api.contracts.productruntime.DiscountValidationSummary validateDiscounts(com.mozu.api.contracts.productruntime.DiscountSelections discountSelections, String productCode) throws Exception
	{
		return validateDiscounts( discountSelections,  productCode,  null,  null,  null,  null,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	Product product = new Product();
	 *	CountDownLatch latch = product.validateDiscounts( discountSelections,  productCode, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param productCode 
	 * @param  callback callback handler for asynchronous operations
	 * @param discountSelections List of discount IDs to evaluate for the specified product.
	 * @return com.mozu.api.contracts.productruntime.DiscountValidationSummary
	 * @see com.mozu.api.contracts.productruntime.DiscountValidationSummary
	 * @see com.mozu.api.contracts.productruntime.DiscountSelections
	 */
	public CountDownLatch validateDiscountsAsync(com.mozu.api.contracts.productruntime.DiscountSelections discountSelections, String productCode, AsyncCallback<com.mozu.api.contracts.productruntime.DiscountValidationSummary> callback) throws Exception
	{
		return validateDiscountsAsync( discountSelections,  productCode,  null,  null,  null,  null,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	Product product = new Product();
	 *	DiscountValidationSummary discountValidationSummary = product.validateDiscounts( discountSelections,  productCode,  variationProductCode,  customerAccountId,  allowInactive,  skipInventoryCheck,  responseFields);
	 * </code></pre></p>
	 * @param allowInactive If true, this operation returns inactive product discounts as part of the POST.
	 * @param customerAccountId Unique ID of the customer account associated with the shopper requesting the discount.
	 * @param productCode 
	 * @param responseFields 
	 * @param skipInventoryCheck If true, do not validate the product inventory when evaluating the list of discounts.
	 * @param variationProductCode Merchant-created code associated with a specific product variation. Variation product codes maintain an association with the base product code.
	 * @param discountSelections List of discount IDs to evaluate for the specified product.
	 * @return com.mozu.api.contracts.productruntime.DiscountValidationSummary
	 * @see com.mozu.api.contracts.productruntime.DiscountValidationSummary
	 * @see com.mozu.api.contracts.productruntime.DiscountSelections
	 */
	public com.mozu.api.contracts.productruntime.DiscountValidationSummary validateDiscounts(com.mozu.api.contracts.productruntime.DiscountSelections discountSelections, String productCode, String variationProductCode, Integer customerAccountId, Boolean allowInactive, Boolean skipInventoryCheck, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productruntime.DiscountValidationSummary> client = com.mozu.api.clients.commerce.catalog.storefront.ProductClient.validateDiscountsClient( discountSelections,  productCode,  variationProductCode,  customerAccountId,  allowInactive,  skipInventoryCheck,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Product product = new Product();
	 *	CountDownLatch latch = product.validateDiscounts( discountSelections,  productCode,  variationProductCode,  customerAccountId,  allowInactive,  skipInventoryCheck,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param allowInactive If true, this operation returns inactive product discounts as part of the POST.
	 * @param customerAccountId Unique ID of the customer account associated with the shopper requesting the discount.
	 * @param productCode 
	 * @param responseFields 
	 * @param skipInventoryCheck If true, do not validate the product inventory when evaluating the list of discounts.
	 * @param variationProductCode Merchant-created code associated with a specific product variation. Variation product codes maintain an association with the base product code.
	 * @param  callback callback handler for asynchronous operations
	 * @param discountSelections List of discount IDs to evaluate for the specified product.
	 * @return com.mozu.api.contracts.productruntime.DiscountValidationSummary
	 * @see com.mozu.api.contracts.productruntime.DiscountValidationSummary
	 * @see com.mozu.api.contracts.productruntime.DiscountSelections
	 */
	public CountDownLatch validateDiscountsAsync(com.mozu.api.contracts.productruntime.DiscountSelections discountSelections, String productCode, String variationProductCode, Integer customerAccountId, Boolean allowInactive, Boolean skipInventoryCheck, String responseFields, AsyncCallback<com.mozu.api.contracts.productruntime.DiscountValidationSummary> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productruntime.DiscountValidationSummary> client = com.mozu.api.clients.commerce.catalog.storefront.ProductClient.validateDiscountsClient( discountSelections,  productCode,  variationProductCode,  customerAccountId,  allowInactive,  skipInventoryCheck,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Product product = new Product();
	 *	ProductCostCollection productCostCollection = product.getProductCosts( query);
	 * </code></pre></p>
	 * @param query 
	 * @return com.mozu.api.contracts.productruntime.ProductCostCollection
	 * @see com.mozu.api.contracts.productruntime.ProductCostCollection
	 * @see com.mozu.api.contracts.productruntime.ProductCostQuery
	 */
	public com.mozu.api.contracts.productruntime.ProductCostCollection getProductCosts(com.mozu.api.contracts.productruntime.ProductCostQuery query) throws Exception
	{
		return getProductCosts( query,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	Product product = new Product();
	 *	CountDownLatch latch = product.getProductCosts( query, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param  callback callback handler for asynchronous operations
	 * @param query 
	 * @return com.mozu.api.contracts.productruntime.ProductCostCollection
	 * @see com.mozu.api.contracts.productruntime.ProductCostCollection
	 * @see com.mozu.api.contracts.productruntime.ProductCostQuery
	 */
	public CountDownLatch getProductCostsAsync(com.mozu.api.contracts.productruntime.ProductCostQuery query, AsyncCallback<com.mozu.api.contracts.productruntime.ProductCostCollection> callback) throws Exception
	{
		return getProductCostsAsync( query,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	Product product = new Product();
	 *	ProductCostCollection productCostCollection = product.getProductCosts( query,  responseFields);
	 * </code></pre></p>
	 * @param responseFields 
	 * @param query 
	 * @return com.mozu.api.contracts.productruntime.ProductCostCollection
	 * @see com.mozu.api.contracts.productruntime.ProductCostCollection
	 * @see com.mozu.api.contracts.productruntime.ProductCostQuery
	 */
	public com.mozu.api.contracts.productruntime.ProductCostCollection getProductCosts(com.mozu.api.contracts.productruntime.ProductCostQuery query, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productruntime.ProductCostCollection> client = com.mozu.api.clients.commerce.catalog.storefront.ProductClient.getProductCostsClient(_dataViewMode,  query,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Product product = new Product();
	 *	CountDownLatch latch = product.getProductCosts( query,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param responseFields 
	 * @param  callback callback handler for asynchronous operations
	 * @param query 
	 * @return com.mozu.api.contracts.productruntime.ProductCostCollection
	 * @see com.mozu.api.contracts.productruntime.ProductCostCollection
	 * @see com.mozu.api.contracts.productruntime.ProductCostQuery
	 */
	public CountDownLatch getProductCostsAsync(com.mozu.api.contracts.productruntime.ProductCostQuery query, String responseFields, AsyncCallback<com.mozu.api.contracts.productruntime.ProductCostCollection> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productruntime.ProductCostCollection> client = com.mozu.api.clients.commerce.catalog.storefront.ProductClient.getProductCostsClient(_dataViewMode,  query,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Product product = new Product();
	 *	LocationInventoryCollection locationInventoryCollection = product.getProductInventories( query);
	 * </code></pre></p>
	 * @param query 
	 * @return com.mozu.api.contracts.productruntime.LocationInventoryCollection
	 * @see com.mozu.api.contracts.productruntime.LocationInventoryCollection
	 * @see com.mozu.api.contracts.productruntime.LocationInventoryQuery
	 */
	public com.mozu.api.contracts.productruntime.LocationInventoryCollection getProductInventories(com.mozu.api.contracts.productruntime.LocationInventoryQuery query) throws Exception
	{
		return getProductInventories( query,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	Product product = new Product();
	 *	CountDownLatch latch = product.getProductInventories( query, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param  callback callback handler for asynchronous operations
	 * @param query 
	 * @return com.mozu.api.contracts.productruntime.LocationInventoryCollection
	 * @see com.mozu.api.contracts.productruntime.LocationInventoryCollection
	 * @see com.mozu.api.contracts.productruntime.LocationInventoryQuery
	 */
	public CountDownLatch getProductInventoriesAsync(com.mozu.api.contracts.productruntime.LocationInventoryQuery query, AsyncCallback<com.mozu.api.contracts.productruntime.LocationInventoryCollection> callback) throws Exception
	{
		return getProductInventoriesAsync( query,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	Product product = new Product();
	 *	LocationInventoryCollection locationInventoryCollection = product.getProductInventories( query,  responseFields);
	 * </code></pre></p>
	 * @param responseFields 
	 * @param query 
	 * @return com.mozu.api.contracts.productruntime.LocationInventoryCollection
	 * @see com.mozu.api.contracts.productruntime.LocationInventoryCollection
	 * @see com.mozu.api.contracts.productruntime.LocationInventoryQuery
	 */
	public com.mozu.api.contracts.productruntime.LocationInventoryCollection getProductInventories(com.mozu.api.contracts.productruntime.LocationInventoryQuery query, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productruntime.LocationInventoryCollection> client = com.mozu.api.clients.commerce.catalog.storefront.ProductClient.getProductInventoriesClient(_dataViewMode,  query,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Product product = new Product();
	 *	CountDownLatch latch = product.getProductInventories( query,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param responseFields 
	 * @param  callback callback handler for asynchronous operations
	 * @param query 
	 * @return com.mozu.api.contracts.productruntime.LocationInventoryCollection
	 * @see com.mozu.api.contracts.productruntime.LocationInventoryCollection
	 * @see com.mozu.api.contracts.productruntime.LocationInventoryQuery
	 */
	public CountDownLatch getProductInventoriesAsync(com.mozu.api.contracts.productruntime.LocationInventoryQuery query, String responseFields, AsyncCallback<com.mozu.api.contracts.productruntime.LocationInventoryCollection> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productruntime.LocationInventoryCollection> client = com.mozu.api.clients.commerce.catalog.storefront.ProductClient.getProductInventoriesClient(_dataViewMode,  query,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

}



