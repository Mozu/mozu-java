/**
 *     This code was auto-generated by a Codezu.     
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
 */
package com.mozu.api.resources.commerce.checkouts;

import com.mozu.api.ApiContext;
import java.util.List;
import java.util.ArrayList;
import com.mozu.api.MozuClient;
import com.mozu.api.MozuClientFactory;
import com.mozu.api.MozuUrl;
import com.mozu.api.Headers;
import org.joda.time.DateTime;
import com.mozu.api.AsyncCallback;
import java.util.concurrent.CountDownLatch;
import com.mozu.api.security.AuthTicket;
import org.apache.commons.lang.StringUtils;

/** <summary>
 * 
 * </summary>
 */
public class OrderItemResource {
	///
	/// <see cref="Mozu.Api.ApiContext"/>
	///
	private ApiContext _apiContext;


	public OrderItemResource(ApiContext apiContext) 
	{
		_apiContext = apiContext;
	}

	
	/**
	 * 
	 * <p><pre><code>
	 *	OrderItem orderitem = new OrderItem();
	 *	OrderItem orderItem = orderitem.getItem( checkoutId,  itemId);
	 * </code></pre></p>
	 * @param checkoutId 
	 * @param itemId 
	 * @return com.mozu.api.contracts.commerceruntime.orders.OrderItem
	 * @see com.mozu.api.contracts.commerceruntime.orders.OrderItem
	 */
	public com.mozu.api.contracts.commerceruntime.orders.OrderItem getItem(String checkoutId, String itemId) throws Exception
	{
		return getItem( checkoutId,  itemId,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	OrderItem orderitem = new OrderItem();
	 *	CountDownLatch latch = orderitem.getItem( checkoutId,  itemId, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param checkoutId 
	 * @param itemId 
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.commerceruntime.orders.OrderItem
	 * @see com.mozu.api.contracts.commerceruntime.orders.OrderItem
	 */
	public CountDownLatch getItemAsync(String checkoutId, String itemId, AsyncCallback<com.mozu.api.contracts.commerceruntime.orders.OrderItem> callback) throws Exception
	{
		return getItemAsync( checkoutId,  itemId,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	OrderItem orderitem = new OrderItem();
	 *	OrderItem orderItem = orderitem.getItem( checkoutId,  itemId,  responseFields);
	 * </code></pre></p>
	 * @param checkoutId 
	 * @param itemId 
	 * @param responseFields 
	 * @return com.mozu.api.contracts.commerceruntime.orders.OrderItem
	 * @see com.mozu.api.contracts.commerceruntime.orders.OrderItem
	 */
	public com.mozu.api.contracts.commerceruntime.orders.OrderItem getItem(String checkoutId, String itemId, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.orders.OrderItem> client = com.mozu.api.clients.commerce.checkouts.OrderItemClient.getItemClient( checkoutId,  itemId,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	OrderItem orderitem = new OrderItem();
	 *	CountDownLatch latch = orderitem.getItem( checkoutId,  itemId,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param checkoutId 
	 * @param itemId 
	 * @param responseFields 
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.commerceruntime.orders.OrderItem
	 * @see com.mozu.api.contracts.commerceruntime.orders.OrderItem
	 */
	public CountDownLatch getItemAsync(String checkoutId, String itemId, String responseFields, AsyncCallback<com.mozu.api.contracts.commerceruntime.orders.OrderItem> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.orders.OrderItem> client = com.mozu.api.clients.commerce.checkouts.OrderItemClient.getItemClient( checkoutId,  itemId,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	OrderItem orderitem = new OrderItem();
	 *	OrderItem orderItem = orderitem.getItemViaLineId( checkoutId,  lineId);
	 * </code></pre></p>
	 * @param checkoutId 
	 * @param lineId 
	 * @return com.mozu.api.contracts.commerceruntime.orders.OrderItem
	 * @see com.mozu.api.contracts.commerceruntime.orders.OrderItem
	 */
	public com.mozu.api.contracts.commerceruntime.orders.OrderItem getItemViaLineId(String checkoutId, Integer lineId) throws Exception
	{
		return getItemViaLineId( checkoutId,  lineId,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	OrderItem orderitem = new OrderItem();
	 *	CountDownLatch latch = orderitem.getItemViaLineId( checkoutId,  lineId, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param checkoutId 
	 * @param lineId 
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.commerceruntime.orders.OrderItem
	 * @see com.mozu.api.contracts.commerceruntime.orders.OrderItem
	 */
	public CountDownLatch getItemViaLineIdAsync(String checkoutId, Integer lineId, AsyncCallback<com.mozu.api.contracts.commerceruntime.orders.OrderItem> callback) throws Exception
	{
		return getItemViaLineIdAsync( checkoutId,  lineId,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	OrderItem orderitem = new OrderItem();
	 *	OrderItem orderItem = orderitem.getItemViaLineId( checkoutId,  lineId,  responseFields);
	 * </code></pre></p>
	 * @param checkoutId 
	 * @param lineId 
	 * @param responseFields 
	 * @return com.mozu.api.contracts.commerceruntime.orders.OrderItem
	 * @see com.mozu.api.contracts.commerceruntime.orders.OrderItem
	 */
	public com.mozu.api.contracts.commerceruntime.orders.OrderItem getItemViaLineId(String checkoutId, Integer lineId, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.orders.OrderItem> client = com.mozu.api.clients.commerce.checkouts.OrderItemClient.getItemViaLineIdClient( checkoutId,  lineId,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	OrderItem orderitem = new OrderItem();
	 *	CountDownLatch latch = orderitem.getItemViaLineId( checkoutId,  lineId,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param checkoutId 
	 * @param lineId 
	 * @param responseFields 
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.commerceruntime.orders.OrderItem
	 * @see com.mozu.api.contracts.commerceruntime.orders.OrderItem
	 */
	public CountDownLatch getItemViaLineIdAsync(String checkoutId, Integer lineId, String responseFields, AsyncCallback<com.mozu.api.contracts.commerceruntime.orders.OrderItem> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.orders.OrderItem> client = com.mozu.api.clients.commerce.checkouts.OrderItemClient.getItemViaLineIdClient( checkoutId,  lineId,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	OrderItem orderitem = new OrderItem();
	 *	OrderItemCollection orderItemCollection = orderitem.getItems( checkoutId);
	 * </code></pre></p>
	 * @param checkoutId 
	 * @return com.mozu.api.contracts.commerceruntime.orders.OrderItemCollection
	 * @see com.mozu.api.contracts.commerceruntime.orders.OrderItemCollection
	 */
	public com.mozu.api.contracts.commerceruntime.orders.OrderItemCollection getItems(String checkoutId) throws Exception
	{
		return getItems( checkoutId,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	OrderItem orderitem = new OrderItem();
	 *	CountDownLatch latch = orderitem.getItems( checkoutId, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param checkoutId 
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.commerceruntime.orders.OrderItemCollection
	 * @see com.mozu.api.contracts.commerceruntime.orders.OrderItemCollection
	 */
	public CountDownLatch getItemsAsync(String checkoutId, AsyncCallback<com.mozu.api.contracts.commerceruntime.orders.OrderItemCollection> callback) throws Exception
	{
		return getItemsAsync( checkoutId,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	OrderItem orderitem = new OrderItem();
	 *	OrderItemCollection orderItemCollection = orderitem.getItems( checkoutId,  responseFields);
	 * </code></pre></p>
	 * @param checkoutId 
	 * @param responseFields 
	 * @return com.mozu.api.contracts.commerceruntime.orders.OrderItemCollection
	 * @see com.mozu.api.contracts.commerceruntime.orders.OrderItemCollection
	 */
	public com.mozu.api.contracts.commerceruntime.orders.OrderItemCollection getItems(String checkoutId, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.orders.OrderItemCollection> client = com.mozu.api.clients.commerce.checkouts.OrderItemClient.getItemsClient( checkoutId,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	OrderItem orderitem = new OrderItem();
	 *	CountDownLatch latch = orderitem.getItems( checkoutId,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param checkoutId 
	 * @param responseFields 
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.commerceruntime.orders.OrderItemCollection
	 * @see com.mozu.api.contracts.commerceruntime.orders.OrderItemCollection
	 */
	public CountDownLatch getItemsAsync(String checkoutId, String responseFields, AsyncCallback<com.mozu.api.contracts.commerceruntime.orders.OrderItemCollection> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.orders.OrderItemCollection> client = com.mozu.api.clients.commerce.checkouts.OrderItemClient.getItemsClient( checkoutId,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	OrderItem orderitem = new OrderItem();
	 *	Checkout checkout = orderitem.updateItemDestination( checkoutId,  itemId,  destinationId);
	 * </code></pre></p>
	 * @param checkoutId 
	 * @param destinationId 
	 * @param itemId 
	 * @return com.mozu.api.contracts.commerceruntime.checkouts.Checkout
	 * @see com.mozu.api.contracts.commerceruntime.checkouts.Checkout
	 */
	public com.mozu.api.contracts.commerceruntime.checkouts.Checkout updateItemDestination(String checkoutId, String itemId, String destinationId) throws Exception
	{
		return updateItemDestination( checkoutId,  itemId,  destinationId,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	OrderItem orderitem = new OrderItem();
	 *	CountDownLatch latch = orderitem.updateItemDestination( checkoutId,  itemId,  destinationId, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param checkoutId 
	 * @param destinationId 
	 * @param itemId 
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.commerceruntime.checkouts.Checkout
	 * @see com.mozu.api.contracts.commerceruntime.checkouts.Checkout
	 */
	public CountDownLatch updateItemDestinationAsync(String checkoutId, String itemId, String destinationId, AsyncCallback<com.mozu.api.contracts.commerceruntime.checkouts.Checkout> callback) throws Exception
	{
		return updateItemDestinationAsync( checkoutId,  itemId,  destinationId,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	OrderItem orderitem = new OrderItem();
	 *	Checkout checkout = orderitem.updateItemDestination( checkoutId,  itemId,  destinationId,  responseFields);
	 * </code></pre></p>
	 * @param checkoutId 
	 * @param destinationId 
	 * @param itemId 
	 * @param responseFields 
	 * @return com.mozu.api.contracts.commerceruntime.checkouts.Checkout
	 * @see com.mozu.api.contracts.commerceruntime.checkouts.Checkout
	 */
	public com.mozu.api.contracts.commerceruntime.checkouts.Checkout updateItemDestination(String checkoutId, String itemId, String destinationId, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.checkouts.Checkout> client = com.mozu.api.clients.commerce.checkouts.OrderItemClient.updateItemDestinationClient( checkoutId,  itemId,  destinationId,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	OrderItem orderitem = new OrderItem();
	 *	CountDownLatch latch = orderitem.updateItemDestination( checkoutId,  itemId,  destinationId,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param checkoutId 
	 * @param destinationId 
	 * @param itemId 
	 * @param responseFields 
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.commerceruntime.checkouts.Checkout
	 * @see com.mozu.api.contracts.commerceruntime.checkouts.Checkout
	 */
	public CountDownLatch updateItemDestinationAsync(String checkoutId, String itemId, String destinationId, String responseFields, AsyncCallback<com.mozu.api.contracts.commerceruntime.checkouts.Checkout> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.checkouts.Checkout> client = com.mozu.api.clients.commerce.checkouts.OrderItemClient.updateItemDestinationClient( checkoutId,  itemId,  destinationId,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	OrderItem orderitem = new OrderItem();
	 *	Checkout checkout = orderitem.splitItem( checkoutId,  itemId);
	 * </code></pre></p>
	 * @param checkoutId 
	 * @param itemId 
	 * @return com.mozu.api.contracts.commerceruntime.checkouts.Checkout
	 * @see com.mozu.api.contracts.commerceruntime.checkouts.Checkout
	 */
	public com.mozu.api.contracts.commerceruntime.checkouts.Checkout splitItem(String checkoutId, String itemId) throws Exception
	{
		return splitItem( checkoutId,  itemId,  null,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	OrderItem orderitem = new OrderItem();
	 *	CountDownLatch latch = orderitem.splitItem( checkoutId,  itemId, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param checkoutId 
	 * @param itemId 
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.commerceruntime.checkouts.Checkout
	 * @see com.mozu.api.contracts.commerceruntime.checkouts.Checkout
	 */
	public CountDownLatch splitItemAsync(String checkoutId, String itemId, AsyncCallback<com.mozu.api.contracts.commerceruntime.checkouts.Checkout> callback) throws Exception
	{
		return splitItemAsync( checkoutId,  itemId,  null,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	OrderItem orderitem = new OrderItem();
	 *	Checkout checkout = orderitem.splitItem( checkoutId,  itemId,  quantity,  responseFields);
	 * </code></pre></p>
	 * @param checkoutId 
	 * @param itemId 
	 * @param quantity 
	 * @param responseFields 
	 * @return com.mozu.api.contracts.commerceruntime.checkouts.Checkout
	 * @see com.mozu.api.contracts.commerceruntime.checkouts.Checkout
	 */
	public com.mozu.api.contracts.commerceruntime.checkouts.Checkout splitItem(String checkoutId, String itemId, Integer quantity, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.checkouts.Checkout> client = com.mozu.api.clients.commerce.checkouts.OrderItemClient.splitItemClient( checkoutId,  itemId,  quantity,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	OrderItem orderitem = new OrderItem();
	 *	CountDownLatch latch = orderitem.splitItem( checkoutId,  itemId,  quantity,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param checkoutId 
	 * @param itemId 
	 * @param quantity 
	 * @param responseFields 
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.commerceruntime.checkouts.Checkout
	 * @see com.mozu.api.contracts.commerceruntime.checkouts.Checkout
	 */
	public CountDownLatch splitItemAsync(String checkoutId, String itemId, Integer quantity, String responseFields, AsyncCallback<com.mozu.api.contracts.commerceruntime.checkouts.Checkout> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.checkouts.Checkout> client = com.mozu.api.clients.commerce.checkouts.OrderItemClient.splitItemClient( checkoutId,  itemId,  quantity,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	OrderItem orderitem = new OrderItem();
	 *	Checkout checkout = orderitem.bulkUpdateItemDestinations( itemsForDestination,  checkoutId);
	 * </code></pre></p>
	 * @param checkoutId 
	 * @param itemsForDestination 
	 * @return com.mozu.api.contracts.commerceruntime.checkouts.Checkout
	 * @see com.mozu.api.contracts.commerceruntime.checkouts.Checkout
	 * @see com.mozu.api.contracts.commerceruntime.checkouts.ItemsForDestination
	 */
	public com.mozu.api.contracts.commerceruntime.checkouts.Checkout bulkUpdateItemDestinations(List<com.mozu.api.contracts.commerceruntime.checkouts.ItemsForDestination> itemsForDestination, String checkoutId) throws Exception
	{
		return bulkUpdateItemDestinations( itemsForDestination,  checkoutId,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	OrderItem orderitem = new OrderItem();
	 *	CountDownLatch latch = orderitem.bulkUpdateItemDestinations( itemsForDestination,  checkoutId, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param checkoutId 
	 * @param  callback callback handler for asynchronous operations
	 * @param itemsForDestination 
	 * @return com.mozu.api.contracts.commerceruntime.checkouts.Checkout
	 * @see com.mozu.api.contracts.commerceruntime.checkouts.Checkout
	 * @see com.mozu.api.contracts.commerceruntime.checkouts.ItemsForDestination
	 */
	public CountDownLatch bulkUpdateItemDestinationsAsync(List<com.mozu.api.contracts.commerceruntime.checkouts.ItemsForDestination> itemsForDestination, String checkoutId, AsyncCallback<com.mozu.api.contracts.commerceruntime.checkouts.Checkout> callback) throws Exception
	{
		return bulkUpdateItemDestinationsAsync( itemsForDestination,  checkoutId,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	OrderItem orderitem = new OrderItem();
	 *	Checkout checkout = orderitem.bulkUpdateItemDestinations( itemsForDestination,  checkoutId,  responseFields);
	 * </code></pre></p>
	 * @param checkoutId 
	 * @param responseFields 
	 * @param itemsForDestination 
	 * @return com.mozu.api.contracts.commerceruntime.checkouts.Checkout
	 * @see com.mozu.api.contracts.commerceruntime.checkouts.Checkout
	 * @see com.mozu.api.contracts.commerceruntime.checkouts.ItemsForDestination
	 */
	public com.mozu.api.contracts.commerceruntime.checkouts.Checkout bulkUpdateItemDestinations(List<com.mozu.api.contracts.commerceruntime.checkouts.ItemsForDestination> itemsForDestination, String checkoutId, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.checkouts.Checkout> client = com.mozu.api.clients.commerce.checkouts.OrderItemClient.bulkUpdateItemDestinationsClient( itemsForDestination,  checkoutId,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	OrderItem orderitem = new OrderItem();
	 *	CountDownLatch latch = orderitem.bulkUpdateItemDestinations( itemsForDestination,  checkoutId,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param checkoutId 
	 * @param responseFields 
	 * @param  callback callback handler for asynchronous operations
	 * @param itemsForDestination 
	 * @return com.mozu.api.contracts.commerceruntime.checkouts.Checkout
	 * @see com.mozu.api.contracts.commerceruntime.checkouts.Checkout
	 * @see com.mozu.api.contracts.commerceruntime.checkouts.ItemsForDestination
	 */
	public CountDownLatch bulkUpdateItemDestinationsAsync(List<com.mozu.api.contracts.commerceruntime.checkouts.ItemsForDestination> itemsForDestination, String checkoutId, String responseFields, AsyncCallback<com.mozu.api.contracts.commerceruntime.checkouts.Checkout> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.checkouts.Checkout> client = com.mozu.api.clients.commerce.checkouts.OrderItemClient.bulkUpdateItemDestinationsClient( itemsForDestination,  checkoutId,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	OrderItem orderitem = new OrderItem();
	 *	Checkout checkout = orderitem.createItem( item,  checkoutId);
	 * </code></pre></p>
	 * @param checkoutId 
	 * @param item 
	 * @return com.mozu.api.contracts.commerceruntime.checkouts.Checkout
	 * @see com.mozu.api.contracts.commerceruntime.checkouts.Checkout
	 * @see com.mozu.api.contracts.commerceruntime.orders.OrderItem
	 */
	public com.mozu.api.contracts.commerceruntime.checkouts.Checkout createItem(com.mozu.api.contracts.commerceruntime.orders.OrderItem item, String checkoutId) throws Exception
	{
		return createItem( item,  checkoutId,  null,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	OrderItem orderitem = new OrderItem();
	 *	CountDownLatch latch = orderitem.createItem( item,  checkoutId, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param checkoutId 
	 * @param  callback callback handler for asynchronous operations
	 * @param item 
	 * @return com.mozu.api.contracts.commerceruntime.checkouts.Checkout
	 * @see com.mozu.api.contracts.commerceruntime.checkouts.Checkout
	 * @see com.mozu.api.contracts.commerceruntime.orders.OrderItem
	 */
	public CountDownLatch createItemAsync(com.mozu.api.contracts.commerceruntime.orders.OrderItem item, String checkoutId, AsyncCallback<com.mozu.api.contracts.commerceruntime.checkouts.Checkout> callback) throws Exception
	{
		return createItemAsync( item,  checkoutId,  null,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	OrderItem orderitem = new OrderItem();
	 *	Checkout checkout = orderitem.createItem( item,  checkoutId,  skipInventoryCheck,  responseFields);
	 * </code></pre></p>
	 * @param checkoutId 
	 * @param responseFields 
	 * @param skipInventoryCheck 
	 * @param item 
	 * @return com.mozu.api.contracts.commerceruntime.checkouts.Checkout
	 * @see com.mozu.api.contracts.commerceruntime.checkouts.Checkout
	 * @see com.mozu.api.contracts.commerceruntime.orders.OrderItem
	 */
	public com.mozu.api.contracts.commerceruntime.checkouts.Checkout createItem(com.mozu.api.contracts.commerceruntime.orders.OrderItem item, String checkoutId, Boolean skipInventoryCheck, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.checkouts.Checkout> client = com.mozu.api.clients.commerce.checkouts.OrderItemClient.createItemClient( item,  checkoutId,  skipInventoryCheck,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	OrderItem orderitem = new OrderItem();
	 *	CountDownLatch latch = orderitem.createItem( item,  checkoutId,  skipInventoryCheck,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param checkoutId 
	 * @param responseFields 
	 * @param skipInventoryCheck 
	 * @param  callback callback handler for asynchronous operations
	 * @param item 
	 * @return com.mozu.api.contracts.commerceruntime.checkouts.Checkout
	 * @see com.mozu.api.contracts.commerceruntime.checkouts.Checkout
	 * @see com.mozu.api.contracts.commerceruntime.orders.OrderItem
	 */
	public CountDownLatch createItemAsync(com.mozu.api.contracts.commerceruntime.orders.OrderItem item, String checkoutId, Boolean skipInventoryCheck, String responseFields, AsyncCallback<com.mozu.api.contracts.commerceruntime.checkouts.Checkout> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.checkouts.Checkout> client = com.mozu.api.clients.commerce.checkouts.OrderItemClient.createItemClient( item,  checkoutId,  skipInventoryCheck,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	OrderItem orderitem = new OrderItem();
	 *	Checkout checkout = orderitem.updateItemDuty( checkoutId,  itemId,  dutyAmount);
	 * </code></pre></p>
	 * @param checkoutId 
	 * @param dutyAmount 
	 * @param itemId 
	 * @return com.mozu.api.contracts.commerceruntime.checkouts.Checkout
	 * @see com.mozu.api.contracts.commerceruntime.checkouts.Checkout
	 */
	public com.mozu.api.contracts.commerceruntime.checkouts.Checkout updateItemDuty(String checkoutId, String itemId, Double dutyAmount) throws Exception
	{
		return updateItemDuty( checkoutId,  itemId,  dutyAmount,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	OrderItem orderitem = new OrderItem();
	 *	CountDownLatch latch = orderitem.updateItemDuty( checkoutId,  itemId,  dutyAmount, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param checkoutId 
	 * @param dutyAmount 
	 * @param itemId 
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.commerceruntime.checkouts.Checkout
	 * @see com.mozu.api.contracts.commerceruntime.checkouts.Checkout
	 */
	public CountDownLatch updateItemDutyAsync(String checkoutId, String itemId, Double dutyAmount, AsyncCallback<com.mozu.api.contracts.commerceruntime.checkouts.Checkout> callback) throws Exception
	{
		return updateItemDutyAsync( checkoutId,  itemId,  dutyAmount,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	OrderItem orderitem = new OrderItem();
	 *	Checkout checkout = orderitem.updateItemDuty( checkoutId,  itemId,  dutyAmount,  responseFields);
	 * </code></pre></p>
	 * @param checkoutId 
	 * @param dutyAmount 
	 * @param itemId 
	 * @param responseFields 
	 * @return com.mozu.api.contracts.commerceruntime.checkouts.Checkout
	 * @see com.mozu.api.contracts.commerceruntime.checkouts.Checkout
	 */
	public com.mozu.api.contracts.commerceruntime.checkouts.Checkout updateItemDuty(String checkoutId, String itemId, Double dutyAmount, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.checkouts.Checkout> client = com.mozu.api.clients.commerce.checkouts.OrderItemClient.updateItemDutyClient( checkoutId,  itemId,  dutyAmount,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	OrderItem orderitem = new OrderItem();
	 *	CountDownLatch latch = orderitem.updateItemDuty( checkoutId,  itemId,  dutyAmount,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param checkoutId 
	 * @param dutyAmount 
	 * @param itemId 
	 * @param responseFields 
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.commerceruntime.checkouts.Checkout
	 * @see com.mozu.api.contracts.commerceruntime.checkouts.Checkout
	 */
	public CountDownLatch updateItemDutyAsync(String checkoutId, String itemId, Double dutyAmount, String responseFields, AsyncCallback<com.mozu.api.contracts.commerceruntime.checkouts.Checkout> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.checkouts.Checkout> client = com.mozu.api.clients.commerce.checkouts.OrderItemClient.updateItemDutyClient( checkoutId,  itemId,  dutyAmount,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	OrderItem orderitem = new OrderItem();
	 *	Checkout checkout = orderitem.updateItemFulfillment( item,  checkoutId,  itemId);
	 * </code></pre></p>
	 * @param checkoutId 
	 * @param itemId 
	 * @param item 
	 * @return com.mozu.api.contracts.commerceruntime.checkouts.Checkout
	 * @see com.mozu.api.contracts.commerceruntime.checkouts.Checkout
	 * @see com.mozu.api.contracts.commerceruntime.orders.OrderItem
	 */
	public com.mozu.api.contracts.commerceruntime.checkouts.Checkout updateItemFulfillment(com.mozu.api.contracts.commerceruntime.orders.OrderItem item, String checkoutId, String itemId) throws Exception
	{
		return updateItemFulfillment( item,  checkoutId,  itemId,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	OrderItem orderitem = new OrderItem();
	 *	CountDownLatch latch = orderitem.updateItemFulfillment( item,  checkoutId,  itemId, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param checkoutId 
	 * @param itemId 
	 * @param  callback callback handler for asynchronous operations
	 * @param item 
	 * @return com.mozu.api.contracts.commerceruntime.checkouts.Checkout
	 * @see com.mozu.api.contracts.commerceruntime.checkouts.Checkout
	 * @see com.mozu.api.contracts.commerceruntime.orders.OrderItem
	 */
	public CountDownLatch updateItemFulfillmentAsync(com.mozu.api.contracts.commerceruntime.orders.OrderItem item, String checkoutId, String itemId, AsyncCallback<com.mozu.api.contracts.commerceruntime.checkouts.Checkout> callback) throws Exception
	{
		return updateItemFulfillmentAsync( item,  checkoutId,  itemId,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	OrderItem orderitem = new OrderItem();
	 *	Checkout checkout = orderitem.updateItemFulfillment( item,  checkoutId,  itemId,  responseFields);
	 * </code></pre></p>
	 * @param checkoutId 
	 * @param itemId 
	 * @param responseFields 
	 * @param item 
	 * @return com.mozu.api.contracts.commerceruntime.checkouts.Checkout
	 * @see com.mozu.api.contracts.commerceruntime.checkouts.Checkout
	 * @see com.mozu.api.contracts.commerceruntime.orders.OrderItem
	 */
	public com.mozu.api.contracts.commerceruntime.checkouts.Checkout updateItemFulfillment(com.mozu.api.contracts.commerceruntime.orders.OrderItem item, String checkoutId, String itemId, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.checkouts.Checkout> client = com.mozu.api.clients.commerce.checkouts.OrderItemClient.updateItemFulfillmentClient( item,  checkoutId,  itemId,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	OrderItem orderitem = new OrderItem();
	 *	CountDownLatch latch = orderitem.updateItemFulfillment( item,  checkoutId,  itemId,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param checkoutId 
	 * @param itemId 
	 * @param responseFields 
	 * @param  callback callback handler for asynchronous operations
	 * @param item 
	 * @return com.mozu.api.contracts.commerceruntime.checkouts.Checkout
	 * @see com.mozu.api.contracts.commerceruntime.checkouts.Checkout
	 * @see com.mozu.api.contracts.commerceruntime.orders.OrderItem
	 */
	public CountDownLatch updateItemFulfillmentAsync(com.mozu.api.contracts.commerceruntime.orders.OrderItem item, String checkoutId, String itemId, String responseFields, AsyncCallback<com.mozu.api.contracts.commerceruntime.checkouts.Checkout> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.checkouts.Checkout> client = com.mozu.api.clients.commerce.checkouts.OrderItemClient.updateItemFulfillmentClient( item,  checkoutId,  itemId,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	OrderItem orderitem = new OrderItem();
	 *	Checkout checkout = orderitem.updateItemProductPrice( checkoutId,  itemId,  price);
	 * </code></pre></p>
	 * @param checkoutId 
	 * @param itemId 
	 * @param price 
	 * @return com.mozu.api.contracts.commerceruntime.checkouts.Checkout
	 * @see com.mozu.api.contracts.commerceruntime.checkouts.Checkout
	 */
	public com.mozu.api.contracts.commerceruntime.checkouts.Checkout updateItemProductPrice(String checkoutId, String itemId, Double price) throws Exception
	{
		return updateItemProductPrice( checkoutId,  itemId,  price,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	OrderItem orderitem = new OrderItem();
	 *	CountDownLatch latch = orderitem.updateItemProductPrice( checkoutId,  itemId,  price, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param checkoutId 
	 * @param itemId 
	 * @param price 
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.commerceruntime.checkouts.Checkout
	 * @see com.mozu.api.contracts.commerceruntime.checkouts.Checkout
	 */
	public CountDownLatch updateItemProductPriceAsync(String checkoutId, String itemId, Double price, AsyncCallback<com.mozu.api.contracts.commerceruntime.checkouts.Checkout> callback) throws Exception
	{
		return updateItemProductPriceAsync( checkoutId,  itemId,  price,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	OrderItem orderitem = new OrderItem();
	 *	Checkout checkout = orderitem.updateItemProductPrice( checkoutId,  itemId,  price,  responseFields);
	 * </code></pre></p>
	 * @param checkoutId 
	 * @param itemId 
	 * @param price 
	 * @param responseFields 
	 * @return com.mozu.api.contracts.commerceruntime.checkouts.Checkout
	 * @see com.mozu.api.contracts.commerceruntime.checkouts.Checkout
	 */
	public com.mozu.api.contracts.commerceruntime.checkouts.Checkout updateItemProductPrice(String checkoutId, String itemId, Double price, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.checkouts.Checkout> client = com.mozu.api.clients.commerce.checkouts.OrderItemClient.updateItemProductPriceClient( checkoutId,  itemId,  price,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	OrderItem orderitem = new OrderItem();
	 *	CountDownLatch latch = orderitem.updateItemProductPrice( checkoutId,  itemId,  price,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param checkoutId 
	 * @param itemId 
	 * @param price 
	 * @param responseFields 
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.commerceruntime.checkouts.Checkout
	 * @see com.mozu.api.contracts.commerceruntime.checkouts.Checkout
	 */
	public CountDownLatch updateItemProductPriceAsync(String checkoutId, String itemId, Double price, String responseFields, AsyncCallback<com.mozu.api.contracts.commerceruntime.checkouts.Checkout> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.checkouts.Checkout> client = com.mozu.api.clients.commerce.checkouts.OrderItemClient.updateItemProductPriceClient( checkoutId,  itemId,  price,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	OrderItem orderitem = new OrderItem();
	 *	Checkout checkout = orderitem.updateQuantity( checkoutId,  itemId,  quantity);
	 * </code></pre></p>
	 * @param checkoutId 
	 * @param itemId 
	 * @param quantity 
	 * @return com.mozu.api.contracts.commerceruntime.checkouts.Checkout
	 * @see com.mozu.api.contracts.commerceruntime.checkouts.Checkout
	 */
	public com.mozu.api.contracts.commerceruntime.checkouts.Checkout updateQuantity(String checkoutId, String itemId, Integer quantity) throws Exception
	{
		return updateQuantity( checkoutId,  itemId,  quantity,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	OrderItem orderitem = new OrderItem();
	 *	CountDownLatch latch = orderitem.updateQuantity( checkoutId,  itemId,  quantity, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param checkoutId 
	 * @param itemId 
	 * @param quantity 
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.commerceruntime.checkouts.Checkout
	 * @see com.mozu.api.contracts.commerceruntime.checkouts.Checkout
	 */
	public CountDownLatch updateQuantityAsync(String checkoutId, String itemId, Integer quantity, AsyncCallback<com.mozu.api.contracts.commerceruntime.checkouts.Checkout> callback) throws Exception
	{
		return updateQuantityAsync( checkoutId,  itemId,  quantity,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	OrderItem orderitem = new OrderItem();
	 *	Checkout checkout = orderitem.updateQuantity( checkoutId,  itemId,  quantity,  responseFields);
	 * </code></pre></p>
	 * @param checkoutId 
	 * @param itemId 
	 * @param quantity 
	 * @param responseFields 
	 * @return com.mozu.api.contracts.commerceruntime.checkouts.Checkout
	 * @see com.mozu.api.contracts.commerceruntime.checkouts.Checkout
	 */
	public com.mozu.api.contracts.commerceruntime.checkouts.Checkout updateQuantity(String checkoutId, String itemId, Integer quantity, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.checkouts.Checkout> client = com.mozu.api.clients.commerce.checkouts.OrderItemClient.updateQuantityClient( checkoutId,  itemId,  quantity,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	OrderItem orderitem = new OrderItem();
	 *	CountDownLatch latch = orderitem.updateQuantity( checkoutId,  itemId,  quantity,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param checkoutId 
	 * @param itemId 
	 * @param quantity 
	 * @param responseFields 
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.commerceruntime.checkouts.Checkout
	 * @see com.mozu.api.contracts.commerceruntime.checkouts.Checkout
	 */
	public CountDownLatch updateQuantityAsync(String checkoutId, String itemId, Integer quantity, String responseFields, AsyncCallback<com.mozu.api.contracts.commerceruntime.checkouts.Checkout> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.checkouts.Checkout> client = com.mozu.api.clients.commerce.checkouts.OrderItemClient.updateQuantityClient( checkoutId,  itemId,  quantity,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	OrderItem orderitem = new OrderItem();
	 *	Checkout checkout = orderitem.deleteItem( checkoutId,  itemId);
	 * </code></pre></p>
	 * @param checkoutId 
	 * @param itemId 
	 * @return com.mozu.api.contracts.commerceruntime.checkouts.Checkout
	 * @see com.mozu.api.contracts.commerceruntime.checkouts.Checkout
	 */
	public com.mozu.api.contracts.commerceruntime.checkouts.Checkout deleteItem(String checkoutId, String itemId) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.checkouts.Checkout> client = com.mozu.api.clients.commerce.checkouts.OrderItemClient.deleteItemClient( checkoutId,  itemId);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	OrderItem orderitem = new OrderItem();
	 *	CountDownLatch latch = orderitem.deleteItem( checkoutId,  itemId, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param checkoutId 
	 * @param itemId 
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.commerceruntime.checkouts.Checkout
	 * @see com.mozu.api.contracts.commerceruntime.checkouts.Checkout
	 */
	public CountDownLatch deleteItemAsync(String checkoutId, String itemId, AsyncCallback<com.mozu.api.contracts.commerceruntime.checkouts.Checkout> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.checkouts.Checkout> client = com.mozu.api.clients.commerce.checkouts.OrderItemClient.deleteItemClient( checkoutId,  itemId);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

}



