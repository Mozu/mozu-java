/**
 *     This code was auto-generated by a Codezu.     
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
 */
package com.mozu.api.resources.commerce.carts;

import com.mozu.api.ApiContext;
import java.util.List;
import java.util.ArrayList;
import com.mozu.api.MozuClient;
import com.mozu.api.MozuClientFactory;
import com.mozu.api.MozuUrl;
import com.mozu.api.Headers;
import org.joda.time.DateTime;
import com.mozu.api.AsyncCallback;
import java.util.concurrent.CountDownLatch;
import com.mozu.api.security.AuthTicket;
import org.apache.commons.lang.StringUtils;

/** <summary>
 * Use the Cart Items subresource to manage a collection of items in an active shopping cart.
 * </summary>
 */
public class CartItemResource {
	///
	/// <see cref="Mozu.Api.ApiContext"/>
	///
	private ApiContext _apiContext;


	public CartItemResource(ApiContext apiContext) 
	{
		_apiContext = apiContext;
	}

	
	/**
	 * 
	 * <p><pre><code>
	 *	CartItem cartitem = new CartItem();
	 *	CartItem cartItem = cartitem.getCartItemByCartId( cartId,  cartItemId);
	 * </code></pre></p>
	 * @param cartId 
	 * @param cartItemId 
	 * @return com.mozu.api.contracts.commerceruntime.carts.CartItem
	 * @see com.mozu.api.contracts.commerceruntime.carts.CartItem
	 */
	public com.mozu.api.contracts.commerceruntime.carts.CartItem getCartItemByCartId(String cartId, String cartItemId) throws Exception
	{
		return getCartItemByCartId( cartId,  cartItemId,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	CartItem cartitem = new CartItem();
	 *	CountDownLatch latch = cartitem.getCartItemByCartId( cartId,  cartItemId, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param cartId 
	 * @param cartItemId 
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.commerceruntime.carts.CartItem
	 * @see com.mozu.api.contracts.commerceruntime.carts.CartItem
	 */
	public CountDownLatch getCartItemByCartIdAsync(String cartId, String cartItemId, AsyncCallback<com.mozu.api.contracts.commerceruntime.carts.CartItem> callback) throws Exception
	{
		return getCartItemByCartIdAsync( cartId,  cartItemId,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	CartItem cartitem = new CartItem();
	 *	CartItem cartItem = cartitem.getCartItemByCartId( cartId,  cartItemId,  responseFields);
	 * </code></pre></p>
	 * @param cartId 
	 * @param cartItemId 
	 * @param responseFields 
	 * @return com.mozu.api.contracts.commerceruntime.carts.CartItem
	 * @see com.mozu.api.contracts.commerceruntime.carts.CartItem
	 */
	public com.mozu.api.contracts.commerceruntime.carts.CartItem getCartItemByCartId(String cartId, String cartItemId, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.carts.CartItem> client = com.mozu.api.clients.commerce.carts.CartItemClient.getCartItemByCartIdClient( cartId,  cartItemId,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CartItem cartitem = new CartItem();
	 *	CountDownLatch latch = cartitem.getCartItemByCartId( cartId,  cartItemId,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param cartId 
	 * @param cartItemId 
	 * @param responseFields 
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.commerceruntime.carts.CartItem
	 * @see com.mozu.api.contracts.commerceruntime.carts.CartItem
	 */
	public CountDownLatch getCartItemByCartIdAsync(String cartId, String cartItemId, String responseFields, AsyncCallback<com.mozu.api.contracts.commerceruntime.carts.CartItem> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.carts.CartItem> client = com.mozu.api.clients.commerce.carts.CartItemClient.getCartItemByCartIdClient( cartId,  cartItemId,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CartItem cartitem = new CartItem();
	 *	CartItemCollection cartItemCollection = cartitem.getCartItemsByCartId( cartId);
	 * </code></pre></p>
	 * @param cartId 
	 * @return com.mozu.api.contracts.commerceruntime.carts.CartItemCollection
	 * @see com.mozu.api.contracts.commerceruntime.carts.CartItemCollection
	 */
	public com.mozu.api.contracts.commerceruntime.carts.CartItemCollection getCartItemsByCartId(String cartId) throws Exception
	{
		return getCartItemsByCartId( cartId,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	CartItem cartitem = new CartItem();
	 *	CountDownLatch latch = cartitem.getCartItemsByCartId( cartId, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param cartId 
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.commerceruntime.carts.CartItemCollection
	 * @see com.mozu.api.contracts.commerceruntime.carts.CartItemCollection
	 */
	public CountDownLatch getCartItemsByCartIdAsync(String cartId, AsyncCallback<com.mozu.api.contracts.commerceruntime.carts.CartItemCollection> callback) throws Exception
	{
		return getCartItemsByCartIdAsync( cartId,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	CartItem cartitem = new CartItem();
	 *	CartItemCollection cartItemCollection = cartitem.getCartItemsByCartId( cartId,  responseFields);
	 * </code></pre></p>
	 * @param cartId 
	 * @param responseFields 
	 * @return com.mozu.api.contracts.commerceruntime.carts.CartItemCollection
	 * @see com.mozu.api.contracts.commerceruntime.carts.CartItemCollection
	 */
	public com.mozu.api.contracts.commerceruntime.carts.CartItemCollection getCartItemsByCartId(String cartId, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.carts.CartItemCollection> client = com.mozu.api.clients.commerce.carts.CartItemClient.getCartItemsByCartIdClient( cartId,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CartItem cartitem = new CartItem();
	 *	CountDownLatch latch = cartitem.getCartItemsByCartId( cartId,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param cartId 
	 * @param responseFields 
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.commerceruntime.carts.CartItemCollection
	 * @see com.mozu.api.contracts.commerceruntime.carts.CartItemCollection
	 */
	public CountDownLatch getCartItemsByCartIdAsync(String cartId, String responseFields, AsyncCallback<com.mozu.api.contracts.commerceruntime.carts.CartItemCollection> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.carts.CartItemCollection> client = com.mozu.api.clients.commerce.carts.CartItemClient.getCartItemsByCartIdClient( cartId,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CartItem cartitem = new CartItem();
	 *	CartItem cartItem = cartitem.getCartItem( cartItemId);
	 * </code></pre></p>
	 * @param cartItemId Identifier of the cart item to delete.
	 * @return com.mozu.api.contracts.commerceruntime.carts.CartItem
	 * @see com.mozu.api.contracts.commerceruntime.carts.CartItem
	 */
	public com.mozu.api.contracts.commerceruntime.carts.CartItem getCartItem(String cartItemId) throws Exception
	{
		return getCartItem( cartItemId,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	CartItem cartitem = new CartItem();
	 *	CountDownLatch latch = cartitem.getCartItem( cartItemId, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param cartItemId Identifier of the cart item to delete.
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.commerceruntime.carts.CartItem
	 * @see com.mozu.api.contracts.commerceruntime.carts.CartItem
	 */
	public CountDownLatch getCartItemAsync(String cartItemId, AsyncCallback<com.mozu.api.contracts.commerceruntime.carts.CartItem> callback) throws Exception
	{
		return getCartItemAsync( cartItemId,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	CartItem cartitem = new CartItem();
	 *	CartItem cartItem = cartitem.getCartItem( cartItemId,  responseFields);
	 * </code></pre></p>
	 * @param cartItemId Identifier of the cart item to delete.
	 * @param responseFields Filtering syntax appended to an API call to increase or decrease the amount of data returned inside a JSON object. This parameter should only be used to retrieve data. Attempting to update data using this parameter may cause data loss.
	 * @return com.mozu.api.contracts.commerceruntime.carts.CartItem
	 * @see com.mozu.api.contracts.commerceruntime.carts.CartItem
	 */
	public com.mozu.api.contracts.commerceruntime.carts.CartItem getCartItem(String cartItemId, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.carts.CartItem> client = com.mozu.api.clients.commerce.carts.CartItemClient.getCartItemClient( cartItemId,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CartItem cartitem = new CartItem();
	 *	CountDownLatch latch = cartitem.getCartItem( cartItemId,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param cartItemId Identifier of the cart item to delete.
	 * @param responseFields Filtering syntax appended to an API call to increase or decrease the amount of data returned inside a JSON object. This parameter should only be used to retrieve data. Attempting to update data using this parameter may cause data loss.
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.commerceruntime.carts.CartItem
	 * @see com.mozu.api.contracts.commerceruntime.carts.CartItem
	 */
	public CountDownLatch getCartItemAsync(String cartItemId, String responseFields, AsyncCallback<com.mozu.api.contracts.commerceruntime.carts.CartItem> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.carts.CartItem> client = com.mozu.api.clients.commerce.carts.CartItemClient.getCartItemClient( cartItemId,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CartItem cartitem = new CartItem();
	 *	CartItemCollection cartItemCollection = cartitem.getCartItems();
	 * </code></pre></p>
	 * @return com.mozu.api.contracts.commerceruntime.carts.CartItemCollection
	 * @see com.mozu.api.contracts.commerceruntime.carts.CartItemCollection
	 */
	public com.mozu.api.contracts.commerceruntime.carts.CartItemCollection getCartItems() throws Exception
	{
		return getCartItems( null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	CartItem cartitem = new CartItem();
	 *	CountDownLatch latch = cartitem.getCartItems( callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.commerceruntime.carts.CartItemCollection
	 * @see com.mozu.api.contracts.commerceruntime.carts.CartItemCollection
	 */
	public CountDownLatch getCartItemsAsync( AsyncCallback<com.mozu.api.contracts.commerceruntime.carts.CartItemCollection> callback) throws Exception
	{
		return getCartItemsAsync( null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	CartItem cartitem = new CartItem();
	 *	CartItemCollection cartItemCollection = cartitem.getCartItems( responseFields);
	 * </code></pre></p>
	 * @param responseFields Filtering syntax appended to an API call to increase or decrease the amount of data returned inside a JSON object. This parameter should only be used to retrieve data. Attempting to update data using this parameter may cause data loss.
	 * @return com.mozu.api.contracts.commerceruntime.carts.CartItemCollection
	 * @see com.mozu.api.contracts.commerceruntime.carts.CartItemCollection
	 */
	public com.mozu.api.contracts.commerceruntime.carts.CartItemCollection getCartItems(String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.carts.CartItemCollection> client = com.mozu.api.clients.commerce.carts.CartItemClient.getCartItemsClient( responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CartItem cartitem = new CartItem();
	 *	CountDownLatch latch = cartitem.getCartItems( responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param responseFields Filtering syntax appended to an API call to increase or decrease the amount of data returned inside a JSON object. This parameter should only be used to retrieve data. Attempting to update data using this parameter may cause data loss.
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.commerceruntime.carts.CartItemCollection
	 * @see com.mozu.api.contracts.commerceruntime.carts.CartItemCollection
	 */
	public CountDownLatch getCartItemsAsync(String responseFields, AsyncCallback<com.mozu.api.contracts.commerceruntime.carts.CartItemCollection> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.carts.CartItemCollection> client = com.mozu.api.clients.commerce.carts.CartItemClient.getCartItemsClient( responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CartItem cartitem = new CartItem();
	 *	Stream stream = cartitem.addItemsToCartByCartId( cartItems,  cartId);
	 * </code></pre></p>
	 * @param cartId 
	 * @param cartItems 
	 * @return Stream
	 * @see Stream
	 * @see com.mozu.api.contracts.commerceruntime.carts.CartItem
	 */
	public java.io.InputStream addItemsToCartByCartId(List<com.mozu.api.contracts.commerceruntime.carts.CartItem> cartItems, String cartId) throws Exception
	{
		return addItemsToCartByCartId( cartItems,  cartId,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	CartItem cartitem = new CartItem();
	 *	CountDownLatch latch = cartitem.addItemsToCartByCartId( cartItems,  cartId, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param cartId 
	 * @param  callback callback handler for asynchronous operations
	 * @param cartItems 
	 * @return Stream
	 * @see Stream
	 * @see com.mozu.api.contracts.commerceruntime.carts.CartItem
	 */
	public CountDownLatch addItemsToCartByCartIdAsync(List<com.mozu.api.contracts.commerceruntime.carts.CartItem> cartItems, String cartId, AsyncCallback<java.io.InputStream> callback) throws Exception
	{
		return addItemsToCartByCartIdAsync( cartItems,  cartId,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	CartItem cartitem = new CartItem();
	 *	Stream stream = cartitem.addItemsToCartByCartId( cartItems,  cartId,  throwErrorOnInvalidItems);
	 * </code></pre></p>
	 * @param cartId 
	 * @param throwErrorOnInvalidItems 
	 * @param cartItems 
	 * @return Stream
	 * @see Stream
	 * @see com.mozu.api.contracts.commerceruntime.carts.CartItem
	 */
	public java.io.InputStream addItemsToCartByCartId(List<com.mozu.api.contracts.commerceruntime.carts.CartItem> cartItems, String cartId, Boolean throwErrorOnInvalidItems) throws Exception
	{
		MozuClient<java.io.InputStream> client = com.mozu.api.clients.commerce.carts.CartItemClient.addItemsToCartByCartIdClient( cartItems,  cartId,  throwErrorOnInvalidItems);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CartItem cartitem = new CartItem();
	 *	CountDownLatch latch = cartitem.addItemsToCartByCartId( cartItems,  cartId,  throwErrorOnInvalidItems, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param cartId 
	 * @param throwErrorOnInvalidItems 
	 * @param  callback callback handler for asynchronous operations
	 * @param cartItems 
	 * @return Stream
	 * @see Stream
	 * @see com.mozu.api.contracts.commerceruntime.carts.CartItem
	 */
	public CountDownLatch addItemsToCartByCartIdAsync(List<com.mozu.api.contracts.commerceruntime.carts.CartItem> cartItems, String cartId, Boolean throwErrorOnInvalidItems, AsyncCallback<java.io.InputStream> callback) throws Exception
	{
		MozuClient<java.io.InputStream> client = com.mozu.api.clients.commerce.carts.CartItemClient.addItemsToCartByCartIdClient( cartItems,  cartId,  throwErrorOnInvalidItems);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CartItem cartitem = new CartItem();
	 *	CartItem cartItem = cartitem.addItemToCartByCartId( cartItem,  cartId);
	 * </code></pre></p>
	 * @param cartId 
	 * @param cartItem 
	 * @return com.mozu.api.contracts.commerceruntime.carts.CartItem
	 * @see com.mozu.api.contracts.commerceruntime.carts.CartItem
	 * @see com.mozu.api.contracts.commerceruntime.carts.CartItem
	 */
	public com.mozu.api.contracts.commerceruntime.carts.CartItem addItemToCartByCartId(com.mozu.api.contracts.commerceruntime.carts.CartItem cartItem, String cartId) throws Exception
	{
		return addItemToCartByCartId( cartItem,  cartId,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	CartItem cartitem = new CartItem();
	 *	CountDownLatch latch = cartitem.addItemToCartByCartId( cartItem,  cartId, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param cartId 
	 * @param  callback callback handler for asynchronous operations
	 * @param cartItem 
	 * @return com.mozu.api.contracts.commerceruntime.carts.CartItem
	 * @see com.mozu.api.contracts.commerceruntime.carts.CartItem
	 * @see com.mozu.api.contracts.commerceruntime.carts.CartItem
	 */
	public CountDownLatch addItemToCartByCartIdAsync(com.mozu.api.contracts.commerceruntime.carts.CartItem cartItem, String cartId, AsyncCallback<com.mozu.api.contracts.commerceruntime.carts.CartItem> callback) throws Exception
	{
		return addItemToCartByCartIdAsync( cartItem,  cartId,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	CartItem cartitem = new CartItem();
	 *	CartItem cartItem = cartitem.addItemToCartByCartId( cartItem,  cartId,  responseFields);
	 * </code></pre></p>
	 * @param cartId 
	 * @param responseFields 
	 * @param cartItem 
	 * @return com.mozu.api.contracts.commerceruntime.carts.CartItem
	 * @see com.mozu.api.contracts.commerceruntime.carts.CartItem
	 * @see com.mozu.api.contracts.commerceruntime.carts.CartItem
	 */
	public com.mozu.api.contracts.commerceruntime.carts.CartItem addItemToCartByCartId(com.mozu.api.contracts.commerceruntime.carts.CartItem cartItem, String cartId, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.carts.CartItem> client = com.mozu.api.clients.commerce.carts.CartItemClient.addItemToCartByCartIdClient( cartItem,  cartId,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CartItem cartitem = new CartItem();
	 *	CountDownLatch latch = cartitem.addItemToCartByCartId( cartItem,  cartId,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param cartId 
	 * @param responseFields 
	 * @param  callback callback handler for asynchronous operations
	 * @param cartItem 
	 * @return com.mozu.api.contracts.commerceruntime.carts.CartItem
	 * @see com.mozu.api.contracts.commerceruntime.carts.CartItem
	 * @see com.mozu.api.contracts.commerceruntime.carts.CartItem
	 */
	public CountDownLatch addItemToCartByCartIdAsync(com.mozu.api.contracts.commerceruntime.carts.CartItem cartItem, String cartId, String responseFields, AsyncCallback<com.mozu.api.contracts.commerceruntime.carts.CartItem> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.carts.CartItem> client = com.mozu.api.clients.commerce.carts.CartItemClient.addItemToCartByCartIdClient( cartItem,  cartId,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CartItem cartitem = new CartItem();
	 *	Stream stream = cartitem.addItemsToCart( cartItems);
	 * </code></pre></p>
	 * @param cartItems 
	 * @return Stream
	 * @see Stream
	 * @see com.mozu.api.contracts.commerceruntime.carts.CartItem
	 */
	public java.io.InputStream addItemsToCart(List<com.mozu.api.contracts.commerceruntime.carts.CartItem> cartItems) throws Exception
	{
		return addItemsToCart( cartItems,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	CartItem cartitem = new CartItem();
	 *	CountDownLatch latch = cartitem.addItemsToCart( cartItems, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param  callback callback handler for asynchronous operations
	 * @param cartItems 
	 * @return Stream
	 * @see Stream
	 * @see com.mozu.api.contracts.commerceruntime.carts.CartItem
	 */
	public CountDownLatch addItemsToCartAsync(List<com.mozu.api.contracts.commerceruntime.carts.CartItem> cartItems, AsyncCallback<java.io.InputStream> callback) throws Exception
	{
		return addItemsToCartAsync( cartItems,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	CartItem cartitem = new CartItem();
	 *	Stream stream = cartitem.addItemsToCart( cartItems,  throwErrorOnInvalidItems);
	 * </code></pre></p>
	 * @param throwErrorOnInvalidItems 
	 * @param cartItems 
	 * @return Stream
	 * @see Stream
	 * @see com.mozu.api.contracts.commerceruntime.carts.CartItem
	 */
	public java.io.InputStream addItemsToCart(List<com.mozu.api.contracts.commerceruntime.carts.CartItem> cartItems, Boolean throwErrorOnInvalidItems) throws Exception
	{
		MozuClient<java.io.InputStream> client = com.mozu.api.clients.commerce.carts.CartItemClient.addItemsToCartClient( cartItems,  throwErrorOnInvalidItems);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CartItem cartitem = new CartItem();
	 *	CountDownLatch latch = cartitem.addItemsToCart( cartItems,  throwErrorOnInvalidItems, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param throwErrorOnInvalidItems 
	 * @param  callback callback handler for asynchronous operations
	 * @param cartItems 
	 * @return Stream
	 * @see Stream
	 * @see com.mozu.api.contracts.commerceruntime.carts.CartItem
	 */
	public CountDownLatch addItemsToCartAsync(List<com.mozu.api.contracts.commerceruntime.carts.CartItem> cartItems, Boolean throwErrorOnInvalidItems, AsyncCallback<java.io.InputStream> callback) throws Exception
	{
		MozuClient<java.io.InputStream> client = com.mozu.api.clients.commerce.carts.CartItemClient.addItemsToCartClient( cartItems,  throwErrorOnInvalidItems);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CartItem cartitem = new CartItem();
	 *	CartItem cartItem = cartitem.addItemToCart( cartItem);
	 * </code></pre></p>
	 * @param cartItem Properties of an item added to an active shopping cart.
	 * @return com.mozu.api.contracts.commerceruntime.carts.CartItem
	 * @see com.mozu.api.contracts.commerceruntime.carts.CartItem
	 * @see com.mozu.api.contracts.commerceruntime.carts.CartItem
	 */
	public com.mozu.api.contracts.commerceruntime.carts.CartItem addItemToCart(com.mozu.api.contracts.commerceruntime.carts.CartItem cartItem) throws Exception
	{
		return addItemToCart( cartItem,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	CartItem cartitem = new CartItem();
	 *	CountDownLatch latch = cartitem.addItemToCart( cartItem, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param  callback callback handler for asynchronous operations
	 * @param cartItem Properties of an item added to an active shopping cart.
	 * @return com.mozu.api.contracts.commerceruntime.carts.CartItem
	 * @see com.mozu.api.contracts.commerceruntime.carts.CartItem
	 * @see com.mozu.api.contracts.commerceruntime.carts.CartItem
	 */
	public CountDownLatch addItemToCartAsync(com.mozu.api.contracts.commerceruntime.carts.CartItem cartItem, AsyncCallback<com.mozu.api.contracts.commerceruntime.carts.CartItem> callback) throws Exception
	{
		return addItemToCartAsync( cartItem,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	CartItem cartitem = new CartItem();
	 *	CartItem cartItem = cartitem.addItemToCart( cartItem,  responseFields);
	 * </code></pre></p>
	 * @param responseFields Filtering syntax appended to an API call to increase or decrease the amount of data returned inside a JSON object. This parameter should only be used to retrieve data. Attempting to update data using this parameter may cause data loss.
	 * @param cartItem Properties of an item added to an active shopping cart.
	 * @return com.mozu.api.contracts.commerceruntime.carts.CartItem
	 * @see com.mozu.api.contracts.commerceruntime.carts.CartItem
	 * @see com.mozu.api.contracts.commerceruntime.carts.CartItem
	 */
	public com.mozu.api.contracts.commerceruntime.carts.CartItem addItemToCart(com.mozu.api.contracts.commerceruntime.carts.CartItem cartItem, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.carts.CartItem> client = com.mozu.api.clients.commerce.carts.CartItemClient.addItemToCartClient( cartItem,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CartItem cartitem = new CartItem();
	 *	CountDownLatch latch = cartitem.addItemToCart( cartItem,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param responseFields Filtering syntax appended to an API call to increase or decrease the amount of data returned inside a JSON object. This parameter should only be used to retrieve data. Attempting to update data using this parameter may cause data loss.
	 * @param  callback callback handler for asynchronous operations
	 * @param cartItem Properties of an item added to an active shopping cart.
	 * @return com.mozu.api.contracts.commerceruntime.carts.CartItem
	 * @see com.mozu.api.contracts.commerceruntime.carts.CartItem
	 * @see com.mozu.api.contracts.commerceruntime.carts.CartItem
	 */
	public CountDownLatch addItemToCartAsync(com.mozu.api.contracts.commerceruntime.carts.CartItem cartItem, String responseFields, AsyncCallback<com.mozu.api.contracts.commerceruntime.carts.CartItem> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.carts.CartItem> client = com.mozu.api.clients.commerce.carts.CartItemClient.addItemToCartClient( cartItem,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CartItem cartitem = new CartItem();
	 *	CartItem cartItem = cartitem.updateCartItemQuantityByCartId( cartId,  cartItemId,  quantity);
	 * </code></pre></p>
	 * @param cartId 
	 * @param cartItemId 
	 * @param quantity 
	 * @return com.mozu.api.contracts.commerceruntime.carts.CartItem
	 * @see com.mozu.api.contracts.commerceruntime.carts.CartItem
	 */
	public com.mozu.api.contracts.commerceruntime.carts.CartItem updateCartItemQuantityByCartId(String cartId, String cartItemId, Integer quantity) throws Exception
	{
		return updateCartItemQuantityByCartId( cartId,  cartItemId,  quantity,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	CartItem cartitem = new CartItem();
	 *	CountDownLatch latch = cartitem.updateCartItemQuantityByCartId( cartId,  cartItemId,  quantity, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param cartId 
	 * @param cartItemId 
	 * @param quantity 
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.commerceruntime.carts.CartItem
	 * @see com.mozu.api.contracts.commerceruntime.carts.CartItem
	 */
	public CountDownLatch updateCartItemQuantityByCartIdAsync(String cartId, String cartItemId, Integer quantity, AsyncCallback<com.mozu.api.contracts.commerceruntime.carts.CartItem> callback) throws Exception
	{
		return updateCartItemQuantityByCartIdAsync( cartId,  cartItemId,  quantity,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	CartItem cartitem = new CartItem();
	 *	CartItem cartItem = cartitem.updateCartItemQuantityByCartId( cartId,  cartItemId,  quantity,  responseFields);
	 * </code></pre></p>
	 * @param cartId 
	 * @param cartItemId 
	 * @param quantity 
	 * @param responseFields 
	 * @return com.mozu.api.contracts.commerceruntime.carts.CartItem
	 * @see com.mozu.api.contracts.commerceruntime.carts.CartItem
	 */
	public com.mozu.api.contracts.commerceruntime.carts.CartItem updateCartItemQuantityByCartId(String cartId, String cartItemId, Integer quantity, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.carts.CartItem> client = com.mozu.api.clients.commerce.carts.CartItemClient.updateCartItemQuantityByCartIdClient( cartId,  cartItemId,  quantity,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CartItem cartitem = new CartItem();
	 *	CountDownLatch latch = cartitem.updateCartItemQuantityByCartId( cartId,  cartItemId,  quantity,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param cartId 
	 * @param cartItemId 
	 * @param quantity 
	 * @param responseFields 
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.commerceruntime.carts.CartItem
	 * @see com.mozu.api.contracts.commerceruntime.carts.CartItem
	 */
	public CountDownLatch updateCartItemQuantityByCartIdAsync(String cartId, String cartItemId, Integer quantity, String responseFields, AsyncCallback<com.mozu.api.contracts.commerceruntime.carts.CartItem> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.carts.CartItem> client = com.mozu.api.clients.commerce.carts.CartItemClient.updateCartItemQuantityByCartIdClient( cartId,  cartItemId,  quantity,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CartItem cartitem = new CartItem();
	 *	CartItem cartItem = cartitem.updateCartItemByCartId( cartItem,  cartId,  cartItemId);
	 * </code></pre></p>
	 * @param cartId 
	 * @param cartItemId 
	 * @param cartItem 
	 * @return com.mozu.api.contracts.commerceruntime.carts.CartItem
	 * @see com.mozu.api.contracts.commerceruntime.carts.CartItem
	 * @see com.mozu.api.contracts.commerceruntime.carts.CartItem
	 */
	public com.mozu.api.contracts.commerceruntime.carts.CartItem updateCartItemByCartId(com.mozu.api.contracts.commerceruntime.carts.CartItem cartItem, String cartId, String cartItemId) throws Exception
	{
		return updateCartItemByCartId( cartItem,  cartId,  cartItemId,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	CartItem cartitem = new CartItem();
	 *	CountDownLatch latch = cartitem.updateCartItemByCartId( cartItem,  cartId,  cartItemId, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param cartId 
	 * @param cartItemId 
	 * @param  callback callback handler for asynchronous operations
	 * @param cartItem 
	 * @return com.mozu.api.contracts.commerceruntime.carts.CartItem
	 * @see com.mozu.api.contracts.commerceruntime.carts.CartItem
	 * @see com.mozu.api.contracts.commerceruntime.carts.CartItem
	 */
	public CountDownLatch updateCartItemByCartIdAsync(com.mozu.api.contracts.commerceruntime.carts.CartItem cartItem, String cartId, String cartItemId, AsyncCallback<com.mozu.api.contracts.commerceruntime.carts.CartItem> callback) throws Exception
	{
		return updateCartItemByCartIdAsync( cartItem,  cartId,  cartItemId,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	CartItem cartitem = new CartItem();
	 *	CartItem cartItem = cartitem.updateCartItemByCartId( cartItem,  cartId,  cartItemId,  responseFields);
	 * </code></pre></p>
	 * @param cartId 
	 * @param cartItemId 
	 * @param responseFields 
	 * @param cartItem 
	 * @return com.mozu.api.contracts.commerceruntime.carts.CartItem
	 * @see com.mozu.api.contracts.commerceruntime.carts.CartItem
	 * @see com.mozu.api.contracts.commerceruntime.carts.CartItem
	 */
	public com.mozu.api.contracts.commerceruntime.carts.CartItem updateCartItemByCartId(com.mozu.api.contracts.commerceruntime.carts.CartItem cartItem, String cartId, String cartItemId, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.carts.CartItem> client = com.mozu.api.clients.commerce.carts.CartItemClient.updateCartItemByCartIdClient( cartItem,  cartId,  cartItemId,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CartItem cartitem = new CartItem();
	 *	CountDownLatch latch = cartitem.updateCartItemByCartId( cartItem,  cartId,  cartItemId,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param cartId 
	 * @param cartItemId 
	 * @param responseFields 
	 * @param  callback callback handler for asynchronous operations
	 * @param cartItem 
	 * @return com.mozu.api.contracts.commerceruntime.carts.CartItem
	 * @see com.mozu.api.contracts.commerceruntime.carts.CartItem
	 * @see com.mozu.api.contracts.commerceruntime.carts.CartItem
	 */
	public CountDownLatch updateCartItemByCartIdAsync(com.mozu.api.contracts.commerceruntime.carts.CartItem cartItem, String cartId, String cartItemId, String responseFields, AsyncCallback<com.mozu.api.contracts.commerceruntime.carts.CartItem> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.carts.CartItem> client = com.mozu.api.clients.commerce.carts.CartItemClient.updateCartItemByCartIdClient( cartItem,  cartId,  cartItemId,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CartItem cartitem = new CartItem();
	 *	CartItem cartItem = cartitem.updateCartItemQuantity( cartItemId,  quantity);
	 * </code></pre></p>
	 * @param cartItemId Identifier of the cart item to delete.
	 * @param quantity The number of cart items in the shopper's active cart.
	 * @return com.mozu.api.contracts.commerceruntime.carts.CartItem
	 * @see com.mozu.api.contracts.commerceruntime.carts.CartItem
	 */
	public com.mozu.api.contracts.commerceruntime.carts.CartItem updateCartItemQuantity(String cartItemId, Integer quantity) throws Exception
	{
		return updateCartItemQuantity( cartItemId,  quantity,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	CartItem cartitem = new CartItem();
	 *	CountDownLatch latch = cartitem.updateCartItemQuantity( cartItemId,  quantity, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param cartItemId Identifier of the cart item to delete.
	 * @param quantity The number of cart items in the shopper's active cart.
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.commerceruntime.carts.CartItem
	 * @see com.mozu.api.contracts.commerceruntime.carts.CartItem
	 */
	public CountDownLatch updateCartItemQuantityAsync(String cartItemId, Integer quantity, AsyncCallback<com.mozu.api.contracts.commerceruntime.carts.CartItem> callback) throws Exception
	{
		return updateCartItemQuantityAsync( cartItemId,  quantity,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	CartItem cartitem = new CartItem();
	 *	CartItem cartItem = cartitem.updateCartItemQuantity( cartItemId,  quantity,  responseFields);
	 * </code></pre></p>
	 * @param cartItemId Identifier of the cart item to delete.
	 * @param quantity The number of cart items in the shopper's active cart.
	 * @param responseFields Filtering syntax appended to an API call to increase or decrease the amount of data returned inside a JSON object. This parameter should only be used to retrieve data. Attempting to update data using this parameter may cause data loss.
	 * @return com.mozu.api.contracts.commerceruntime.carts.CartItem
	 * @see com.mozu.api.contracts.commerceruntime.carts.CartItem
	 */
	public com.mozu.api.contracts.commerceruntime.carts.CartItem updateCartItemQuantity(String cartItemId, Integer quantity, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.carts.CartItem> client = com.mozu.api.clients.commerce.carts.CartItemClient.updateCartItemQuantityClient( cartItemId,  quantity,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CartItem cartitem = new CartItem();
	 *	CountDownLatch latch = cartitem.updateCartItemQuantity( cartItemId,  quantity,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param cartItemId Identifier of the cart item to delete.
	 * @param quantity The number of cart items in the shopper's active cart.
	 * @param responseFields Filtering syntax appended to an API call to increase or decrease the amount of data returned inside a JSON object. This parameter should only be used to retrieve data. Attempting to update data using this parameter may cause data loss.
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.commerceruntime.carts.CartItem
	 * @see com.mozu.api.contracts.commerceruntime.carts.CartItem
	 */
	public CountDownLatch updateCartItemQuantityAsync(String cartItemId, Integer quantity, String responseFields, AsyncCallback<com.mozu.api.contracts.commerceruntime.carts.CartItem> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.carts.CartItem> client = com.mozu.api.clients.commerce.carts.CartItemClient.updateCartItemQuantityClient( cartItemId,  quantity,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CartItem cartitem = new CartItem();
	 *	CartItem cartItem = cartitem.updateCartItem( cartItem,  cartItemId);
	 * </code></pre></p>
	 * @param cartItemId Identifier of the cart item to delete.
	 * @param cartItem Properties of an item added to an active shopping cart.
	 * @return com.mozu.api.contracts.commerceruntime.carts.CartItem
	 * @see com.mozu.api.contracts.commerceruntime.carts.CartItem
	 * @see com.mozu.api.contracts.commerceruntime.carts.CartItem
	 */
	public com.mozu.api.contracts.commerceruntime.carts.CartItem updateCartItem(com.mozu.api.contracts.commerceruntime.carts.CartItem cartItem, String cartItemId) throws Exception
	{
		return updateCartItem( cartItem,  cartItemId,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	CartItem cartitem = new CartItem();
	 *	CountDownLatch latch = cartitem.updateCartItem( cartItem,  cartItemId, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param cartItemId Identifier of the cart item to delete.
	 * @param  callback callback handler for asynchronous operations
	 * @param cartItem Properties of an item added to an active shopping cart.
	 * @return com.mozu.api.contracts.commerceruntime.carts.CartItem
	 * @see com.mozu.api.contracts.commerceruntime.carts.CartItem
	 * @see com.mozu.api.contracts.commerceruntime.carts.CartItem
	 */
	public CountDownLatch updateCartItemAsync(com.mozu.api.contracts.commerceruntime.carts.CartItem cartItem, String cartItemId, AsyncCallback<com.mozu.api.contracts.commerceruntime.carts.CartItem> callback) throws Exception
	{
		return updateCartItemAsync( cartItem,  cartItemId,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	CartItem cartitem = new CartItem();
	 *	CartItem cartItem = cartitem.updateCartItem( cartItem,  cartItemId,  responseFields);
	 * </code></pre></p>
	 * @param cartItemId Identifier of the cart item to delete.
	 * @param responseFields Filtering syntax appended to an API call to increase or decrease the amount of data returned inside a JSON object. This parameter should only be used to retrieve data. Attempting to update data using this parameter may cause data loss.
	 * @param cartItem Properties of an item added to an active shopping cart.
	 * @return com.mozu.api.contracts.commerceruntime.carts.CartItem
	 * @see com.mozu.api.contracts.commerceruntime.carts.CartItem
	 * @see com.mozu.api.contracts.commerceruntime.carts.CartItem
	 */
	public com.mozu.api.contracts.commerceruntime.carts.CartItem updateCartItem(com.mozu.api.contracts.commerceruntime.carts.CartItem cartItem, String cartItemId, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.carts.CartItem> client = com.mozu.api.clients.commerce.carts.CartItemClient.updateCartItemClient( cartItem,  cartItemId,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CartItem cartitem = new CartItem();
	 *	CountDownLatch latch = cartitem.updateCartItem( cartItem,  cartItemId,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param cartItemId Identifier of the cart item to delete.
	 * @param responseFields Filtering syntax appended to an API call to increase or decrease the amount of data returned inside a JSON object. This parameter should only be used to retrieve data. Attempting to update data using this parameter may cause data loss.
	 * @param  callback callback handler for asynchronous operations
	 * @param cartItem Properties of an item added to an active shopping cart.
	 * @return com.mozu.api.contracts.commerceruntime.carts.CartItem
	 * @see com.mozu.api.contracts.commerceruntime.carts.CartItem
	 * @see com.mozu.api.contracts.commerceruntime.carts.CartItem
	 */
	public CountDownLatch updateCartItemAsync(com.mozu.api.contracts.commerceruntime.carts.CartItem cartItem, String cartItemId, String responseFields, AsyncCallback<com.mozu.api.contracts.commerceruntime.carts.CartItem> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.carts.CartItem> client = com.mozu.api.clients.commerce.carts.CartItemClient.updateCartItemClient( cartItem,  cartItemId,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CartItem cartitem = new CartItem();
	 *	Cart cart = cartitem.removeAllCartItemsByCartId( cartId);
	 * </code></pre></p>
	 * @param cartId 
	 * @return com.mozu.api.contracts.commerceruntime.carts.Cart
	 * @see com.mozu.api.contracts.commerceruntime.carts.Cart
	 */
	public com.mozu.api.contracts.commerceruntime.carts.Cart removeAllCartItemsByCartId(String cartId) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.carts.Cart> client = com.mozu.api.clients.commerce.carts.CartItemClient.removeAllCartItemsByCartIdClient( cartId);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CartItem cartitem = new CartItem();
	 *	CountDownLatch latch = cartitem.removeAllCartItemsByCartId( cartId, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param cartId 
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.commerceruntime.carts.Cart
	 * @see com.mozu.api.contracts.commerceruntime.carts.Cart
	 */
	public CountDownLatch removeAllCartItemsByCartIdAsync(String cartId, AsyncCallback<com.mozu.api.contracts.commerceruntime.carts.Cart> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.carts.Cart> client = com.mozu.api.clients.commerce.carts.CartItemClient.removeAllCartItemsByCartIdClient( cartId);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CartItem cartitem = new CartItem();
	 *	Stream stream = cartitem.deleteCartItemByCartId( cartId,  cartItemId);
	 * </code></pre></p>
	 * @param cartId 
	 * @param cartItemId 
	 * @return Stream
	 * @see Stream
	 */
	public java.io.InputStream deleteCartItemByCartId(String cartId, String cartItemId) throws Exception
	{
		MozuClient<java.io.InputStream> client = com.mozu.api.clients.commerce.carts.CartItemClient.deleteCartItemByCartIdClient( cartId,  cartItemId);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CartItem cartitem = new CartItem();
	 *	CountDownLatch latch = cartitem.deleteCartItemByCartId( cartId,  cartItemId, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param cartId 
	 * @param cartItemId 
	 * @param  callback callback handler for asynchronous operations
	 * @return Stream
	 * @see Stream
	 */
	public CountDownLatch deleteCartItemByCartIdAsync(String cartId, String cartItemId, AsyncCallback<java.io.InputStream> callback) throws Exception
	{
		MozuClient<java.io.InputStream> client = com.mozu.api.clients.commerce.carts.CartItemClient.deleteCartItemByCartIdClient( cartId,  cartItemId);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CartItem cartitem = new CartItem();
	 *	Cart cart = cartitem.removeAllCartItems();
	 * </code></pre></p>
	 * @return com.mozu.api.contracts.commerceruntime.carts.Cart
	 * @see com.mozu.api.contracts.commerceruntime.carts.Cart
	 */
	public com.mozu.api.contracts.commerceruntime.carts.Cart removeAllCartItems() throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.carts.Cart> client = com.mozu.api.clients.commerce.carts.CartItemClient.removeAllCartItemsClient();
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CartItem cartitem = new CartItem();
	 *	CountDownLatch latch = cartitem.removeAllCartItems( callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.commerceruntime.carts.Cart
	 * @see com.mozu.api.contracts.commerceruntime.carts.Cart
	 */
	public CountDownLatch removeAllCartItemsAsync( AsyncCallback<com.mozu.api.contracts.commerceruntime.carts.Cart> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.carts.Cart> client = com.mozu.api.clients.commerce.carts.CartItemClient.removeAllCartItemsClient();
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CartItem cartitem = new CartItem();
	 *	Stream stream = cartitem.deleteCartItem( cartItemId);
	 * </code></pre></p>
	 * @param cartItemId Identifier of the cart item to delete.
	 * @return Stream
	 * @see Stream
	 */
	public java.io.InputStream deleteCartItem(String cartItemId) throws Exception
	{
		MozuClient<java.io.InputStream> client = com.mozu.api.clients.commerce.carts.CartItemClient.deleteCartItemClient( cartItemId);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CartItem cartitem = new CartItem();
	 *	CountDownLatch latch = cartitem.deleteCartItem( cartItemId, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param cartItemId Identifier of the cart item to delete.
	 * @param  callback callback handler for asynchronous operations
	 * @return Stream
	 * @see Stream
	 */
	public CountDownLatch deleteCartItemAsync(String cartItemId, AsyncCallback<java.io.InputStream> callback) throws Exception
	{
		MozuClient<java.io.InputStream> client = com.mozu.api.clients.commerce.carts.CartItemClient.deleteCartItemClient( cartItemId);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

}



