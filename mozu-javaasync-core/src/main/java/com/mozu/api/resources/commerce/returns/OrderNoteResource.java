/**
 *     This code was auto-generated by a Codezu.     
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
 */
package com.mozu.api.resources.commerce.returns;

import com.mozu.api.ApiContext;
import java.util.List;
import java.util.ArrayList;
import com.mozu.api.MozuClient;
import com.mozu.api.MozuClientFactory;
import com.mozu.api.MozuUrl;
import com.mozu.api.Headers;
import org.joda.time.DateTime;
import com.mozu.api.AsyncCallback;
import java.util.concurrent.CountDownLatch;
import com.mozu.api.security.AuthTicket;
import org.apache.commons.lang.StringUtils;

/** <summary>
 * 
 * </summary>
 */
public class OrderNoteResource {
	///
	/// <see cref="Mozu.Api.ApiContext"/>
	///
	private ApiContext _apiContext;


	public OrderNoteResource(ApiContext apiContext) 
	{
		_apiContext = apiContext;
	}

	
	/**
	 * 
	 * <p><pre><code>
	 *	OrderNote ordernote = new OrderNote();
	 *	OrderNote orderNote = ordernote.getReturnNotes( returnId);
	 * </code></pre></p>
	 * @param returnId 
	 * @return List<com.mozu.api.contracts.commerceruntime.orders.OrderNote>
	 * @see com.mozu.api.contracts.commerceruntime.orders.OrderNote
	 */
	public List<com.mozu.api.contracts.commerceruntime.orders.OrderNote> getReturnNotes(String returnId) throws Exception
	{
		MozuClient<List<com.mozu.api.contracts.commerceruntime.orders.OrderNote>> client = com.mozu.api.clients.commerce.returns.OrderNoteClient.getReturnNotesClient( returnId);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	OrderNote ordernote = new OrderNote();
	 *	CountDownLatch latch = ordernote.getReturnNotes( returnId, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param returnId 
	 * @param  callback callback handler for asynchronous operations
	 * @return List<com.mozu.api.contracts.commerceruntime.orders.OrderNote>
	 * @see com.mozu.api.contracts.commerceruntime.orders.OrderNote
	 */
	public CountDownLatch getReturnNotesAsync(String returnId, AsyncCallback<List<com.mozu.api.contracts.commerceruntime.orders.OrderNote>> callback) throws Exception
	{
		MozuClient<List<com.mozu.api.contracts.commerceruntime.orders.OrderNote>> client = com.mozu.api.clients.commerce.returns.OrderNoteClient.getReturnNotesClient( returnId);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	OrderNote ordernote = new OrderNote();
	 *	OrderNote orderNote = ordernote.getReturnNote( returnId,  noteId);
	 * </code></pre></p>
	 * @param noteId 
	 * @param returnId 
	 * @return com.mozu.api.contracts.commerceruntime.orders.OrderNote
	 * @see com.mozu.api.contracts.commerceruntime.orders.OrderNote
	 */
	public com.mozu.api.contracts.commerceruntime.orders.OrderNote getReturnNote(String returnId, String noteId) throws Exception
	{
		return getReturnNote( returnId,  noteId,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	OrderNote ordernote = new OrderNote();
	 *	CountDownLatch latch = ordernote.getReturnNote( returnId,  noteId, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param noteId 
	 * @param returnId 
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.commerceruntime.orders.OrderNote
	 * @see com.mozu.api.contracts.commerceruntime.orders.OrderNote
	 */
	public CountDownLatch getReturnNoteAsync(String returnId, String noteId, AsyncCallback<com.mozu.api.contracts.commerceruntime.orders.OrderNote> callback) throws Exception
	{
		return getReturnNoteAsync( returnId,  noteId,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	OrderNote ordernote = new OrderNote();
	 *	OrderNote orderNote = ordernote.getReturnNote( returnId,  noteId,  responseFields);
	 * </code></pre></p>
	 * @param noteId 
	 * @param responseFields 
	 * @param returnId 
	 * @return com.mozu.api.contracts.commerceruntime.orders.OrderNote
	 * @see com.mozu.api.contracts.commerceruntime.orders.OrderNote
	 */
	public com.mozu.api.contracts.commerceruntime.orders.OrderNote getReturnNote(String returnId, String noteId, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.orders.OrderNote> client = com.mozu.api.clients.commerce.returns.OrderNoteClient.getReturnNoteClient( returnId,  noteId,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	OrderNote ordernote = new OrderNote();
	 *	CountDownLatch latch = ordernote.getReturnNote( returnId,  noteId,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param noteId 
	 * @param responseFields 
	 * @param returnId 
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.commerceruntime.orders.OrderNote
	 * @see com.mozu.api.contracts.commerceruntime.orders.OrderNote
	 */
	public CountDownLatch getReturnNoteAsync(String returnId, String noteId, String responseFields, AsyncCallback<com.mozu.api.contracts.commerceruntime.orders.OrderNote> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.orders.OrderNote> client = com.mozu.api.clients.commerce.returns.OrderNoteClient.getReturnNoteClient( returnId,  noteId,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	OrderNote ordernote = new OrderNote();
	 *	OrderNote orderNote = ordernote.createReturnNote( returnNote,  returnId);
	 * </code></pre></p>
	 * @param returnId 
	 * @param returnNote 
	 * @return com.mozu.api.contracts.commerceruntime.orders.OrderNote
	 * @see com.mozu.api.contracts.commerceruntime.orders.OrderNote
	 * @see com.mozu.api.contracts.commerceruntime.orders.OrderNote
	 */
	public com.mozu.api.contracts.commerceruntime.orders.OrderNote createReturnNote(com.mozu.api.contracts.commerceruntime.orders.OrderNote returnNote, String returnId) throws Exception
	{
		return createReturnNote( returnNote,  returnId,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	OrderNote ordernote = new OrderNote();
	 *	CountDownLatch latch = ordernote.createReturnNote( returnNote,  returnId, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param returnId 
	 * @param  callback callback handler for asynchronous operations
	 * @param returnNote 
	 * @return com.mozu.api.contracts.commerceruntime.orders.OrderNote
	 * @see com.mozu.api.contracts.commerceruntime.orders.OrderNote
	 * @see com.mozu.api.contracts.commerceruntime.orders.OrderNote
	 */
	public CountDownLatch createReturnNoteAsync(com.mozu.api.contracts.commerceruntime.orders.OrderNote returnNote, String returnId, AsyncCallback<com.mozu.api.contracts.commerceruntime.orders.OrderNote> callback) throws Exception
	{
		return createReturnNoteAsync( returnNote,  returnId,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	OrderNote ordernote = new OrderNote();
	 *	OrderNote orderNote = ordernote.createReturnNote( returnNote,  returnId,  responseFields);
	 * </code></pre></p>
	 * @param responseFields 
	 * @param returnId 
	 * @param returnNote 
	 * @return com.mozu.api.contracts.commerceruntime.orders.OrderNote
	 * @see com.mozu.api.contracts.commerceruntime.orders.OrderNote
	 * @see com.mozu.api.contracts.commerceruntime.orders.OrderNote
	 */
	public com.mozu.api.contracts.commerceruntime.orders.OrderNote createReturnNote(com.mozu.api.contracts.commerceruntime.orders.OrderNote returnNote, String returnId, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.orders.OrderNote> client = com.mozu.api.clients.commerce.returns.OrderNoteClient.createReturnNoteClient( returnNote,  returnId,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	OrderNote ordernote = new OrderNote();
	 *	CountDownLatch latch = ordernote.createReturnNote( returnNote,  returnId,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param responseFields 
	 * @param returnId 
	 * @param  callback callback handler for asynchronous operations
	 * @param returnNote 
	 * @return com.mozu.api.contracts.commerceruntime.orders.OrderNote
	 * @see com.mozu.api.contracts.commerceruntime.orders.OrderNote
	 * @see com.mozu.api.contracts.commerceruntime.orders.OrderNote
	 */
	public CountDownLatch createReturnNoteAsync(com.mozu.api.contracts.commerceruntime.orders.OrderNote returnNote, String returnId, String responseFields, AsyncCallback<com.mozu.api.contracts.commerceruntime.orders.OrderNote> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.orders.OrderNote> client = com.mozu.api.clients.commerce.returns.OrderNoteClient.createReturnNoteClient( returnNote,  returnId,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	OrderNote ordernote = new OrderNote();
	 *	OrderNote orderNote = ordernote.updateReturnNote( returnNote,  returnId,  noteId);
	 * </code></pre></p>
	 * @param noteId 
	 * @param returnId 
	 * @param returnNote 
	 * @return com.mozu.api.contracts.commerceruntime.orders.OrderNote
	 * @see com.mozu.api.contracts.commerceruntime.orders.OrderNote
	 * @see com.mozu.api.contracts.commerceruntime.orders.OrderNote
	 */
	public com.mozu.api.contracts.commerceruntime.orders.OrderNote updateReturnNote(com.mozu.api.contracts.commerceruntime.orders.OrderNote returnNote, String returnId, String noteId) throws Exception
	{
		return updateReturnNote( returnNote,  returnId,  noteId,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	OrderNote ordernote = new OrderNote();
	 *	CountDownLatch latch = ordernote.updateReturnNote( returnNote,  returnId,  noteId, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param noteId 
	 * @param returnId 
	 * @param  callback callback handler for asynchronous operations
	 * @param returnNote 
	 * @return com.mozu.api.contracts.commerceruntime.orders.OrderNote
	 * @see com.mozu.api.contracts.commerceruntime.orders.OrderNote
	 * @see com.mozu.api.contracts.commerceruntime.orders.OrderNote
	 */
	public CountDownLatch updateReturnNoteAsync(com.mozu.api.contracts.commerceruntime.orders.OrderNote returnNote, String returnId, String noteId, AsyncCallback<com.mozu.api.contracts.commerceruntime.orders.OrderNote> callback) throws Exception
	{
		return updateReturnNoteAsync( returnNote,  returnId,  noteId,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	OrderNote ordernote = new OrderNote();
	 *	OrderNote orderNote = ordernote.updateReturnNote( returnNote,  returnId,  noteId,  responseFields);
	 * </code></pre></p>
	 * @param noteId 
	 * @param responseFields 
	 * @param returnId 
	 * @param returnNote 
	 * @return com.mozu.api.contracts.commerceruntime.orders.OrderNote
	 * @see com.mozu.api.contracts.commerceruntime.orders.OrderNote
	 * @see com.mozu.api.contracts.commerceruntime.orders.OrderNote
	 */
	public com.mozu.api.contracts.commerceruntime.orders.OrderNote updateReturnNote(com.mozu.api.contracts.commerceruntime.orders.OrderNote returnNote, String returnId, String noteId, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.orders.OrderNote> client = com.mozu.api.clients.commerce.returns.OrderNoteClient.updateReturnNoteClient( returnNote,  returnId,  noteId,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	OrderNote ordernote = new OrderNote();
	 *	CountDownLatch latch = ordernote.updateReturnNote( returnNote,  returnId,  noteId,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param noteId 
	 * @param responseFields 
	 * @param returnId 
	 * @param  callback callback handler for asynchronous operations
	 * @param returnNote 
	 * @return com.mozu.api.contracts.commerceruntime.orders.OrderNote
	 * @see com.mozu.api.contracts.commerceruntime.orders.OrderNote
	 * @see com.mozu.api.contracts.commerceruntime.orders.OrderNote
	 */
	public CountDownLatch updateReturnNoteAsync(com.mozu.api.contracts.commerceruntime.orders.OrderNote returnNote, String returnId, String noteId, String responseFields, AsyncCallback<com.mozu.api.contracts.commerceruntime.orders.OrderNote> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.orders.OrderNote> client = com.mozu.api.clients.commerce.returns.OrderNoteClient.updateReturnNoteClient( returnNote,  returnId,  noteId,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	OrderNote ordernote = new OrderNote();
	 *	ordernote.deleteReturnNote( returnId,  noteId);
	 * </code></pre></p>
	 * @param noteId 
	 * @param returnId 
	 * @return 
	 */
	public void deleteReturnNote(String returnId, String noteId) throws Exception
	{
		MozuClient client = com.mozu.api.clients.commerce.returns.OrderNoteClient.deleteReturnNoteClient( returnId,  noteId);
		client.setContext(_apiContext);
		client.executeRequest();
		client.cleanupHttpConnection();

	}

}



