/**
 *     This code was auto-generated by a Codezu.     
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
 */
package com.mozu.api.resources.commerce.catalog.admin;

import com.mozu.api.ApiContext;
import java.util.List;
import java.util.ArrayList;
import com.mozu.api.MozuClient;
import com.mozu.api.MozuClientFactory;
import com.mozu.api.MozuUrl;
import com.mozu.api.Headers;
import org.joda.time.DateTime;
import com.mozu.api.AsyncCallback;
import java.util.concurrent.CountDownLatch;
import com.mozu.api.security.AuthTicket;
import org.apache.commons.lang.StringUtils;

/** <summary>
 * commerce/catalog/admin/currency related resources. DOCUMENT_HERE 
 * </summary>
 */
public class CurrencyLocalizationResource {
	///
	/// <see cref="Mozu.Api.ApiContext"/>
	///
	private ApiContext _apiContext;


	public CurrencyLocalizationResource(ApiContext apiContext) 
	{
		_apiContext = apiContext;
	}

	
	/**
	 * 
	 * <p><pre><code>
	 *	CurrencyLocalization currencylocalization = new CurrencyLocalization();
	 *	CurrencyLocalizationCollection currencyLocalizationCollection = currencylocalization.getCurrencyLocalizations();
	 * </code></pre></p>
	 * @return com.mozu.api.contracts.productadmin.CurrencyLocalizationCollection
	 * @see com.mozu.api.contracts.productadmin.CurrencyLocalizationCollection
	 */
	public com.mozu.api.contracts.productadmin.CurrencyLocalizationCollection getCurrencyLocalizations() throws Exception
	{
		return getCurrencyLocalizations( null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	CurrencyLocalization currencylocalization = new CurrencyLocalization();
	 *	CountDownLatch latch = currencylocalization.getCurrencyLocalizations( callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.productadmin.CurrencyLocalizationCollection
	 * @see com.mozu.api.contracts.productadmin.CurrencyLocalizationCollection
	 */
	public CountDownLatch getCurrencyLocalizationsAsync( AsyncCallback<com.mozu.api.contracts.productadmin.CurrencyLocalizationCollection> callback) throws Exception
	{
		return getCurrencyLocalizationsAsync( null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	CurrencyLocalization currencylocalization = new CurrencyLocalization();
	 *	CurrencyLocalizationCollection currencyLocalizationCollection = currencylocalization.getCurrencyLocalizations( responseFields);
	 * </code></pre></p>
	 * @param responseFields Filtering syntax appended to an API call to increase or decrease the amount of data returned inside a JSON object. This parameter should only be used to retrieve data. Attempting to update data using this parameter may cause data loss.
	 * @return com.mozu.api.contracts.productadmin.CurrencyLocalizationCollection
	 * @see com.mozu.api.contracts.productadmin.CurrencyLocalizationCollection
	 */
	public com.mozu.api.contracts.productadmin.CurrencyLocalizationCollection getCurrencyLocalizations(String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.CurrencyLocalizationCollection> client = com.mozu.api.clients.commerce.catalog.admin.CurrencyLocalizationClient.getCurrencyLocalizationsClient( responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CurrencyLocalization currencylocalization = new CurrencyLocalization();
	 *	CountDownLatch latch = currencylocalization.getCurrencyLocalizations( responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param responseFields Filtering syntax appended to an API call to increase or decrease the amount of data returned inside a JSON object. This parameter should only be used to retrieve data. Attempting to update data using this parameter may cause data loss.
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.productadmin.CurrencyLocalizationCollection
	 * @see com.mozu.api.contracts.productadmin.CurrencyLocalizationCollection
	 */
	public CountDownLatch getCurrencyLocalizationsAsync(String responseFields, AsyncCallback<com.mozu.api.contracts.productadmin.CurrencyLocalizationCollection> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.CurrencyLocalizationCollection> client = com.mozu.api.clients.commerce.catalog.admin.CurrencyLocalizationClient.getCurrencyLocalizationsClient( responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CurrencyLocalization currencylocalization = new CurrencyLocalization();
	 *	CurrencyExchangeRate currencyExchangeRate = currencylocalization.getCurrencyExchangeRate( currencyCode,  toCurrencyCode);
	 * </code></pre></p>
	 * @param currencyCode The three character ISOÂ currency code, such as USDÂ for US Dollars.
	 * @param toCurrencyCode 
	 * @return com.mozu.api.contracts.productadmin.CurrencyExchangeRate
	 * @see com.mozu.api.contracts.productadmin.CurrencyExchangeRate
	 */
	public com.mozu.api.contracts.productadmin.CurrencyExchangeRate getCurrencyExchangeRate(String currencyCode, String toCurrencyCode) throws Exception
	{
		return getCurrencyExchangeRate( currencyCode,  toCurrencyCode,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	CurrencyLocalization currencylocalization = new CurrencyLocalization();
	 *	CountDownLatch latch = currencylocalization.getCurrencyExchangeRate( currencyCode,  toCurrencyCode, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param currencyCode The three character ISOÂ currency code, such as USDÂ for US Dollars.
	 * @param toCurrencyCode 
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.productadmin.CurrencyExchangeRate
	 * @see com.mozu.api.contracts.productadmin.CurrencyExchangeRate
	 */
	public CountDownLatch getCurrencyExchangeRateAsync(String currencyCode, String toCurrencyCode, AsyncCallback<com.mozu.api.contracts.productadmin.CurrencyExchangeRate> callback) throws Exception
	{
		return getCurrencyExchangeRateAsync( currencyCode,  toCurrencyCode,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	CurrencyLocalization currencylocalization = new CurrencyLocalization();
	 *	CurrencyExchangeRate currencyExchangeRate = currencylocalization.getCurrencyExchangeRate( currencyCode,  toCurrencyCode,  responseFields);
	 * </code></pre></p>
	 * @param currencyCode The three character ISOÂ currency code, such as USDÂ for US Dollars.
	 * @param responseFields Filtering syntax appended to an API call to increase or decrease the amount of data returned inside a JSON object. This parameter should only be used to retrieve data. Attempting to update data using this parameter may cause data loss.
	 * @param toCurrencyCode 
	 * @return com.mozu.api.contracts.productadmin.CurrencyExchangeRate
	 * @see com.mozu.api.contracts.productadmin.CurrencyExchangeRate
	 */
	public com.mozu.api.contracts.productadmin.CurrencyExchangeRate getCurrencyExchangeRate(String currencyCode, String toCurrencyCode, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.CurrencyExchangeRate> client = com.mozu.api.clients.commerce.catalog.admin.CurrencyLocalizationClient.getCurrencyExchangeRateClient( currencyCode,  toCurrencyCode,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CurrencyLocalization currencylocalization = new CurrencyLocalization();
	 *	CountDownLatch latch = currencylocalization.getCurrencyExchangeRate( currencyCode,  toCurrencyCode,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param currencyCode The three character ISOÂ currency code, such as USDÂ for US Dollars.
	 * @param responseFields Filtering syntax appended to an API call to increase or decrease the amount of data returned inside a JSON object. This parameter should only be used to retrieve data. Attempting to update data using this parameter may cause data loss.
	 * @param toCurrencyCode 
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.productadmin.CurrencyExchangeRate
	 * @see com.mozu.api.contracts.productadmin.CurrencyExchangeRate
	 */
	public CountDownLatch getCurrencyExchangeRateAsync(String currencyCode, String toCurrencyCode, String responseFields, AsyncCallback<com.mozu.api.contracts.productadmin.CurrencyExchangeRate> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.CurrencyExchangeRate> client = com.mozu.api.clients.commerce.catalog.admin.CurrencyLocalizationClient.getCurrencyExchangeRateClient( currencyCode,  toCurrencyCode,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CurrencyLocalization currencylocalization = new CurrencyLocalization();
	 *	CurrencyExchangeRateCollection currencyExchangeRateCollection = currencylocalization.getCurrencyExchangeRates( currencyCode);
	 * </code></pre></p>
	 * @param currencyCode The three character ISOÂ currency code, such as USDÂ for US Dollars.
	 * @return com.mozu.api.contracts.productadmin.CurrencyExchangeRateCollection
	 * @see com.mozu.api.contracts.productadmin.CurrencyExchangeRateCollection
	 */
	public com.mozu.api.contracts.productadmin.CurrencyExchangeRateCollection getCurrencyExchangeRates(String currencyCode) throws Exception
	{
		return getCurrencyExchangeRates( currencyCode,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	CurrencyLocalization currencylocalization = new CurrencyLocalization();
	 *	CountDownLatch latch = currencylocalization.getCurrencyExchangeRates( currencyCode, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param currencyCode The three character ISOÂ currency code, such as USDÂ for US Dollars.
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.productadmin.CurrencyExchangeRateCollection
	 * @see com.mozu.api.contracts.productadmin.CurrencyExchangeRateCollection
	 */
	public CountDownLatch getCurrencyExchangeRatesAsync(String currencyCode, AsyncCallback<com.mozu.api.contracts.productadmin.CurrencyExchangeRateCollection> callback) throws Exception
	{
		return getCurrencyExchangeRatesAsync( currencyCode,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	CurrencyLocalization currencylocalization = new CurrencyLocalization();
	 *	CurrencyExchangeRateCollection currencyExchangeRateCollection = currencylocalization.getCurrencyExchangeRates( currencyCode,  responseFields);
	 * </code></pre></p>
	 * @param currencyCode The three character ISOÂ currency code, such as USDÂ for US Dollars.
	 * @param responseFields Filtering syntax appended to an API call to increase or decrease the amount of data returned inside a JSON object. This parameter should only be used to retrieve data. Attempting to update data using this parameter may cause data loss.
	 * @return com.mozu.api.contracts.productadmin.CurrencyExchangeRateCollection
	 * @see com.mozu.api.contracts.productadmin.CurrencyExchangeRateCollection
	 */
	public com.mozu.api.contracts.productadmin.CurrencyExchangeRateCollection getCurrencyExchangeRates(String currencyCode, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.CurrencyExchangeRateCollection> client = com.mozu.api.clients.commerce.catalog.admin.CurrencyLocalizationClient.getCurrencyExchangeRatesClient( currencyCode,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CurrencyLocalization currencylocalization = new CurrencyLocalization();
	 *	CountDownLatch latch = currencylocalization.getCurrencyExchangeRates( currencyCode,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param currencyCode The three character ISOÂ currency code, such as USDÂ for US Dollars.
	 * @param responseFields Filtering syntax appended to an API call to increase or decrease the amount of data returned inside a JSON object. This parameter should only be used to retrieve data. Attempting to update data using this parameter may cause data loss.
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.productadmin.CurrencyExchangeRateCollection
	 * @see com.mozu.api.contracts.productadmin.CurrencyExchangeRateCollection
	 */
	public CountDownLatch getCurrencyExchangeRatesAsync(String currencyCode, String responseFields, AsyncCallback<com.mozu.api.contracts.productadmin.CurrencyExchangeRateCollection> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.CurrencyExchangeRateCollection> client = com.mozu.api.clients.commerce.catalog.admin.CurrencyLocalizationClient.getCurrencyExchangeRatesClient( currencyCode,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CurrencyLocalization currencylocalization = new CurrencyLocalization();
	 *	CurrencyLocalization currencyLocalization = currencylocalization.getCurrencyLocalization( currencyCode);
	 * </code></pre></p>
	 * @param currencyCode The three character ISOÂ currency code, such as USDÂ for US Dollars.
	 * @return com.mozu.api.contracts.productadmin.CurrencyLocalization
	 * @see com.mozu.api.contracts.productadmin.CurrencyLocalization
	 */
	public com.mozu.api.contracts.productadmin.CurrencyLocalization getCurrencyLocalization(String currencyCode) throws Exception
	{
		return getCurrencyLocalization( currencyCode,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	CurrencyLocalization currencylocalization = new CurrencyLocalization();
	 *	CountDownLatch latch = currencylocalization.getCurrencyLocalization( currencyCode, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param currencyCode The three character ISOÂ currency code, such as USDÂ for US Dollars.
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.productadmin.CurrencyLocalization
	 * @see com.mozu.api.contracts.productadmin.CurrencyLocalization
	 */
	public CountDownLatch getCurrencyLocalizationAsync(String currencyCode, AsyncCallback<com.mozu.api.contracts.productadmin.CurrencyLocalization> callback) throws Exception
	{
		return getCurrencyLocalizationAsync( currencyCode,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	CurrencyLocalization currencylocalization = new CurrencyLocalization();
	 *	CurrencyLocalization currencyLocalization = currencylocalization.getCurrencyLocalization( currencyCode,  responseFields);
	 * </code></pre></p>
	 * @param currencyCode The three character ISOÂ currency code, such as USDÂ for US Dollars.
	 * @param responseFields Filtering syntax appended to an API call to increase or decrease the amount of data returned inside a JSON object. This parameter should only be used to retrieve data. Attempting to update data using this parameter may cause data loss.
	 * @return com.mozu.api.contracts.productadmin.CurrencyLocalization
	 * @see com.mozu.api.contracts.productadmin.CurrencyLocalization
	 */
	public com.mozu.api.contracts.productadmin.CurrencyLocalization getCurrencyLocalization(String currencyCode, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.CurrencyLocalization> client = com.mozu.api.clients.commerce.catalog.admin.CurrencyLocalizationClient.getCurrencyLocalizationClient( currencyCode,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CurrencyLocalization currencylocalization = new CurrencyLocalization();
	 *	CountDownLatch latch = currencylocalization.getCurrencyLocalization( currencyCode,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param currencyCode The three character ISOÂ currency code, such as USDÂ for US Dollars.
	 * @param responseFields Filtering syntax appended to an API call to increase or decrease the amount of data returned inside a JSON object. This parameter should only be used to retrieve data. Attempting to update data using this parameter may cause data loss.
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.productadmin.CurrencyLocalization
	 * @see com.mozu.api.contracts.productadmin.CurrencyLocalization
	 */
	public CountDownLatch getCurrencyLocalizationAsync(String currencyCode, String responseFields, AsyncCallback<com.mozu.api.contracts.productadmin.CurrencyLocalization> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.CurrencyLocalization> client = com.mozu.api.clients.commerce.catalog.admin.CurrencyLocalizationClient.getCurrencyLocalizationClient( currencyCode,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CurrencyLocalization currencylocalization = new CurrencyLocalization();
	 *	CurrencyLocalization currencyLocalization = currencylocalization.addCurrencyLocalization( currencyLocalization);
	 * </code></pre></p>
	 * @param currencyLocalization 
	 * @return com.mozu.api.contracts.productadmin.CurrencyLocalization
	 * @see com.mozu.api.contracts.productadmin.CurrencyLocalization
	 * @see com.mozu.api.contracts.productadmin.CurrencyLocalization
	 */
	public com.mozu.api.contracts.productadmin.CurrencyLocalization addCurrencyLocalization(com.mozu.api.contracts.productadmin.CurrencyLocalization currencyLocalization) throws Exception
	{
		return addCurrencyLocalization( currencyLocalization,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	CurrencyLocalization currencylocalization = new CurrencyLocalization();
	 *	CountDownLatch latch = currencylocalization.addCurrencyLocalization( currencyLocalization, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param  callback callback handler for asynchronous operations
	 * @param currencyLocalization 
	 * @return com.mozu.api.contracts.productadmin.CurrencyLocalization
	 * @see com.mozu.api.contracts.productadmin.CurrencyLocalization
	 * @see com.mozu.api.contracts.productadmin.CurrencyLocalization
	 */
	public CountDownLatch addCurrencyLocalizationAsync(com.mozu.api.contracts.productadmin.CurrencyLocalization currencyLocalization, AsyncCallback<com.mozu.api.contracts.productadmin.CurrencyLocalization> callback) throws Exception
	{
		return addCurrencyLocalizationAsync( currencyLocalization,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	CurrencyLocalization currencylocalization = new CurrencyLocalization();
	 *	CurrencyLocalization currencyLocalization = currencylocalization.addCurrencyLocalization( currencyLocalization,  responseFields);
	 * </code></pre></p>
	 * @param responseFields Filtering syntax appended to an API call to increase or decrease the amount of data returned inside a JSON object. This parameter should only be used to retrieve data. Attempting to update data using this parameter may cause data loss.
	 * @param currencyLocalization 
	 * @return com.mozu.api.contracts.productadmin.CurrencyLocalization
	 * @see com.mozu.api.contracts.productadmin.CurrencyLocalization
	 * @see com.mozu.api.contracts.productadmin.CurrencyLocalization
	 */
	public com.mozu.api.contracts.productadmin.CurrencyLocalization addCurrencyLocalization(com.mozu.api.contracts.productadmin.CurrencyLocalization currencyLocalization, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.CurrencyLocalization> client = com.mozu.api.clients.commerce.catalog.admin.CurrencyLocalizationClient.addCurrencyLocalizationClient( currencyLocalization,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CurrencyLocalization currencylocalization = new CurrencyLocalization();
	 *	CountDownLatch latch = currencylocalization.addCurrencyLocalization( currencyLocalization,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param responseFields Filtering syntax appended to an API call to increase or decrease the amount of data returned inside a JSON object. This parameter should only be used to retrieve data. Attempting to update data using this parameter may cause data loss.
	 * @param  callback callback handler for asynchronous operations
	 * @param currencyLocalization 
	 * @return com.mozu.api.contracts.productadmin.CurrencyLocalization
	 * @see com.mozu.api.contracts.productadmin.CurrencyLocalization
	 * @see com.mozu.api.contracts.productadmin.CurrencyLocalization
	 */
	public CountDownLatch addCurrencyLocalizationAsync(com.mozu.api.contracts.productadmin.CurrencyLocalization currencyLocalization, String responseFields, AsyncCallback<com.mozu.api.contracts.productadmin.CurrencyLocalization> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.CurrencyLocalization> client = com.mozu.api.clients.commerce.catalog.admin.CurrencyLocalizationClient.addCurrencyLocalizationClient( currencyLocalization,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CurrencyLocalization currencylocalization = new CurrencyLocalization();
	 *	currencylocalization.addCurrencyExchangeRates( currencyExchangeRates,  currencyCode);
	 * </code></pre></p>
	 * @param currencyCode The three character ISOÂ currency code, such as USDÂ for US Dollars.
	 * @param currencyExchangeRates 
	 * @return 
	 * @see com.mozu.api.contracts.productadmin.CurrencyExchangeRate
	 */
	public void addCurrencyExchangeRates(List<com.mozu.api.contracts.productadmin.CurrencyExchangeRate> currencyExchangeRates, String currencyCode) throws Exception
	{
		MozuClient client = com.mozu.api.clients.commerce.catalog.admin.CurrencyLocalizationClient.addCurrencyExchangeRatesClient( currencyExchangeRates,  currencyCode);
		client.setContext(_apiContext);
		client.executeRequest();
		client.cleanupHttpConnection();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CurrencyLocalization currencylocalization = new CurrencyLocalization();
	 *	currencylocalization.updateCurrencyExchangeRates( currencyExchangeRates,  currencyCode);
	 * </code></pre></p>
	 * @param currencyCode The three character ISOÂ currency code, such as USDÂ for US Dollars.
	 * @param currencyExchangeRates 
	 * @return 
	 * @see com.mozu.api.contracts.productadmin.CurrencyExchangeRate
	 */
	public void updateCurrencyExchangeRates(List<com.mozu.api.contracts.productadmin.CurrencyExchangeRate> currencyExchangeRates, String currencyCode) throws Exception
	{
		MozuClient client = com.mozu.api.clients.commerce.catalog.admin.CurrencyLocalizationClient.updateCurrencyExchangeRatesClient( currencyExchangeRates,  currencyCode);
		client.setContext(_apiContext);
		client.executeRequest();
		client.cleanupHttpConnection();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CurrencyLocalization currencylocalization = new CurrencyLocalization();
	 *	CurrencyLocalization currencyLocalization = currencylocalization.updateCurrencyLocalization( currencyLocalization,  currencyCode);
	 * </code></pre></p>
	 * @param currencyCode The three character ISOÂ currency code, such as USDÂ for US Dollars.
	 * @param currencyLocalization 
	 * @return com.mozu.api.contracts.productadmin.CurrencyLocalization
	 * @see com.mozu.api.contracts.productadmin.CurrencyLocalization
	 * @see com.mozu.api.contracts.productadmin.CurrencyLocalization
	 */
	public com.mozu.api.contracts.productadmin.CurrencyLocalization updateCurrencyLocalization(com.mozu.api.contracts.productadmin.CurrencyLocalization currencyLocalization, String currencyCode) throws Exception
	{
		return updateCurrencyLocalization( currencyLocalization,  currencyCode,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	CurrencyLocalization currencylocalization = new CurrencyLocalization();
	 *	CountDownLatch latch = currencylocalization.updateCurrencyLocalization( currencyLocalization,  currencyCode, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param currencyCode The three character ISOÂ currency code, such as USDÂ for US Dollars.
	 * @param  callback callback handler for asynchronous operations
	 * @param currencyLocalization 
	 * @return com.mozu.api.contracts.productadmin.CurrencyLocalization
	 * @see com.mozu.api.contracts.productadmin.CurrencyLocalization
	 * @see com.mozu.api.contracts.productadmin.CurrencyLocalization
	 */
	public CountDownLatch updateCurrencyLocalizationAsync(com.mozu.api.contracts.productadmin.CurrencyLocalization currencyLocalization, String currencyCode, AsyncCallback<com.mozu.api.contracts.productadmin.CurrencyLocalization> callback) throws Exception
	{
		return updateCurrencyLocalizationAsync( currencyLocalization,  currencyCode,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	CurrencyLocalization currencylocalization = new CurrencyLocalization();
	 *	CurrencyLocalization currencyLocalization = currencylocalization.updateCurrencyLocalization( currencyLocalization,  currencyCode,  responseFields);
	 * </code></pre></p>
	 * @param currencyCode The three character ISOÂ currency code, such as USDÂ for US Dollars.
	 * @param responseFields Filtering syntax appended to an API call to increase or decrease the amount of data returned inside a JSON object. This parameter should only be used to retrieve data. Attempting to update data using this parameter may cause data loss.
	 * @param currencyLocalization 
	 * @return com.mozu.api.contracts.productadmin.CurrencyLocalization
	 * @see com.mozu.api.contracts.productadmin.CurrencyLocalization
	 * @see com.mozu.api.contracts.productadmin.CurrencyLocalization
	 */
	public com.mozu.api.contracts.productadmin.CurrencyLocalization updateCurrencyLocalization(com.mozu.api.contracts.productadmin.CurrencyLocalization currencyLocalization, String currencyCode, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.CurrencyLocalization> client = com.mozu.api.clients.commerce.catalog.admin.CurrencyLocalizationClient.updateCurrencyLocalizationClient( currencyLocalization,  currencyCode,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CurrencyLocalization currencylocalization = new CurrencyLocalization();
	 *	CountDownLatch latch = currencylocalization.updateCurrencyLocalization( currencyLocalization,  currencyCode,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param currencyCode The three character ISOÂ currency code, such as USDÂ for US Dollars.
	 * @param responseFields Filtering syntax appended to an API call to increase or decrease the amount of data returned inside a JSON object. This parameter should only be used to retrieve data. Attempting to update data using this parameter may cause data loss.
	 * @param  callback callback handler for asynchronous operations
	 * @param currencyLocalization 
	 * @return com.mozu.api.contracts.productadmin.CurrencyLocalization
	 * @see com.mozu.api.contracts.productadmin.CurrencyLocalization
	 * @see com.mozu.api.contracts.productadmin.CurrencyLocalization
	 */
	public CountDownLatch updateCurrencyLocalizationAsync(com.mozu.api.contracts.productadmin.CurrencyLocalization currencyLocalization, String currencyCode, String responseFields, AsyncCallback<com.mozu.api.contracts.productadmin.CurrencyLocalization> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.CurrencyLocalization> client = com.mozu.api.clients.commerce.catalog.admin.CurrencyLocalizationClient.updateCurrencyLocalizationClient( currencyLocalization,  currencyCode,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CurrencyLocalization currencylocalization = new CurrencyLocalization();
	 *	currencylocalization.deleteCurrencyLocalization( currencyCode);
	 * </code></pre></p>
	 * @param currencyCode The three character ISOÂ currency code, such as USDÂ for US Dollars.
	 * @return 
	 */
	public void deleteCurrencyLocalization(String currencyCode) throws Exception
	{
		MozuClient client = com.mozu.api.clients.commerce.catalog.admin.CurrencyLocalizationClient.deleteCurrencyLocalizationClient( currencyCode);
		client.setContext(_apiContext);
		client.executeRequest();
		client.cleanupHttpConnection();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CurrencyLocalization currencylocalization = new CurrencyLocalization();
	 *	currencylocalization.deleteCurrencyExchangeRate( currencyCode,  toCurrencyCode);
	 * </code></pre></p>
	 * @param currencyCode The three character ISOÂ currency code, such as USDÂ for US Dollars.
	 * @param toCurrencyCode 
	 * @return 
	 */
	public void deleteCurrencyExchangeRate(String currencyCode, String toCurrencyCode) throws Exception
	{
		MozuClient client = com.mozu.api.clients.commerce.catalog.admin.CurrencyLocalizationClient.deleteCurrencyExchangeRateClient( currencyCode,  toCurrencyCode);
		client.setContext(_apiContext);
		client.executeRequest();
		client.cleanupHttpConnection();

	}

}



