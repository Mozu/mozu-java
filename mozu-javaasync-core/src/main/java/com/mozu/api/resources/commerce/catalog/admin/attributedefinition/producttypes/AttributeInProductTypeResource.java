/**
 *     This code was auto-generated by a Codezu.     
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
 */
package com.mozu.api.resources.commerce.catalog.admin.attributedefinition.producttypes;

import com.mozu.api.ApiContext;
import java.util.List;
import java.util.ArrayList;
import com.mozu.api.MozuClient;
import com.mozu.api.MozuClientFactory;
import com.mozu.api.MozuUrl;
import com.mozu.api.Headers;
import org.joda.time.DateTime;
import com.mozu.api.AsyncCallback;
import java.util.concurrent.CountDownLatch;
import com.mozu.api.security.AuthTicket;
import org.apache.commons.lang.StringUtils;

/** <summary>
 * 
 * </summary>
 */
public class AttributeInProductTypeResource {
	///
	/// <see cref="Mozu.Api.ApiContext"/>
	///
	private ApiContext _apiContext;


	public AttributeInProductTypeResource(ApiContext apiContext) 
	{
		_apiContext = apiContext;
	}

	
	/**
	 * 
	 * <p><pre><code>
	 *	AttributeInProductType attributeinproducttype = new AttributeInProductType();
	 *	AttributeInProductType attributeInProductType = attributeinproducttype.getVariantProperties( productTypeId);
	 * </code></pre></p>
	 * @param productTypeId 
	 * @param dataViewMode DataViewMode
	 * @return List<com.mozu.api.contracts.productadmin.AttributeInProductType>
	 * @see com.mozu.api.contracts.productadmin.AttributeInProductType
	 */
	public List<com.mozu.api.contracts.productadmin.AttributeInProductType> getVariantProperties(Integer productTypeId) throws Exception
	{
		MozuClient<List<com.mozu.api.contracts.productadmin.AttributeInProductType>> client = com.mozu.api.clients.commerce.catalog.admin.attributedefinition.producttypes.AttributeInProductTypeClient.getVariantPropertiesClient( productTypeId);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	AttributeInProductType attributeinproducttype = new AttributeInProductType();
	 *	CountDownLatch latch = attributeinproducttype.getVariantProperties( productTypeId, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param productTypeId 
	 * @param  callback callback handler for asynchronous operations
	 * @param dataViewMode DataViewMode
	 * @return List<com.mozu.api.contracts.productadmin.AttributeInProductType>
	 * @see com.mozu.api.contracts.productadmin.AttributeInProductType
	 */
	public CountDownLatch getVariantPropertiesAsync(Integer productTypeId, AsyncCallback<List<com.mozu.api.contracts.productadmin.AttributeInProductType>> callback) throws Exception
	{
		MozuClient<List<com.mozu.api.contracts.productadmin.AttributeInProductType>> client = com.mozu.api.clients.commerce.catalog.admin.attributedefinition.producttypes.AttributeInProductTypeClient.getVariantPropertiesClient( productTypeId);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	AttributeInProductType attributeinproducttype = new AttributeInProductType();
	 *	AttributeInProductType attributeInProductType = attributeinproducttype.getVariantProperty( productTypeId,  attributeFQN);
	 * </code></pre></p>
	 * @param attributeFQN 
	 * @param productTypeId 
	 * @param dataViewMode DataViewMode
	 * @return com.mozu.api.contracts.productadmin.AttributeInProductType
	 * @see com.mozu.api.contracts.productadmin.AttributeInProductType
	 */
	public com.mozu.api.contracts.productadmin.AttributeInProductType getVariantProperty(Integer productTypeId, String attributeFQN) throws Exception
	{
		return getVariantProperty( productTypeId,  attributeFQN,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	AttributeInProductType attributeinproducttype = new AttributeInProductType();
	 *	CountDownLatch latch = attributeinproducttype.getVariantProperty( productTypeId,  attributeFQN, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param attributeFQN 
	 * @param productTypeId 
	 * @param  callback callback handler for asynchronous operations
	 * @param dataViewMode DataViewMode
	 * @return com.mozu.api.contracts.productadmin.AttributeInProductType
	 * @see com.mozu.api.contracts.productadmin.AttributeInProductType
	 */
	public CountDownLatch getVariantPropertyAsync(Integer productTypeId, String attributeFQN, AsyncCallback<com.mozu.api.contracts.productadmin.AttributeInProductType> callback) throws Exception
	{
		return getVariantPropertyAsync( productTypeId,  attributeFQN,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	AttributeInProductType attributeinproducttype = new AttributeInProductType();
	 *	AttributeInProductType attributeInProductType = attributeinproducttype.getVariantProperty( productTypeId,  attributeFQN,  responseFields);
	 * </code></pre></p>
	 * @param attributeFQN 
	 * @param productTypeId 
	 * @param responseFields 
	 * @param dataViewMode DataViewMode
	 * @return com.mozu.api.contracts.productadmin.AttributeInProductType
	 * @see com.mozu.api.contracts.productadmin.AttributeInProductType
	 */
	public com.mozu.api.contracts.productadmin.AttributeInProductType getVariantProperty(Integer productTypeId, String attributeFQN, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.AttributeInProductType> client = com.mozu.api.clients.commerce.catalog.admin.attributedefinition.producttypes.AttributeInProductTypeClient.getVariantPropertyClient( productTypeId,  attributeFQN,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	AttributeInProductType attributeinproducttype = new AttributeInProductType();
	 *	CountDownLatch latch = attributeinproducttype.getVariantProperty( productTypeId,  attributeFQN,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param attributeFQN 
	 * @param productTypeId 
	 * @param responseFields 
	 * @param  callback callback handler for asynchronous operations
	 * @param dataViewMode DataViewMode
	 * @return com.mozu.api.contracts.productadmin.AttributeInProductType
	 * @see com.mozu.api.contracts.productadmin.AttributeInProductType
	 */
	public CountDownLatch getVariantPropertyAsync(Integer productTypeId, String attributeFQN, String responseFields, AsyncCallback<com.mozu.api.contracts.productadmin.AttributeInProductType> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.AttributeInProductType> client = com.mozu.api.clients.commerce.catalog.admin.attributedefinition.producttypes.AttributeInProductTypeClient.getVariantPropertyClient( productTypeId,  attributeFQN,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	AttributeInProductType attributeinproducttype = new AttributeInProductType();
	 *	AttributeInProductType attributeInProductType = attributeinproducttype.addVariantProperty( attributeInProductType,  productTypeId);
	 * </code></pre></p>
	 * @param productTypeId 
	 * @param dataViewMode DataViewMode
	 * @param attributeInProductType 
	 * @return com.mozu.api.contracts.productadmin.AttributeInProductType
	 * @see com.mozu.api.contracts.productadmin.AttributeInProductType
	 * @see com.mozu.api.contracts.productadmin.AttributeInProductType
	 */
	public com.mozu.api.contracts.productadmin.AttributeInProductType addVariantProperty(com.mozu.api.contracts.productadmin.AttributeInProductType attributeInProductType, Integer productTypeId) throws Exception
	{
		return addVariantProperty( attributeInProductType,  productTypeId,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	AttributeInProductType attributeinproducttype = new AttributeInProductType();
	 *	CountDownLatch latch = attributeinproducttype.addVariantProperty( attributeInProductType,  productTypeId, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param productTypeId 
	 * @param  callback callback handler for asynchronous operations
	 * @param dataViewMode DataViewMode
	 * @param attributeInProductType 
	 * @return com.mozu.api.contracts.productadmin.AttributeInProductType
	 * @see com.mozu.api.contracts.productadmin.AttributeInProductType
	 * @see com.mozu.api.contracts.productadmin.AttributeInProductType
	 */
	public CountDownLatch addVariantPropertyAsync(com.mozu.api.contracts.productadmin.AttributeInProductType attributeInProductType, Integer productTypeId, AsyncCallback<com.mozu.api.contracts.productadmin.AttributeInProductType> callback) throws Exception
	{
		return addVariantPropertyAsync( attributeInProductType,  productTypeId,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	AttributeInProductType attributeinproducttype = new AttributeInProductType();
	 *	AttributeInProductType attributeInProductType = attributeinproducttype.addVariantProperty( attributeInProductType,  productTypeId,  responseFields);
	 * </code></pre></p>
	 * @param productTypeId 
	 * @param responseFields 
	 * @param dataViewMode DataViewMode
	 * @param attributeInProductType 
	 * @return com.mozu.api.contracts.productadmin.AttributeInProductType
	 * @see com.mozu.api.contracts.productadmin.AttributeInProductType
	 * @see com.mozu.api.contracts.productadmin.AttributeInProductType
	 */
	public com.mozu.api.contracts.productadmin.AttributeInProductType addVariantProperty(com.mozu.api.contracts.productadmin.AttributeInProductType attributeInProductType, Integer productTypeId, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.AttributeInProductType> client = com.mozu.api.clients.commerce.catalog.admin.attributedefinition.producttypes.AttributeInProductTypeClient.addVariantPropertyClient( attributeInProductType,  productTypeId,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	AttributeInProductType attributeinproducttype = new AttributeInProductType();
	 *	CountDownLatch latch = attributeinproducttype.addVariantProperty( attributeInProductType,  productTypeId,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param productTypeId 
	 * @param responseFields 
	 * @param  callback callback handler for asynchronous operations
	 * @param dataViewMode DataViewMode
	 * @param attributeInProductType 
	 * @return com.mozu.api.contracts.productadmin.AttributeInProductType
	 * @see com.mozu.api.contracts.productadmin.AttributeInProductType
	 * @see com.mozu.api.contracts.productadmin.AttributeInProductType
	 */
	public CountDownLatch addVariantPropertyAsync(com.mozu.api.contracts.productadmin.AttributeInProductType attributeInProductType, Integer productTypeId, String responseFields, AsyncCallback<com.mozu.api.contracts.productadmin.AttributeInProductType> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.AttributeInProductType> client = com.mozu.api.clients.commerce.catalog.admin.attributedefinition.producttypes.AttributeInProductTypeClient.addVariantPropertyClient( attributeInProductType,  productTypeId,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	AttributeInProductType attributeinproducttype = new AttributeInProductType();
	 *	AttributeInProductType attributeInProductType = attributeinproducttype.updateVariantProperty( attributeInProductType,  productTypeId,  attributeFQN);
	 * </code></pre></p>
	 * @param attributeFQN 
	 * @param productTypeId 
	 * @param dataViewMode DataViewMode
	 * @param attributeInProductType 
	 * @return com.mozu.api.contracts.productadmin.AttributeInProductType
	 * @see com.mozu.api.contracts.productadmin.AttributeInProductType
	 * @see com.mozu.api.contracts.productadmin.AttributeInProductType
	 */
	public com.mozu.api.contracts.productadmin.AttributeInProductType updateVariantProperty(com.mozu.api.contracts.productadmin.AttributeInProductType attributeInProductType, Integer productTypeId, String attributeFQN) throws Exception
	{
		return updateVariantProperty( attributeInProductType,  productTypeId,  attributeFQN,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	AttributeInProductType attributeinproducttype = new AttributeInProductType();
	 *	CountDownLatch latch = attributeinproducttype.updateVariantProperty( attributeInProductType,  productTypeId,  attributeFQN, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param attributeFQN 
	 * @param productTypeId 
	 * @param  callback callback handler for asynchronous operations
	 * @param dataViewMode DataViewMode
	 * @param attributeInProductType 
	 * @return com.mozu.api.contracts.productadmin.AttributeInProductType
	 * @see com.mozu.api.contracts.productadmin.AttributeInProductType
	 * @see com.mozu.api.contracts.productadmin.AttributeInProductType
	 */
	public CountDownLatch updateVariantPropertyAsync(com.mozu.api.contracts.productadmin.AttributeInProductType attributeInProductType, Integer productTypeId, String attributeFQN, AsyncCallback<com.mozu.api.contracts.productadmin.AttributeInProductType> callback) throws Exception
	{
		return updateVariantPropertyAsync( attributeInProductType,  productTypeId,  attributeFQN,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	AttributeInProductType attributeinproducttype = new AttributeInProductType();
	 *	AttributeInProductType attributeInProductType = attributeinproducttype.updateVariantProperty( attributeInProductType,  productTypeId,  attributeFQN,  responseFields);
	 * </code></pre></p>
	 * @param attributeFQN 
	 * @param productTypeId 
	 * @param responseFields 
	 * @param dataViewMode DataViewMode
	 * @param attributeInProductType 
	 * @return com.mozu.api.contracts.productadmin.AttributeInProductType
	 * @see com.mozu.api.contracts.productadmin.AttributeInProductType
	 * @see com.mozu.api.contracts.productadmin.AttributeInProductType
	 */
	public com.mozu.api.contracts.productadmin.AttributeInProductType updateVariantProperty(com.mozu.api.contracts.productadmin.AttributeInProductType attributeInProductType, Integer productTypeId, String attributeFQN, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.AttributeInProductType> client = com.mozu.api.clients.commerce.catalog.admin.attributedefinition.producttypes.AttributeInProductTypeClient.updateVariantPropertyClient( attributeInProductType,  productTypeId,  attributeFQN,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	AttributeInProductType attributeinproducttype = new AttributeInProductType();
	 *	CountDownLatch latch = attributeinproducttype.updateVariantProperty( attributeInProductType,  productTypeId,  attributeFQN,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param attributeFQN 
	 * @param productTypeId 
	 * @param responseFields 
	 * @param  callback callback handler for asynchronous operations
	 * @param dataViewMode DataViewMode
	 * @param attributeInProductType 
	 * @return com.mozu.api.contracts.productadmin.AttributeInProductType
	 * @see com.mozu.api.contracts.productadmin.AttributeInProductType
	 * @see com.mozu.api.contracts.productadmin.AttributeInProductType
	 */
	public CountDownLatch updateVariantPropertyAsync(com.mozu.api.contracts.productadmin.AttributeInProductType attributeInProductType, Integer productTypeId, String attributeFQN, String responseFields, AsyncCallback<com.mozu.api.contracts.productadmin.AttributeInProductType> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.AttributeInProductType> client = com.mozu.api.clients.commerce.catalog.admin.attributedefinition.producttypes.AttributeInProductTypeClient.updateVariantPropertyClient( attributeInProductType,  productTypeId,  attributeFQN,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	AttributeInProductType attributeinproducttype = new AttributeInProductType();
	 *	Stream stream = attributeinproducttype.deleteVariantProperty( productTypeId,  attributeFQN);
	 * </code></pre></p>
	 * @param attributeFQN 
	 * @param productTypeId 
	 * @param dataViewMode DataViewMode
	 * @return Stream
	 * @see Stream
	 */
	public java.io.InputStream deleteVariantProperty(Integer productTypeId, String attributeFQN) throws Exception
	{
		MozuClient<java.io.InputStream> client = com.mozu.api.clients.commerce.catalog.admin.attributedefinition.producttypes.AttributeInProductTypeClient.deleteVariantPropertyClient( productTypeId,  attributeFQN);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	AttributeInProductType attributeinproducttype = new AttributeInProductType();
	 *	CountDownLatch latch = attributeinproducttype.deleteVariantProperty( productTypeId,  attributeFQN, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param attributeFQN 
	 * @param productTypeId 
	 * @param  callback callback handler for asynchronous operations
	 * @param dataViewMode DataViewMode
	 * @return Stream
	 * @see Stream
	 */
	public CountDownLatch deleteVariantPropertyAsync(Integer productTypeId, String attributeFQN, AsyncCallback<java.io.InputStream> callback) throws Exception
	{
		MozuClient<java.io.InputStream> client = com.mozu.api.clients.commerce.catalog.admin.attributedefinition.producttypes.AttributeInProductTypeClient.deleteVariantPropertyClient( productTypeId,  attributeFQN);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

}



