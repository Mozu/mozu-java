/**
 *     This code was auto-generated by a Codezu.     
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
 */
package com.mozu.api.resources.commerce.customer;

import com.mozu.api.ApiContext;
import java.util.List;
import java.util.ArrayList;
import com.mozu.api.MozuClient;
import com.mozu.api.MozuClientFactory;
import com.mozu.api.MozuUrl;
import com.mozu.api.Headers;
import org.joda.time.DateTime;
import com.mozu.api.AsyncCallback;
import java.util.concurrent.CountDownLatch;
import com.mozu.api.security.AuthTicket;
import org.apache.commons.lang.StringUtils;

/** <summary>
 * Use the Visits resource to manage all visits a customer makes to a tenant's sites and measure the level of transactions a customer performs during a unique visit for customer account analytics. Clients can track customer visits by site (including online and in-person interactions), the transactions a customer performs during the visit, and the device type associated with the visit, if any.
 * </summary>
 */
public class VisitResource {
	///
	/// <see cref="Mozu.Api.ApiContext"/>
	///
	private ApiContext _apiContext;


	public VisitResource(ApiContext apiContext) 
	{
		_apiContext = apiContext;
	}

	
	/**
	 * 
	 * <p><pre><code>
	 *	Visit visit = new Visit();
	 *	VisitCollection visitCollection = visit.getVisits();
	 * </code></pre></p>
	 * @return com.mozu.api.contracts.customer.VisitCollection
	 * @see com.mozu.api.contracts.customer.VisitCollection
	 */
	public com.mozu.api.contracts.customer.VisitCollection getVisits() throws Exception
	{
		return getVisits( null,  null,  null,  null,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	Visit visit = new Visit();
	 *	CountDownLatch latch = visit.getVisits( callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.customer.VisitCollection
	 * @see com.mozu.api.contracts.customer.VisitCollection
	 */
	public CountDownLatch getVisitsAsync( AsyncCallback<com.mozu.api.contracts.customer.VisitCollection> callback) throws Exception
	{
		return getVisitsAsync( null,  null,  null,  null,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	Visit visit = new Visit();
	 *	VisitCollection visitCollection = visit.getVisits( startIndex,  pageSize,  sortBy,  filter,  responseFields);
	 * </code></pre></p>
	 * @param filter 
	 * @param pageSize 
	 * @param responseFields 
	 * @param sortBy 
	 * @param startIndex 
	 * @return com.mozu.api.contracts.customer.VisitCollection
	 * @see com.mozu.api.contracts.customer.VisitCollection
	 */
	public com.mozu.api.contracts.customer.VisitCollection getVisits(Integer startIndex, Integer pageSize, String sortBy, String filter, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.customer.VisitCollection> client = com.mozu.api.clients.commerce.customer.VisitClient.getVisitsClient( startIndex,  pageSize,  sortBy,  filter,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Visit visit = new Visit();
	 *	CountDownLatch latch = visit.getVisits( startIndex,  pageSize,  sortBy,  filter,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param filter 
	 * @param pageSize 
	 * @param responseFields 
	 * @param sortBy 
	 * @param startIndex 
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.customer.VisitCollection
	 * @see com.mozu.api.contracts.customer.VisitCollection
	 */
	public CountDownLatch getVisitsAsync(Integer startIndex, Integer pageSize, String sortBy, String filter, String responseFields, AsyncCallback<com.mozu.api.contracts.customer.VisitCollection> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.customer.VisitCollection> client = com.mozu.api.clients.commerce.customer.VisitClient.getVisitsClient( startIndex,  pageSize,  sortBy,  filter,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Visit visit = new Visit();
	 *	Visit visit = visit.getVisit( visitId);
	 * </code></pre></p>
	 * @param visitId Unique identifier of the customer visit to retrieve.
	 * @return com.mozu.api.contracts.customer.Visit
	 * @see com.mozu.api.contracts.customer.Visit
	 */
	public com.mozu.api.contracts.customer.Visit getVisit(String visitId) throws Exception
	{
		return getVisit( visitId,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	Visit visit = new Visit();
	 *	CountDownLatch latch = visit.getVisit( visitId, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param visitId Unique identifier of the customer visit to retrieve.
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.customer.Visit
	 * @see com.mozu.api.contracts.customer.Visit
	 */
	public CountDownLatch getVisitAsync(String visitId, AsyncCallback<com.mozu.api.contracts.customer.Visit> callback) throws Exception
	{
		return getVisitAsync( visitId,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	Visit visit = new Visit();
	 *	Visit visit = visit.getVisit( visitId,  responseFields);
	 * </code></pre></p>
	 * @param responseFields 
	 * @param visitId Unique identifier of the customer visit to retrieve.
	 * @return com.mozu.api.contracts.customer.Visit
	 * @see com.mozu.api.contracts.customer.Visit
	 */
	public com.mozu.api.contracts.customer.Visit getVisit(String visitId, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.customer.Visit> client = com.mozu.api.clients.commerce.customer.VisitClient.getVisitClient( visitId,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Visit visit = new Visit();
	 *	CountDownLatch latch = visit.getVisit( visitId,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param responseFields 
	 * @param visitId Unique identifier of the customer visit to retrieve.
	 * @param  callback callback handler for asynchronous operations
	 * @return com.mozu.api.contracts.customer.Visit
	 * @see com.mozu.api.contracts.customer.Visit
	 */
	public CountDownLatch getVisitAsync(String visitId, String responseFields, AsyncCallback<com.mozu.api.contracts.customer.Visit> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.customer.Visit> client = com.mozu.api.clients.commerce.customer.VisitClient.getVisitClient( visitId,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Visit visit = new Visit();
	 *	Visit visit = visit.addVisit( visit);
	 * </code></pre></p>
	 * @param visit Properties of the visit to add to the customer account.
	 * @return com.mozu.api.contracts.customer.Visit
	 * @see com.mozu.api.contracts.customer.Visit
	 * @see com.mozu.api.contracts.customer.Visit
	 */
	public com.mozu.api.contracts.customer.Visit addVisit(com.mozu.api.contracts.customer.Visit visit) throws Exception
	{
		return addVisit( visit,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	Visit visit = new Visit();
	 *	CountDownLatch latch = visit.addVisit( visit, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param  callback callback handler for asynchronous operations
	 * @param visit Properties of the visit to add to the customer account.
	 * @return com.mozu.api.contracts.customer.Visit
	 * @see com.mozu.api.contracts.customer.Visit
	 * @see com.mozu.api.contracts.customer.Visit
	 */
	public CountDownLatch addVisitAsync(com.mozu.api.contracts.customer.Visit visit, AsyncCallback<com.mozu.api.contracts.customer.Visit> callback) throws Exception
	{
		return addVisitAsync( visit,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	Visit visit = new Visit();
	 *	Visit visit = visit.addVisit( visit,  responseFields);
	 * </code></pre></p>
	 * @param responseFields 
	 * @param visit Properties of the visit to add to the customer account.
	 * @return com.mozu.api.contracts.customer.Visit
	 * @see com.mozu.api.contracts.customer.Visit
	 * @see com.mozu.api.contracts.customer.Visit
	 */
	public com.mozu.api.contracts.customer.Visit addVisit(com.mozu.api.contracts.customer.Visit visit, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.customer.Visit> client = com.mozu.api.clients.commerce.customer.VisitClient.addVisitClient( visit,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Visit visit = new Visit();
	 *	CountDownLatch latch = visit.addVisit( visit,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param responseFields 
	 * @param  callback callback handler for asynchronous operations
	 * @param visit Properties of the visit to add to the customer account.
	 * @return com.mozu.api.contracts.customer.Visit
	 * @see com.mozu.api.contracts.customer.Visit
	 * @see com.mozu.api.contracts.customer.Visit
	 */
	public CountDownLatch addVisitAsync(com.mozu.api.contracts.customer.Visit visit, String responseFields, AsyncCallback<com.mozu.api.contracts.customer.Visit> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.customer.Visit> client = com.mozu.api.clients.commerce.customer.VisitClient.addVisitClient( visit,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Visit visit = new Visit();
	 *	Visit visit = visit.updateVisit( visit,  visitId);
	 * </code></pre></p>
	 * @param visitId Unique identifier of the customer visit to update.
	 * @param visit Properties of the customer visit to update.
	 * @return com.mozu.api.contracts.customer.Visit
	 * @see com.mozu.api.contracts.customer.Visit
	 * @see com.mozu.api.contracts.customer.Visit
	 */
	public com.mozu.api.contracts.customer.Visit updateVisit(com.mozu.api.contracts.customer.Visit visit, String visitId) throws Exception
	{
		return updateVisit( visit,  visitId,  null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	Visit visit = new Visit();
	 *	CountDownLatch latch = visit.updateVisit( visit,  visitId, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param visitId Unique identifier of the customer visit to update.
	 * @param  callback callback handler for asynchronous operations
	 * @param visit Properties of the customer visit to update.
	 * @return com.mozu.api.contracts.customer.Visit
	 * @see com.mozu.api.contracts.customer.Visit
	 * @see com.mozu.api.contracts.customer.Visit
	 */
	public CountDownLatch updateVisitAsync(com.mozu.api.contracts.customer.Visit visit, String visitId, AsyncCallback<com.mozu.api.contracts.customer.Visit> callback) throws Exception
	{
		return updateVisitAsync( visit,  visitId,  null, callback);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	Visit visit = new Visit();
	 *	Visit visit = visit.updateVisit( visit,  visitId,  responseFields);
	 * </code></pre></p>
	 * @param responseFields 
	 * @param visitId Unique identifier of the customer visit to update.
	 * @param visit Properties of the customer visit to update.
	 * @return com.mozu.api.contracts.customer.Visit
	 * @see com.mozu.api.contracts.customer.Visit
	 * @see com.mozu.api.contracts.customer.Visit
	 */
	public com.mozu.api.contracts.customer.Visit updateVisit(com.mozu.api.contracts.customer.Visit visit, String visitId, String responseFields) throws Exception
	{
		MozuClient<com.mozu.api.contracts.customer.Visit> client = com.mozu.api.clients.commerce.customer.VisitClient.updateVisitClient( visit,  visitId,  responseFields);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Visit visit = new Visit();
	 *	CountDownLatch latch = visit.updateVisit( visit,  visitId,  responseFields, callback );
	 *	latch.await()	 * </code></pre></p>
	 * @param responseFields 
	 * @param visitId Unique identifier of the customer visit to update.
	 * @param  callback callback handler for asynchronous operations
	 * @param visit Properties of the customer visit to update.
	 * @return com.mozu.api.contracts.customer.Visit
	 * @see com.mozu.api.contracts.customer.Visit
	 * @see com.mozu.api.contracts.customer.Visit
	 */
	public CountDownLatch updateVisitAsync(com.mozu.api.contracts.customer.Visit visit, String visitId, String responseFields, AsyncCallback<com.mozu.api.contracts.customer.Visit> callback) throws Exception
	{
		MozuClient<com.mozu.api.contracts.customer.Visit> client = com.mozu.api.clients.commerce.customer.VisitClient.updateVisitClient( visit,  visitId,  responseFields);
		client.setContext(_apiContext);
		return client.executeRequest(callback);

	}

}



