/**
 *     This code was auto-generated by a Codezu.     
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
 */
package com.mozu.api.contracts.productruntime;

import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import org.joda.time.DateTime;
import java.io.IOException;
import java.lang.ClassNotFoundException;
import com.mozu.api.contracts.productruntime.ProductPrice;
import com.mozu.api.contracts.productruntime.ProductPriceRange;

/**
 *	The product price in the applicable volume band.
 */
@JsonIgnoreProperties(ignoreUnknown = true)
public class ProductVolumePrice implements Serializable
{
	// Default Serial Version UID
	private static final long serialVersionUID = 1L;

	/**
	 * Specifies whether the volume pricing is current for the product.
	 */
	protected  Boolean isCurrent;

	public Boolean getIsCurrent() {
		return this.isCurrent;
	}

	public void setIsCurrent(Boolean isCurrent) {
		this.isCurrent = isCurrent;
	}

	/**
	 * The maximum product quantity of the volume price band. A shopper must purchase a quantity equal to or less than down to the  in order to receive the pricing in the volume band.
	 */
	protected  Integer maxQty;

	public Integer getMaxQty() {
		return this.maxQty;
	}

	public void setMaxQty(Integer maxQty) {
		this.maxQty = maxQty;
	}

	/**
	 * The minimum product quantity of the volume price band. A shopper must purchase a quantity equal to or greater than up to the  in order to receive the pricing in the volume band.
	 */
	protected  Integer minQty;

	public Integer getMinQty() {
		return this.minQty;
	}

	public void setMinQty(Integer minQty) {
		this.minQty = minQty;
	}

	/**
	 * The product price in the applicable volume band.
	 */
	protected  ProductPrice price;

	public ProductPrice getPrice() {
		return this.price;
	}

	public void setPrice(ProductPrice price) {
		this.price = price;
	}

	/**
	 * For products with options that vary the cost of the product, the range between lowest and highest possible price of the product based on the current selection of options.
	 */
	protected  ProductPriceRange priceRange;

	public ProductPriceRange getPriceRange() {
		return this.priceRange;
	}

	public void setPriceRange(ProductPriceRange priceRange) {
		this.priceRange = priceRange;
	}


}
