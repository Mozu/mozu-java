/**
 *     This code was auto-generated by a Codezu.     
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
 */
package com.mozu.api.contracts.pricingruntime;

import java.util.List;
import java.util.HashMap;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import org.joda.time.DateTime;
import java.io.IOException;
import java.lang.ClassNotFoundException;
import com.mozu.api.contracts.pricingruntime.DiscountCondition;
import com.mozu.api.contracts.pricingruntime.DiscountTarget;

/**
 *	Name of the discount added and applied to a shopping cart and order for a shopper's purchase.
 */
@JsonIgnoreProperties(ignoreUnknown = true)
public class Discount implements Serializable
{
	// Default Serial Version UID
	private static final long serialVersionUID = 1L;

	protected  Double amount;

	public Double getAmount() {
		return this.amount;
	}

	public void setAmount(Double amount) {
		this.amount = amount;
	}

	/**
	 * The type of the discount, either  (meaning the discount amount value represents a percentage off the original price),  (meaning the discount amount value represents a dollar amount off the original price),  (meaning the discount amount value is ignored because the product is free), or  (meaning the discount amount value represents the discounted price of the item).
	 */
	protected  String amountType;

	public String getAmountType() {
		return this.amountType;
	}

	public void setAmountType(String amountType) {
		this.amountType = amountType;
	}

	protected  Integer discountId;

	public Integer getDiscountId() {
		return this.discountId;
	}

	public void setDiscountId(Integer discountId) {
		this.discountId = discountId;
	}

	/**
	 * True if the discount should not apply to orders with multiple shipments. For more information, refer to the topic on [multiple shipments](https://www.mozu.com/docs/Guides/orders/multi-ship.htm#effect_on_discounts).
	 */
	protected  Boolean doesNotApplyToMultiShipToOrders;

	public Boolean getDoesNotApplyToMultiShipToOrders() {
		return this.doesNotApplyToMultiShipToOrders;
	}

	public void setDoesNotApplyToMultiShipToOrders(Boolean doesNotApplyToMultiShipToOrders) {
		this.doesNotApplyToMultiShipToOrders = doesNotApplyToMultiShipToOrders;
	}

	/**
	 * Determines whether or not a discount applies to a items with a sale price. Applicable on order and line item discounts. For line items, when this is true, the discount will be disqualified. For order level discounts, when true, the discount will not be applied to those items have a sale price.
	 */
	protected  Boolean doesNotApplyToProductsWithSalePrice;

	public Boolean getDoesNotApplyToProductsWithSalePrice() {
		return this.doesNotApplyToProductsWithSalePrice;
	}

	public void setDoesNotApplyToProductsWithSalePrice(Boolean doesNotApplyToProductsWithSalePrice) {
		this.doesNotApplyToProductsWithSalePrice = doesNotApplyToProductsWithSalePrice;
	}

	protected  DateTime expirationDate;

	public DateTime getExpirationDate() {
		return this.expirationDate;
	}

	public void setExpirationDate(DateTime expirationDate) {
		this.expirationDate = expirationDate;
	}

	/**
	 * The localizable, shopper-facing description defined for a discount or a storefront message.
	 */
	protected  String friendlyDescription;

	public String getFriendlyDescription() {
		return this.friendlyDescription;
	}

	public void setFriendlyDescription(String friendlyDescription) {
		this.friendlyDescription = friendlyDescription;
	}

	/**
	 * Products receiving a price from a price list specified here or a child of a specified price list can be discounted.
	 */
	protected List<String> includedPriceLists;
	public List<String> getIncludedPriceLists() {
		return this.includedPriceLists;
	}
	public void setIncludedPriceLists(List<String> includedPriceLists) {
		this.includedPriceLists = includedPriceLists;
	}

	/**
	 * The maximum amount of savings that may be applied per each redemption of this discount.
	 */
	protected  Double maxDiscountValuePerRedemption;

	public Double getMaxDiscountValuePerRedemption() {
		return this.maxDiscountValuePerRedemption;
	}

	public void setMaxDiscountValuePerRedemption(Double maxDiscountValuePerRedemption) {
		this.maxDiscountValuePerRedemption = maxDiscountValuePerRedemption;
	}

	/**
	 * The maximum amount of discount savings that may be applied per order.
	 */
	protected  Double maximumDiscountValuePerOrder;

	public Double getMaximumDiscountValuePerOrder() {
		return this.maximumDiscountValuePerOrder;
	}

	public void setMaximumDiscountValuePerOrder(Double maximumDiscountValuePerOrder) {
		this.maximumDiscountValuePerOrder = maximumDiscountValuePerOrder;
	}

	/**
	 * Maximum number of redemptions allowed per order. If null, defaults to unlimited.
	 */
	protected  Integer maximumRedemptionsPerOrder;

	public Integer getMaximumRedemptionsPerOrder() {
		return this.maximumRedemptionsPerOrder;
	}

	public void setMaximumRedemptionsPerOrder(Integer maximumRedemptionsPerOrder) {
		this.maximumRedemptionsPerOrder = maximumRedemptionsPerOrder;
	}

	/**
	 * The maximum number of times an individual shopper can redeem the discount.
	 */
	protected  Integer maximumUsesPerUser;

	public Integer getMaximumUsesPerUser() {
		return this.maximumUsesPerUser;
	}

	public void setMaximumUsesPerUser(Integer maximumUsesPerUser) {
		this.maximumUsesPerUser = maximumUsesPerUser;
	}

	/**
	 * The maximum number of times any coupon code in the coupon set can be used. This value must be either null, greater than or equal to 1, or -1. A value of -1 indicates unlimited.If you leave this value null,  defaults this value to 1 when you create the coupon set.
	 */
	protected  Integer maxRedemptions;

	public Integer getMaxRedemptions() {
		return this.maxRedemptions;
	}

	public void setMaxRedemptions(Integer maxRedemptions) {
		this.maxRedemptions = maxRedemptions;
	}

	protected  String name;

	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	protected  Integer redemptions;

	public Integer getRedemptions() {
		return this.redemptions;
	}

	public void setRedemptions(Integer redemptions) {
		this.redemptions = redemptions;
	}

	/**
	 * If true, only authenticated users can redeem the discount. If false, anonymous users can redeem the discount.
	 */
	protected  Boolean requiresAuthenticatedUser;

	public Boolean getRequiresAuthenticatedUser() {
		return this.requiresAuthenticatedUser;
	}

	public void setRequiresAuthenticatedUser(Boolean requiresAuthenticatedUser) {
		this.requiresAuthenticatedUser = requiresAuthenticatedUser;
	}

	/**
	 * The scope to which the discount applies, which is "Order" for order discounts or "LineItem" for individual product discounts.
	 */
	protected  String scope;

	public String getScope() {
		return this.scope;
	}

	public void setScope(String scope) {
		this.scope = scope;
	}

	/**
	 * Numerical fieldÂ representing the number of discount layer (up to 3).
	 */
	protected  Integer stackingLayer;

	public Integer getStackingLayer() {
		return this.stackingLayer;
	}

	public void setStackingLayer(Integer stackingLayer) {
		this.stackingLayer = stackingLayer;
	}

	protected  String type;

	public String getType() {
		return this.type;
	}

	public void setType(String type) {
		this.type = type;
	}

	/**
	 * A condition that must be met for the discount to apply.
	 */
	protected  DiscountCondition condition;

	public DiscountCondition getCondition() {
		return this.condition;
	}

	public void setCondition(DiscountCondition condition) {
		this.condition = condition;
	}

	/**
	 * Targets represent the object, such as an item to apply discounts to(products or orders) or a view field for content. Targets are the dot notations that link to the source document property. For example, firstitem for the direct level or firstitem.seconditem.thirditem for a deeper property.
	 */
	protected  DiscountTarget target;

	public DiscountTarget getTarget() {
		return this.target;
	}

	public void setTarget(DiscountTarget target) {
		this.target = target;
	}


}
