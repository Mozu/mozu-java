/**
 *     This code was auto-generated by a Codezu.     
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
 */
package com.mozu.api.contracts.sitesettings.general.general.routing;

import java.util.List;
import java.util.HashMap;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import org.joda.time.DateTime;
import java.io.IOException;
import java.lang.ClassNotFoundException;

/**
 *	Mozu.SiteSettings.General.Contracts.General.Routing.Route ApiType DOCUMENT_HERE 
 */
@JsonIgnoreProperties(ignoreUnknown = true)
public class Route implements Serializable
{
	// Default Serial Version UID
	private static final long serialVersionUID = 1L;

	/**
	 * When true, specifies that the route is a canonical route.
	 */
	protected  Boolean canonical;

	public Boolean getCanonical() {
		return this.canonical;
	}

	public void setCanonical(Boolean canonical) {
		this.canonical = canonical;
	}

	/**
	 * An array of key-value pairs that provide default values for required route parameters.
	 */
	public HashMap<String,Object> defaults;
	public HashMap<String,Object> getDefaults() {
		return this.defaults;
	}
	public void setDefaults(HashMap<String,Object> defaults) {
		this.defaults = defaults;
	}

	/**
	 * For Arc.js routes, specifies the Arc.js function name to create a route to. For example:
	 */
	protected  String functionId;

	public String getFunctionId() {
		return this.functionId;
	}

	public void setFunctionId(String functionId) {
		this.functionId = functionId;
	}

	/**
	 * Specifies the internal route to use for a particular URL template. For example, the "ProductDetails" internal route routes matching URLs to a product page.
	 */
	protected  String internalRoute;

	public String getInternalRoute() {
		return this.internalRoute;
	}

	public void setInternalRoute(String internalRoute) {
		this.internalRoute = internalRoute;
	}

	/**
	 * The list of mappings that a particular route uses.
	 */
	public HashMap<String,List<String>> mappings;
	public HashMap<String,List<String>> getMappings() {
		return this.mappings;
	}
	public void setMappings(HashMap<String,List<String>> mappings) {
		this.mappings = mappings;
	}

	/**
	 * Specifies the pattern of URL constants, variables, and segments that result in a match for a particular route.
	 */
	protected  String template;

	public String getTemplate() {
		return this.template;
	}

	public void setTemplate(String template) {
		this.template = template;
	}

	/**
	 * Specifies whether a custom route uses an  or  protocol. This allows you to set encryption on a route generated from a non-secure request, or vice-versa.
	 */
	protected  String urlScheme;

	public String getUrlScheme() {
		return this.urlScheme;
	}

	public void setUrlScheme(String urlScheme) {
		this.urlScheme = urlScheme;
	}

	/**
	 * Specifies the validators that a particular route uses.
	 */
	public HashMap<String,List<String>> validators;
	public HashMap<String,List<String>> getValidators() {
		return this.validators;
	}
	public void setValidators(HashMap<String,List<String>> validators) {
		this.validators = validators;
	}


}
