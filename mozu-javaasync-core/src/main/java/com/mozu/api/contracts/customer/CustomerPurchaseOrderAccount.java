/**
 *     This code was auto-generated by a Codezu.     
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
 */
package com.mozu.api.contracts.customer;

import java.util.List;
import java.util.HashMap;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import org.joda.time.DateTime;
import java.io.IOException;
import java.lang.ClassNotFoundException;
import com.mozu.api.contracts.core.AuditInfo;
import com.mozu.api.contracts.customer.CustomerPurchaseOrderPaymentTerm;

/**
 *	The details of a customer's purchase order account.
 */
@JsonIgnoreProperties(ignoreUnknown = true)
public class CustomerPurchaseOrderAccount implements Serializable
{
	// Default Serial Version UID
	private static final long serialVersionUID = 1L;

	/**
	 * Unique identifier of the customer account generated by the system. Account IDs are generated at account creation.
	 */
	protected  Integer accountId;

	public Integer getAccountId() {
		return this.accountId;
	}

	public void setAccountId(Integer accountId) {
		this.accountId = accountId;
	}

	/**
	 * The available balance the customer has on their purchase order account. This balance is the result of the  minus the customer's total amount due.
	 */
	protected  Double availableBalance;

	public Double getAvailableBalance() {
		return this.availableBalance;
	}

	public void setAvailableBalance(Double availableBalance) {
		this.availableBalance = availableBalance;
	}

	/**
	 * The total credit limit the customer can spend using purchase orders.
	 */
	protected  Double creditLimit;

	public Double getCreditLimit() {
		return this.creditLimit;
	}

	public void setCreditLimit(Double creditLimit) {
		this.creditLimit = creditLimit;
	}

	/**
	 * Unique identifier of the source property, such as a catalog, discount, order, or email template.For a product field it will be the name of the field.For a category ID, must be a positive integer not greater than 2000000. By default,  auto-generates a category ID when categories are created. If you want to specify an ID during creation (which preserves category link relationships when migrating tenant data from one sandbox to another), you must also include the  query string in the endpoint. For example, . Then, use the  property to specify the desired category ID.For a product attribute it will be the Attribute FQN.For a document, the ID must be specified as a 32 character, case-insensitive, alphanumeric string. You can specify the ID as 32 sequential characters or as groups separated by dashes in the format 8-4-4-4-12. For example, or.For email templates, the ID must be one of the following values:			
	 */
	protected  Integer id;

	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	/**
	 * Indicates if the object or process is enabled. This indicator is used on external payment workflows and product option values. For product options, if true, the product option value is available for a shopper to choose. During configuration, this property will be false if the option value is invalid with other selected options. For external payment workflows, if true, the workflow is enabled and available for routing payments for the submitted order.
	 */
	protected  Boolean isEnabled;

	public Boolean getIsEnabled() {
		return this.isEnabled;
	}

	public void setIsEnabled(Boolean isEnabled) {
		this.isEnabled = isEnabled;
	}

	/**
	 * The total monetary amount the customer can spend over their purchase order . The  controls the units of this amount.
	 */
	protected  Double overdraftAllowance;

	public Double getOverdraftAllowance() {
		return this.overdraftAllowance;
	}

	public void setOverdraftAllowance(Double overdraftAllowance) {
		this.overdraftAllowance = overdraftAllowance;
	}

	/**
	 * Specifies the type and units of the  amount.The valid values are:*  â€” specifies that the  amount is a decimal amount.*  â€” specifies that the  amount is a percentage amount.
	 */
	protected  String overdraftAllowanceType;

	public String getOverdraftAllowanceType() {
		return this.overdraftAllowanceType;
	}

	public void setOverdraftAllowanceType(String overdraftAllowanceType) {
		this.overdraftAllowanceType = overdraftAllowanceType;
	}

	/**
	 * The total available balance the customer has on their purchase order account. This balance is the result of the  minus the .
	 */
	protected  Double totalAvailableBalance;

	public Double getTotalAvailableBalance() {
		return this.totalAvailableBalance;
	}

	public void setTotalAvailableBalance(Double totalAvailableBalance) {
		this.totalAvailableBalance = totalAvailableBalance;
	}

	/**
	 * Basic audit info about the object, including date, time, and user account. This data may be captured when creating, updating, and removing data.
	 */
	protected  AuditInfo auditInfo;

	public AuditInfo getAuditInfo() {
		return this.auditInfo;
	}

	public void setAuditInfo(AuditInfo auditInfo) {
		this.auditInfo = auditInfo;
	}

	/**
	 * The specific payment terms for the customer's purchase order account. Each payment term is associated with a specific site, and you can specify more than one payment term for each site.
	 */
	protected List<CustomerPurchaseOrderPaymentTerm> customerPurchaseOrderPaymentTerms;
	public List<CustomerPurchaseOrderPaymentTerm> getCustomerPurchaseOrderPaymentTerms() {
		return this.customerPurchaseOrderPaymentTerms;
	}
	public void setCustomerPurchaseOrderPaymentTerms(List<CustomerPurchaseOrderPaymentTerm> customerPurchaseOrderPaymentTerms) {
		this.customerPurchaseOrderPaymentTerms = customerPurchaseOrderPaymentTerms;
	}


}
