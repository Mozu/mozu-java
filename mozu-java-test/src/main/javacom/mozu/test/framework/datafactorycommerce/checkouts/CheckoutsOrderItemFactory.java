/**
 *     This code was auto-generated by a tool.     
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
*/
package com.mozu.test.framework.datafactorycommerce.checkouts;

import java.util.List;
import java.util.HashMap;
import java.util.ArrayList;
import org.apache.http.HttpStatus;
import org.joda.time.DateTime;
import com.mozu.api.ApiException;
import com.mozu.api.ApiContext;
import com.mozu.test.framework.core.TestFailException;
import com.mozu.api.resources.commerce.checkouts.OrderItemResource;

/** <summary>
 * 
 * </summary>
 */
public class CheckoutsOrderItemFactory
{

	public static com.mozu.api.contracts.commerceruntime.checkouts.Checkout splitItem(ApiContext apiContext, String checkoutId, String itemId, int expectedCode) throws Exception
	{
		return splitItem(apiContext,  checkoutId,  itemId,  null,  null, expectedCode);
	}

	public static com.mozu.api.contracts.commerceruntime.checkouts.Checkout splitItem(ApiContext apiContext, String checkoutId, String itemId, Integer quantity, String responseFields, int expectedCode) throws Exception
	{
		com.mozu.api.contracts.commerceruntime.checkouts.Checkout returnObj = new com.mozu.api.contracts.commerceruntime.checkouts.Checkout();
		OrderItemResource resource = new OrderItemResource(apiContext);
		try
		{
			returnObj = resource.splitItem( checkoutId,  itemId,  quantity,  responseFields);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException("" + e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
			else
				return null;
		}
		if(expectedCode != 304 && !(expectedCode >= 200 && expectedCode <= 300) && !(expectedCode == HttpStatus.SC_NOT_FOUND && returnObj == null))
			throw new TestFailException("304 or between 200 and 300", Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
		return returnObj;
	}

	public static com.mozu.api.contracts.commerceruntime.checkouts.Checkout bulkUpdateItemDestinations(ApiContext apiContext, List<com.mozu.api.contracts.commerceruntime.checkouts.ItemsForDestination> itemsForDestination, String checkoutId, int expectedCode) throws Exception
	{
		return bulkUpdateItemDestinations(apiContext,  itemsForDestination,  checkoutId,  null, expectedCode);
	}

	public static com.mozu.api.contracts.commerceruntime.checkouts.Checkout bulkUpdateItemDestinations(ApiContext apiContext, List<com.mozu.api.contracts.commerceruntime.checkouts.ItemsForDestination> itemsForDestination, String checkoutId, String responseFields, int expectedCode) throws Exception
	{
		com.mozu.api.contracts.commerceruntime.checkouts.Checkout returnObj = new com.mozu.api.contracts.commerceruntime.checkouts.Checkout();
		OrderItemResource resource = new OrderItemResource(apiContext);
		try
		{
			returnObj = resource.bulkUpdateItemDestinations( itemsForDestination,  checkoutId,  responseFields);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException("" + e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
			else
				return null;
		}
		if(expectedCode != 304 && !(expectedCode >= 200 && expectedCode <= 300) && !(expectedCode == HttpStatus.SC_NOT_FOUND && returnObj == null))
			throw new TestFailException("304 or between 200 and 300", Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
		return returnObj;
	}

	public static com.mozu.api.contracts.commerceruntime.checkouts.Checkout updateItemDestination(ApiContext apiContext, String checkoutId, String itemId, String destinationId, int expectedCode) throws Exception
	{
		return updateItemDestination(apiContext,  checkoutId,  itemId,  destinationId,  null, expectedCode);
	}

	public static com.mozu.api.contracts.commerceruntime.checkouts.Checkout updateItemDestination(ApiContext apiContext, String checkoutId, String itemId, String destinationId, String responseFields, int expectedCode) throws Exception
	{
		com.mozu.api.contracts.commerceruntime.checkouts.Checkout returnObj = new com.mozu.api.contracts.commerceruntime.checkouts.Checkout();
		OrderItemResource resource = new OrderItemResource(apiContext);
		try
		{
			returnObj = resource.updateItemDestination( checkoutId,  itemId,  destinationId,  responseFields);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException("" + e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
			else
				return null;
		}
		if(expectedCode != 304 && !(expectedCode >= 200 && expectedCode <= 300) && !(expectedCode == HttpStatus.SC_NOT_FOUND && returnObj == null))
			throw new TestFailException("304 or between 200 and 300", Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
		return returnObj;
	}

}



