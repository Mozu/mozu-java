/**
 *     This code was auto-generated by a tool.     
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
*/
package com.mozu.test.framework.datafactorycommerce.returns;

import java.util.List;
import java.util.HashMap;
import java.util.ArrayList;
import org.apache.http.HttpStatus;
import org.joda.time.DateTime;
import com.mozu.api.ApiException;
import com.mozu.api.ApiContext;
import com.mozu.test.framework.core.TestFailException;
import com.mozu.api.resources.commerce.returns.OrderNoteResource;

/** <summary>
 * Use the Return Notes resource to access and modify internal notes associated with returns. These notes can be useful to customer service representatives viewing them in .
 * </summary>
 */
public class OrderNoteFactory
{

	public static List<com.mozu.api.contracts.commerceruntime.orders.OrderNote> getReturnNotes(ApiContext apiContext, String returnId, int expectedCode) throws Exception
	{
		List<com.mozu.api.contracts.commerceruntime.orders.OrderNote> returnObj = new ArrayList<com.mozu.api.contracts.commerceruntime.orders.OrderNote>();
		OrderNoteResource resource = new OrderNoteResource(apiContext);
		try
		{
			returnObj = resource.getReturnNotes( returnId);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException("" + e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
			else
				return null;
		}
		if(expectedCode != 304 && !(expectedCode >= 200 && expectedCode <= 300) && !(expectedCode == HttpStatus.SC_NOT_FOUND && returnObj == null))
			throw new TestFailException("304 or between 200 and 300", Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
		return returnObj;
	}

	public static com.mozu.api.contracts.commerceruntime.orders.OrderNote getReturnNote(ApiContext apiContext, String returnId, String noteId, int expectedCode) throws Exception
	{
		return getReturnNote(apiContext,  returnId,  noteId,  null, expectedCode);
	}

	public static com.mozu.api.contracts.commerceruntime.orders.OrderNote getReturnNote(ApiContext apiContext, String returnId, String noteId, String responseFields, int expectedCode) throws Exception
	{
		com.mozu.api.contracts.commerceruntime.orders.OrderNote returnObj = new com.mozu.api.contracts.commerceruntime.orders.OrderNote();
		OrderNoteResource resource = new OrderNoteResource(apiContext);
		try
		{
			returnObj = resource.getReturnNote( returnId,  noteId,  responseFields);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException("" + e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
			else
				return null;
		}
		if(expectedCode != 304 && !(expectedCode >= 200 && expectedCode <= 300) && !(expectedCode == HttpStatus.SC_NOT_FOUND && returnObj == null))
			throw new TestFailException("304 or between 200 and 300", Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
		return returnObj;
	}

	public static com.mozu.api.contracts.commerceruntime.orders.OrderNote createReturnNote(ApiContext apiContext, com.mozu.api.contracts.commerceruntime.orders.OrderNote returnNote, String returnId, int expectedCode) throws Exception
	{
		return createReturnNote(apiContext,  returnNote,  returnId,  null, expectedCode);
	}

	public static com.mozu.api.contracts.commerceruntime.orders.OrderNote createReturnNote(ApiContext apiContext, com.mozu.api.contracts.commerceruntime.orders.OrderNote returnNote, String returnId, String responseFields, int expectedCode) throws Exception
	{
		com.mozu.api.contracts.commerceruntime.orders.OrderNote returnObj = new com.mozu.api.contracts.commerceruntime.orders.OrderNote();
		OrderNoteResource resource = new OrderNoteResource(apiContext);
		try
		{
			returnObj = resource.createReturnNote( returnNote,  returnId,  responseFields);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException("" + e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
			else
				return null;
		}
		if(expectedCode != 304 && !(expectedCode >= 200 && expectedCode <= 300) && !(expectedCode == HttpStatus.SC_NOT_FOUND && returnObj == null))
			throw new TestFailException("304 or between 200 and 300", Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
		return returnObj;
	}

	public static com.mozu.api.contracts.commerceruntime.orders.OrderNote updateReturnNote(ApiContext apiContext, com.mozu.api.contracts.commerceruntime.orders.OrderNote returnNote, String returnId, String noteId, int expectedCode) throws Exception
	{
		return updateReturnNote(apiContext,  returnNote,  returnId,  noteId,  null, expectedCode);
	}

	public static com.mozu.api.contracts.commerceruntime.orders.OrderNote updateReturnNote(ApiContext apiContext, com.mozu.api.contracts.commerceruntime.orders.OrderNote returnNote, String returnId, String noteId, String responseFields, int expectedCode) throws Exception
	{
		com.mozu.api.contracts.commerceruntime.orders.OrderNote returnObj = new com.mozu.api.contracts.commerceruntime.orders.OrderNote();
		OrderNoteResource resource = new OrderNoteResource(apiContext);
		try
		{
			returnObj = resource.updateReturnNote( returnNote,  returnId,  noteId,  responseFields);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException("" + e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
			else
				return null;
		}
		if(expectedCode != 304 && !(expectedCode >= 200 && expectedCode <= 300) && !(expectedCode == HttpStatus.SC_NOT_FOUND && returnObj == null))
			throw new TestFailException("304 or between 200 and 300", Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
		return returnObj;
	}

	public static void deleteReturnNote(ApiContext apiContext, String returnId, String noteId, int expectedCode) throws Exception
	{
		OrderNoteResource resource = new OrderNoteResource(apiContext);
		try
		{
			resource.deleteReturnNote( returnId,  noteId);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException("" + e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
			else
				return;
		}
		if(expectedCode != 304 && !(expectedCode >= 200 && expectedCode <= 300))
			throw new TestFailException("304 or between 200 and 300", Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
	}

}



