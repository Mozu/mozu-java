/**
 *     This code was auto-generated by a tool.     
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
*/
package com.mozu.test.framework.datafactorycommerce.shipping.admin.profiles;

import java.util.List;
import java.util.HashMap;
import java.util.ArrayList;
import org.apache.http.HttpStatus;
import org.joda.time.DateTime;
import com.mozu.api.ApiException;
import com.mozu.api.ApiContext;
import com.mozu.test.framework.core.TestFailException;
import com.mozu.api.resources.commerce.shipping.admin.profiles.HandlingFeeRuleResource;

/** <summary>
 * Use the OrderHandlingFeeRules sub-resource to manage your order handling fee rules that are associated with a specific shipping profile.
 * </summary>
 */
public class HandlingFeeRuleFactory
{

	public static com.mozu.api.contracts.shippingadmin.profile.HandlingFeeRule getOrderHandlingFeeRule(ApiContext apiContext, String profilecode, String id, int expectedCode) throws Exception
	{
		return getOrderHandlingFeeRule(apiContext,  profilecode,  id,  null, expectedCode);
	}

	public static com.mozu.api.contracts.shippingadmin.profile.HandlingFeeRule getOrderHandlingFeeRule(ApiContext apiContext, String profilecode, String id, String responseFields, int expectedCode) throws Exception
	{
		com.mozu.api.contracts.shippingadmin.profile.HandlingFeeRule returnObj = new com.mozu.api.contracts.shippingadmin.profile.HandlingFeeRule();
		HandlingFeeRuleResource resource = new HandlingFeeRuleResource(apiContext);
		try
		{
			returnObj = resource.getOrderHandlingFeeRule( profilecode,  id,  responseFields);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException("" + e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
			else
				return null;
		}
		if(expectedCode != 304 && !(expectedCode >= 200 && expectedCode <= 300) && !(expectedCode == HttpStatus.SC_NOT_FOUND && returnObj == null))
			throw new TestFailException("304 or between 200 and 300", Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
		return returnObj;
	}

	public static com.mozu.api.contracts.shippingadmin.profile.HandlingFeeRuleCollection getOrderHandlingFeeRules(ApiContext apiContext, String profilecode, int expectedCode) throws Exception
	{
		return getOrderHandlingFeeRules(apiContext,  profilecode,  null, expectedCode);
	}

	public static com.mozu.api.contracts.shippingadmin.profile.HandlingFeeRuleCollection getOrderHandlingFeeRules(ApiContext apiContext, String profilecode, String responseFields, int expectedCode) throws Exception
	{
		com.mozu.api.contracts.shippingadmin.profile.HandlingFeeRuleCollection returnObj = new com.mozu.api.contracts.shippingadmin.profile.HandlingFeeRuleCollection();
		HandlingFeeRuleResource resource = new HandlingFeeRuleResource(apiContext);
		try
		{
			returnObj = resource.getOrderHandlingFeeRules( profilecode,  responseFields);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException("" + e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
			else
				return null;
		}
		if(expectedCode != 304 && !(expectedCode >= 200 && expectedCode <= 300) && !(expectedCode == HttpStatus.SC_NOT_FOUND && returnObj == null))
			throw new TestFailException("304 or between 200 and 300", Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
		return returnObj;
	}

	public static com.mozu.api.contracts.shippingadmin.profile.HandlingFeeRule createOrderHandlingFeeRule(ApiContext apiContext, com.mozu.api.contracts.shippingadmin.profile.HandlingFeeRule rule, String profilecode, int expectedCode) throws Exception
	{
		return createOrderHandlingFeeRule(apiContext,  rule,  profilecode,  null, expectedCode);
	}

	public static com.mozu.api.contracts.shippingadmin.profile.HandlingFeeRule createOrderHandlingFeeRule(ApiContext apiContext, com.mozu.api.contracts.shippingadmin.profile.HandlingFeeRule rule, String profilecode, String responseFields, int expectedCode) throws Exception
	{
		com.mozu.api.contracts.shippingadmin.profile.HandlingFeeRule returnObj = new com.mozu.api.contracts.shippingadmin.profile.HandlingFeeRule();
		HandlingFeeRuleResource resource = new HandlingFeeRuleResource(apiContext);
		try
		{
			returnObj = resource.createOrderHandlingFeeRule( rule,  profilecode,  responseFields);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException("" + e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
			else
				return null;
		}
		if(expectedCode != 304 && !(expectedCode >= 200 && expectedCode <= 300) && !(expectedCode == HttpStatus.SC_NOT_FOUND && returnObj == null))
			throw new TestFailException("304 or between 200 and 300", Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
		return returnObj;
	}

	public static com.mozu.api.contracts.shippingadmin.profile.HandlingFeeRule updateOrderHandlingFeeRule(ApiContext apiContext, com.mozu.api.contracts.shippingadmin.profile.HandlingFeeRule rule, String profilecode, String id, int expectedCode) throws Exception
	{
		return updateOrderHandlingFeeRule(apiContext,  rule,  profilecode,  id,  null, expectedCode);
	}

	public static com.mozu.api.contracts.shippingadmin.profile.HandlingFeeRule updateOrderHandlingFeeRule(ApiContext apiContext, com.mozu.api.contracts.shippingadmin.profile.HandlingFeeRule rule, String profilecode, String id, String responseFields, int expectedCode) throws Exception
	{
		com.mozu.api.contracts.shippingadmin.profile.HandlingFeeRule returnObj = new com.mozu.api.contracts.shippingadmin.profile.HandlingFeeRule();
		HandlingFeeRuleResource resource = new HandlingFeeRuleResource(apiContext);
		try
		{
			returnObj = resource.updateOrderHandlingFeeRule( rule,  profilecode,  id,  responseFields);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException("" + e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
			else
				return null;
		}
		if(expectedCode != 304 && !(expectedCode >= 200 && expectedCode <= 300) && !(expectedCode == HttpStatus.SC_NOT_FOUND && returnObj == null))
			throw new TestFailException("304 or between 200 and 300", Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
		return returnObj;
	}

	public static void deleteOrderHandlingFeeRule(ApiContext apiContext, String profilecode, String id, int expectedCode) throws Exception
	{
		HandlingFeeRuleResource resource = new HandlingFeeRuleResource(apiContext);
		try
		{
			resource.deleteOrderHandlingFeeRule( profilecode,  id);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException("" + e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
			else
				return;
		}
		if(expectedCode != 304 && !(expectedCode >= 200 && expectedCode <= 300))
			throw new TestFailException("304 or between 200 and 300", Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
	}

}



