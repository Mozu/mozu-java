/**
 *     This code was auto-generated by a tool.     
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
*/
package com.mozu.test.framework.datafactorycommerce.payments;

import java.util.List;
import java.util.HashMap;
import java.util.ArrayList;
import org.apache.http.HttpStatus;
import org.joda.time.DateTime;
import com.mozu.api.ApiException;
import com.mozu.api.ApiContext;
import com.mozu.test.framework.core.TestFailException;
import com.mozu.api.resources.commerce.payments.PublicCardResource;

/** <summary>
 * commerce/payments/cards related resources. DOCUMENT_HERE 
 * </summary>
 */
public class PublicCardFactory
{

	public static com.mozu.api.contracts.paymentservice.response.SyncResponse create(ApiContext apiContext, com.mozu.api.contracts.paymentservice.PublicCard request, int expectedCode) throws Exception
	{
		return create(apiContext,  request,  null, expectedCode);
	}

	public static com.mozu.api.contracts.paymentservice.response.SyncResponse create(ApiContext apiContext, com.mozu.api.contracts.paymentservice.PublicCard request, String responseFields, int expectedCode) throws Exception
	{
		com.mozu.api.contracts.paymentservice.response.SyncResponse returnObj = new com.mozu.api.contracts.paymentservice.response.SyncResponse();
		PublicCardResource resource = new PublicCardResource(apiContext);
		try
		{
			returnObj = resource.create( request,  responseFields);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException("" + e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
			else
				return null;
		}
		if(expectedCode != 304 && !(expectedCode >= 200 && expectedCode <= 300) && !(expectedCode == HttpStatus.SC_NOT_FOUND && returnObj == null))
			throw new TestFailException("304 or between 200 and 300", Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
		return returnObj;
	}

	public static com.mozu.api.contracts.paymentservice.response.SyncResponse update(ApiContext apiContext, com.mozu.api.contracts.paymentservice.PublicCard request, String cardId, int expectedCode) throws Exception
	{
		return update(apiContext,  request,  cardId,  null, expectedCode);
	}

	public static com.mozu.api.contracts.paymentservice.response.SyncResponse update(ApiContext apiContext, com.mozu.api.contracts.paymentservice.PublicCard request, String cardId, String responseFields, int expectedCode) throws Exception
	{
		com.mozu.api.contracts.paymentservice.response.SyncResponse returnObj = new com.mozu.api.contracts.paymentservice.response.SyncResponse();
		PublicCardResource resource = new PublicCardResource(apiContext);
		try
		{
			returnObj = resource.update( request,  cardId,  responseFields);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException("" + e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
			else
				return null;
		}
		if(expectedCode != 304 && !(expectedCode >= 200 && expectedCode <= 300) && !(expectedCode == HttpStatus.SC_NOT_FOUND && returnObj == null))
			throw new TestFailException("304 or between 200 and 300", Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
		return returnObj;
	}

	public static void delete(ApiContext apiContext, String cardId, int expectedCode) throws Exception
	{
		PublicCardResource resource = new PublicCardResource(apiContext);
		try
		{
			resource.delete( cardId);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException("" + e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
			else
				return;
		}
		if(expectedCode != 304 && !(expectedCode >= 200 && expectedCode <= 300))
			throw new TestFailException("304 or between 200 and 300", Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
	}

}



