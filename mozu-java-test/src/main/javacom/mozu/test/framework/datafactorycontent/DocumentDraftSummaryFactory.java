/**
 *     This code was auto-generated by a tool.     
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
*/
package com.mozu.test.framework.datafactorycontent;

import java.util.List;
import java.util.HashMap;
import java.util.ArrayList;
import org.apache.http.HttpStatus;
import org.joda.time.DateTime;
import com.mozu.api.ApiException;
import com.mozu.api.ApiContext;
import com.mozu.test.framework.core.TestFailException;
import com.mozu.api.resources.content.DocumentDraftSummaryResource;

/** <summary>
 * Use the document publishing subresource to manage and publish document drafts in the Content service.
 * </summary>
 */
public class DocumentDraftSummaryFactory
{

	public static com.mozu.api.contracts.content.DocumentDraftSummaryPagedCollection listDocumentDraftSummaries(ApiContext apiContext, int expectedCode) throws Exception
	{
		return listDocumentDraftSummaries(apiContext,  null,  null,  null,  null, expectedCode);
	}

	public static com.mozu.api.contracts.content.DocumentDraftSummaryPagedCollection listDocumentDraftSummaries(ApiContext apiContext, Integer pageSize, Integer startIndex, String documentLists, String responseFields, int expectedCode) throws Exception
	{
		com.mozu.api.contracts.content.DocumentDraftSummaryPagedCollection returnObj = new com.mozu.api.contracts.content.DocumentDraftSummaryPagedCollection();
		DocumentDraftSummaryResource resource = new DocumentDraftSummaryResource(apiContext);
		try
		{
			returnObj = resource.listDocumentDraftSummaries( pageSize,  startIndex,  documentLists,  responseFields);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException("" + e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
			else
				return null;
		}
		if(expectedCode != 304 && !(expectedCode >= 200 && expectedCode <= 300) && !(expectedCode == HttpStatus.SC_NOT_FOUND && returnObj == null))
			throw new TestFailException("304 or between 200 and 300", Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
		return returnObj;
	}

	public static void deleteDocumentDrafts(ApiContext apiContext, List<String> documentIds, int expectedCode) throws Exception
	{
		deleteDocumentDrafts(apiContext,  documentIds,  null, expectedCode);
	}

	public static void deleteDocumentDrafts(ApiContext apiContext, List<String> documentIds, String documentLists, int expectedCode) throws Exception
	{
		DocumentDraftSummaryResource resource = new DocumentDraftSummaryResource(apiContext);
		try
		{
			resource.deleteDocumentDrafts( documentIds,  documentLists);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException("" + e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
			else
				return;
		}
		if(expectedCode != 304 && !(expectedCode >= 200 && expectedCode <= 300))
			throw new TestFailException("304 or between 200 and 300", Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
	}

	public static void publishDocuments(ApiContext apiContext, List<String> documentIds, int expectedCode) throws Exception
	{
		publishDocuments(apiContext,  documentIds,  null, expectedCode);
	}

	public static void publishDocuments(ApiContext apiContext, List<String> documentIds, String documentLists, int expectedCode) throws Exception
	{
		DocumentDraftSummaryResource resource = new DocumentDraftSummaryResource(apiContext);
		try
		{
			resource.publishDocuments( documentIds,  documentLists);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException("" + e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
			else
				return;
		}
		if(expectedCode != 304 && !(expectedCode >= 200 && expectedCode <= 300))
			throw new TestFailException("304 or between 200 and 300", Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
	}

}



