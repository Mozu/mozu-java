/**
 *     This code was auto-generated by a tool.     
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
*/
package com.mozu.test.framework.datafactory;

import java.util.List;
import java.util.ArrayList;
import com.mozu.api.ApiException;
import com.mozu.api.ApiContext;
import com.mozu.test.framework.core.TestFailException;
import com.mozu.api.resources.commerce.orders.DigitalPackageResource;

/** <summary>
 * A digital package is a package in a digital format.
 * </summary>
 */
public class DigitalPackageFactory
{

	public static List<String> getAvailableDigitalPackageFulfillmentActions(ApiContext apiContext, String orderId, String digitalPackageId, int expectedCode, int successCode) throws Exception
	{
		List<String> returnObj = new ArrayList<String>();
		DigitalPackageResource resource = new DigitalPackageResource(apiContext);
		try
		{
			returnObj = resource.getAvailableDigitalPackageFulfillmentActions( orderId,  digitalPackageId);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException(e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
			else
				return null;
		}
		if(expectedCode != successCode)
			throw new TestFailException(successCode, Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
		return returnObj;
	}

	public static com.mozu.api.contracts.commerceruntime.fulfillment.DigitalPackage getDigitalPackage(ApiContext apiContext, String orderId, String digitalPackageId, int expectedCode, int successCode) throws Exception
	{
		return getDigitalPackage(apiContext,  orderId,  digitalPackageId,  null, expectedCode, successCode );
	}

	public static com.mozu.api.contracts.commerceruntime.fulfillment.DigitalPackage getDigitalPackage(ApiContext apiContext, String orderId, String digitalPackageId, String responseFields, int expectedCode, int successCode) throws Exception
	{
		com.mozu.api.contracts.commerceruntime.fulfillment.DigitalPackage returnObj = new com.mozu.api.contracts.commerceruntime.fulfillment.DigitalPackage();
		DigitalPackageResource resource = new DigitalPackageResource(apiContext);
		try
		{
			returnObj = resource.getDigitalPackage( orderId,  digitalPackageId,  responseFields);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException(e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
			else
				return null;
		}
		if(expectedCode != successCode)
			throw new TestFailException(successCode, Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
		return returnObj;
	}

	public static com.mozu.api.contracts.commerceruntime.fulfillment.DigitalPackage createDigitalPackage(ApiContext apiContext, com.mozu.api.contracts.commerceruntime.fulfillment.DigitalPackage digitalPackage, String orderId, int expectedCode, int successCode) throws Exception
	{
		return createDigitalPackage(apiContext,  digitalPackage,  orderId,  null, expectedCode, successCode );
	}

	public static com.mozu.api.contracts.commerceruntime.fulfillment.DigitalPackage createDigitalPackage(ApiContext apiContext, com.mozu.api.contracts.commerceruntime.fulfillment.DigitalPackage digitalPackage, String orderId, String responseFields, int expectedCode, int successCode) throws Exception
	{
		com.mozu.api.contracts.commerceruntime.fulfillment.DigitalPackage returnObj = new com.mozu.api.contracts.commerceruntime.fulfillment.DigitalPackage();
		DigitalPackageResource resource = new DigitalPackageResource(apiContext);
		try
		{
			returnObj = resource.createDigitalPackage( digitalPackage,  orderId,  responseFields);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException(e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
			else
				return null;
		}
		if(expectedCode != successCode)
			throw new TestFailException(successCode, Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
		return returnObj;
	}

	public static com.mozu.api.contracts.commerceruntime.fulfillment.DigitalPackage updateDigitalPackage(ApiContext apiContext, com.mozu.api.contracts.commerceruntime.fulfillment.DigitalPackage digitalPackage, String orderId, String digitalPackageId, int expectedCode, int successCode) throws Exception
	{
		return updateDigitalPackage(apiContext,  digitalPackage,  orderId,  digitalPackageId,  null, expectedCode, successCode );
	}

	public static com.mozu.api.contracts.commerceruntime.fulfillment.DigitalPackage updateDigitalPackage(ApiContext apiContext, com.mozu.api.contracts.commerceruntime.fulfillment.DigitalPackage digitalPackage, String orderId, String digitalPackageId, String responseFields, int expectedCode, int successCode) throws Exception
	{
		com.mozu.api.contracts.commerceruntime.fulfillment.DigitalPackage returnObj = new com.mozu.api.contracts.commerceruntime.fulfillment.DigitalPackage();
		DigitalPackageResource resource = new DigitalPackageResource(apiContext);
		try
		{
			returnObj = resource.updateDigitalPackage( digitalPackage,  orderId,  digitalPackageId,  responseFields);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException(e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
			else
				return null;
		}
		if(expectedCode != successCode)
			throw new TestFailException(successCode, Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
		return returnObj;
	}

	public static void deleteDigitalPackage(ApiContext apiContext, String orderId, String digitalPackageId, int expectedCode, int successCode) throws Exception
	{
		DigitalPackageResource resource = new DigitalPackageResource(apiContext);
		try
		{
			resource.deleteDigitalPackage( orderId,  digitalPackageId);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException(e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
			else
				return;
		}
		if(expectedCode != successCode)
			throw new TestFailException(successCode, Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
	}

}



