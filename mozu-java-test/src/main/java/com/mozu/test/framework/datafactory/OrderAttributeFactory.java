/**
 *     This code was auto-generated by a tool.     
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
*/
package com.mozu.test.framework.datafactory;

import java.util.List;
import java.util.ArrayList;
import com.mozu.api.ApiException;
import com.mozu.api.ApiContext;
import com.mozu.test.framework.core.TestFailException;
import com.mozu.api.resources.commerce.orders.OrderAttributeResource;

/** <summary>
 * Use the Order Attributes resource to define how an order attribute definition applies to a specific order.
 * </summary>
 */
public class OrderAttributeFactory
{

	public static List<com.mozu.api.contracts.commerceruntime.orders.OrderAttribute> getOrderAttributes(ApiContext apiContext, String orderId, int expectedCode, int successCode) throws Exception
	{
		List<com.mozu.api.contracts.commerceruntime.orders.OrderAttribute> returnObj = new ArrayList<com.mozu.api.contracts.commerceruntime.orders.OrderAttribute>();
		OrderAttributeResource resource = new OrderAttributeResource(apiContext);
		try
		{
			returnObj = resource.getOrderAttributes( orderId);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException(e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
			else
				return null;
		}
		if(expectedCode != successCode)
			throw new TestFailException(successCode, Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
		return returnObj;
	}

	public static List<com.mozu.api.contracts.commerceruntime.orders.OrderAttribute> createOrderAttributes(ApiContext apiContext, List<com.mozu.api.contracts.commerceruntime.orders.OrderAttribute> orderAttributes, String orderId, int expectedCode, int successCode) throws Exception
	{
		List<com.mozu.api.contracts.commerceruntime.orders.OrderAttribute> returnObj = new ArrayList<com.mozu.api.contracts.commerceruntime.orders.OrderAttribute>();
		OrderAttributeResource resource = new OrderAttributeResource(apiContext);
		try
		{
			returnObj = resource.createOrderAttributes( orderAttributes,  orderId);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException(e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
			else
				return null;
		}
		if(expectedCode != successCode)
			throw new TestFailException(successCode, Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
		return returnObj;
	}

	public static List<com.mozu.api.contracts.commerceruntime.orders.OrderAttribute> updateOrderAttributes(ApiContext apiContext, List<com.mozu.api.contracts.commerceruntime.orders.OrderAttribute> orderAttributes, String orderId, int expectedCode, int successCode) throws Exception
	{
		return updateOrderAttributes(apiContext,  orderAttributes,  orderId,  null, expectedCode, successCode );
	}

	public static List<com.mozu.api.contracts.commerceruntime.orders.OrderAttribute> updateOrderAttributes(ApiContext apiContext, List<com.mozu.api.contracts.commerceruntime.orders.OrderAttribute> orderAttributes, String orderId, Boolean removeMissing, int expectedCode, int successCode) throws Exception
	{
		List<com.mozu.api.contracts.commerceruntime.orders.OrderAttribute> returnObj = new ArrayList<com.mozu.api.contracts.commerceruntime.orders.OrderAttribute>();
		OrderAttributeResource resource = new OrderAttributeResource(apiContext);
		try
		{
			returnObj = resource.updateOrderAttributes( orderAttributes,  orderId,  removeMissing);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException(e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
			else
				return null;
		}
		if(expectedCode != successCode)
			throw new TestFailException(successCode, Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
		return returnObj;
	}

}



