/**
 *     This code was auto-generated by a tool.     
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
*/
package com.mozu.test.framework.datafactory.commerce.orders;

import java.util.List;
import java.util.HashMap;
import java.util.ArrayList;
import org.apache.http.HttpStatus;
import org.joda.time.DateTime;
import com.mozu.api.ApiException;
import com.mozu.api.ApiContext;
import com.mozu.test.framework.core.TestFailException;
import com.mozu.api.resources.commerce.orders.RefundResource;

/** <summary>
 * Use the refunds resource to create a refund.
 * </summary>
 */
public class RefundFactory
{

	public static com.mozu.api.contracts.commerceruntime.refunds.Refund createRefund(ApiContext apiContext, com.mozu.api.contracts.commerceruntime.refunds.Refund refund, String orderId, int expectedCode) throws Exception
	{
		return createRefund(apiContext,  refund,  orderId,  null, expectedCode);
	}

	public static com.mozu.api.contracts.commerceruntime.refunds.Refund createRefund(ApiContext apiContext, com.mozu.api.contracts.commerceruntime.refunds.Refund refund, String orderId, String responseFields, int expectedCode) throws Exception
	{
		com.mozu.api.contracts.commerceruntime.refunds.Refund returnObj = new com.mozu.api.contracts.commerceruntime.refunds.Refund();
		RefundResource resource = new RefundResource(apiContext);
		try
		{
			returnObj = resource.createRefund( refund,  orderId,  responseFields);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException("" + e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
			else
				return null;
		}
		if(expectedCode != 304 && !(expectedCode >= 200 && expectedCode <= 300) && !(expectedCode == HttpStatus.SC_NOT_FOUND && returnObj == null))
			throw new TestFailException("304 or between 200 and 300", Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
		return returnObj;
	}

	public static java.io.InputStream resendRefundEmail(ApiContext apiContext, String orderId, String refundId, int expectedCode) throws Exception
	{
		java.io.InputStream returnObj;
		RefundResource resource = new RefundResource(apiContext);
		try
		{
			returnObj = resource.resendRefundEmail( orderId,  refundId);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException("" + e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
			else
				return null;
		}
		if(expectedCode != 304 && !(expectedCode >= 200 && expectedCode <= 300) && !(expectedCode == HttpStatus.SC_NOT_FOUND && returnObj == null))
			throw new TestFailException("304 or between 200 and 300", Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
		return returnObj;
	}

}



