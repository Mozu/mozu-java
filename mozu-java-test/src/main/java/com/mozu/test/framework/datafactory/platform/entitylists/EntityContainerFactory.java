/**
 *     This code was auto-generated by a tool.     
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
*/
package com.mozu.test.framework.datafactory.platform.entitylists;

import java.util.List;
import java.util.HashMap;
import java.util.ArrayList;
import org.apache.http.HttpStatus;
import org.joda.time.DateTime;
import com.mozu.api.ApiException;
import com.mozu.api.ApiContext;
import com.mozu.test.framework.core.TestFailException;
import com.mozu.api.resources.platform.entitylists.EntityContainerResource;

/** <summary>
 * Entity containers provide all properties and data for entities within a site/tenant. This data encapsulates all associated IDs including entity lists, entity views, site, tenant, entities, and more.
 * </summary>
 */
public class EntityContainerFactory
{

	public static com.mozu.api.contracts.mzdb.EntityContainer getEntityContainer(ApiContext apiContext, String entityListFullName, String id, int expectedCode) throws Exception
	{
		return getEntityContainer(apiContext,  entityListFullName,  id,  null, expectedCode);
	}

	public static com.mozu.api.contracts.mzdb.EntityContainer getEntityContainer(ApiContext apiContext, String entityListFullName, String id, String responseFields, int expectedCode) throws Exception
	{
		com.mozu.api.contracts.mzdb.EntityContainer returnObj = new com.mozu.api.contracts.mzdb.EntityContainer();
		EntityContainerResource resource = new EntityContainerResource(apiContext);
		try
		{
			returnObj = resource.getEntityContainer( entityListFullName,  id,  responseFields);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException("" + e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
			else
				return null;
		}
		if(expectedCode != 304 && !(expectedCode >= 200 && expectedCode <= 300) && !(expectedCode == HttpStatus.SC_NOT_FOUND && returnObj == null))
			throw new TestFailException("304 or between 200 and 300", Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
		return returnObj;
	}

	public static com.mozu.api.contracts.mzdb.EntityContainerCollection getEntityContainers(ApiContext apiContext, String entityListFullName, int expectedCode) throws Exception
	{
		return getEntityContainers(apiContext,  entityListFullName,  null,  null,  null,  null,  null, expectedCode);
	}

	public static com.mozu.api.contracts.mzdb.EntityContainerCollection getEntityContainers(ApiContext apiContext, String entityListFullName, Integer pageSize, Integer startIndex, String filter, String sortBy, String responseFields, int expectedCode) throws Exception
	{
		com.mozu.api.contracts.mzdb.EntityContainerCollection returnObj = new com.mozu.api.contracts.mzdb.EntityContainerCollection();
		EntityContainerResource resource = new EntityContainerResource(apiContext);
		try
		{
			returnObj = resource.getEntityContainers( entityListFullName,  pageSize,  startIndex,  filter,  sortBy,  responseFields);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException("" + e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
			else
				return null;
		}
		if(expectedCode != 304 && !(expectedCode >= 200 && expectedCode <= 300) && !(expectedCode == HttpStatus.SC_NOT_FOUND && returnObj == null))
			throw new TestFailException("304 or between 200 and 300", Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
		return returnObj;
	}

}



