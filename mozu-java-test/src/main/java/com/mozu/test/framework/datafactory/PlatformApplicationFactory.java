/**
 *     This code was auto-generated by a tool.     
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
*/
package com.mozu.test.framework.datafactory;

import java.util.List;
import java.util.ArrayList;
import org.apache.http.HttpStatus;
import com.mozu.api.ApiException;
import com.mozu.api.ApiContext;
import com.mozu.test.framework.core.TestFailException;
import com.mozu.api.resources.platform.ApplicationResource;

/** <summary>
 * platform/developer related resources. DOCUMENT_HERE 
 * </summary>
 */
public class PlatformApplicationFactory
{

	public static com.mozu.api.contracts.appdev.PackageNamesCollection getAppPackageNames(ApiContext apiContext, String applicationKey, int expectedCode) throws Exception
	{
		return getAppPackageNames(apiContext,  applicationKey,  null, expectedCode);
	}

	public static com.mozu.api.contracts.appdev.PackageNamesCollection getAppPackageNames(ApiContext apiContext, String applicationKey, String responseFields, int expectedCode) throws Exception
	{
		com.mozu.api.contracts.appdev.PackageNamesCollection returnObj = new com.mozu.api.contracts.appdev.PackageNamesCollection();
		ApplicationResource resource = new ApplicationResource(apiContext);
		try
		{
			returnObj = resource.getAppPackageNames( applicationKey,  responseFields);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException("" + e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
			else
				return null;
		}
		if(expectedCode != 304 && !(expectedCode >= 200 && expectedCode <= 300) && !(expectedCode == HttpStatus.SC_NOT_FOUND && returnObj == null))
			throw new TestFailException("304 or between 200 and 300", Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
		return returnObj;
	}

	public static com.mozu.api.contracts.appdev.ApplicationVersionsCollection getAppVersions(ApiContext apiContext, String nsAndAppId, int expectedCode) throws Exception
	{
		return getAppVersions(apiContext,  nsAndAppId,  null, expectedCode);
	}

	public static com.mozu.api.contracts.appdev.ApplicationVersionsCollection getAppVersions(ApiContext apiContext, String nsAndAppId, String responseFields, int expectedCode) throws Exception
	{
		com.mozu.api.contracts.appdev.ApplicationVersionsCollection returnObj = new com.mozu.api.contracts.appdev.ApplicationVersionsCollection();
		ApplicationResource resource = new ApplicationResource(apiContext);
		try
		{
			returnObj = resource.getAppVersions( nsAndAppId,  responseFields);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException("" + e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
			else
				return null;
		}
		if(expectedCode != 304 && !(expectedCode >= 200 && expectedCode <= 300) && !(expectedCode == HttpStatus.SC_NOT_FOUND && returnObj == null))
			throw new TestFailException("304 or between 200 and 300", Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
		return returnObj;
	}

	public static com.mozu.api.contracts.appdev.FileMetadata getPackageFileMetadata(ApiContext apiContext, String applicationKey, String filepath, int expectedCode) throws Exception
	{
		return getPackageFileMetadata(apiContext,  applicationKey,  filepath,  null, expectedCode);
	}

	public static com.mozu.api.contracts.appdev.FileMetadata getPackageFileMetadata(ApiContext apiContext, String applicationKey, String filepath, String responseFields, int expectedCode) throws Exception
	{
		com.mozu.api.contracts.appdev.FileMetadata returnObj = new com.mozu.api.contracts.appdev.FileMetadata();
		ApplicationResource resource = new ApplicationResource(apiContext);
		try
		{
			returnObj = resource.getPackageFileMetadata( applicationKey,  filepath,  responseFields);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException("" + e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
			else
				return null;
		}
		if(expectedCode != 304 && !(expectedCode >= 200 && expectedCode <= 300) && !(expectedCode == HttpStatus.SC_NOT_FOUND && returnObj == null))
			throw new TestFailException("304 or between 200 and 300", Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
		return returnObj;
	}

	public static com.mozu.api.contracts.appdev.FolderMetadata getPackageMetadata(ApiContext apiContext, String applicationKey, int expectedCode) throws Exception
	{
		return getPackageMetadata(apiContext,  applicationKey,  null, expectedCode);
	}

	public static com.mozu.api.contracts.appdev.FolderMetadata getPackageMetadata(ApiContext apiContext, String applicationKey, String responseFields, int expectedCode) throws Exception
	{
		com.mozu.api.contracts.appdev.FolderMetadata returnObj = new com.mozu.api.contracts.appdev.FolderMetadata();
		ApplicationResource resource = new ApplicationResource(apiContext);
		try
		{
			returnObj = resource.getPackageMetadata( applicationKey,  responseFields);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException("" + e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
			else
				return null;
		}
		if(expectedCode != 304 && !(expectedCode >= 200 && expectedCode <= 300) && !(expectedCode == HttpStatus.SC_NOT_FOUND && returnObj == null))
			throw new TestFailException("304 or between 200 and 300", Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
		return returnObj;
	}

	public static com.mozu.api.contracts.appdev.FileMetadata upsertPackageFile(ApiContext apiContext, java.io.InputStream stream, String applicationKey, String filepath, String  contentType, int expectedCode) throws Exception
	{
		return upsertPackageFile(apiContext,  stream,  applicationKey,  filepath,  null,  null,  contentType, expectedCode);
	}

	public static com.mozu.api.contracts.appdev.FileMetadata upsertPackageFile(ApiContext apiContext, java.io.InputStream stream, String applicationKey, String filepath, String lastModifiedTime, String responseFields, String  contentType, int expectedCode) throws Exception
	{
		com.mozu.api.contracts.appdev.FileMetadata returnObj = new com.mozu.api.contracts.appdev.FileMetadata();
		ApplicationResource resource = new ApplicationResource(apiContext);
		try
		{
			returnObj = resource.upsertPackageFile( stream,  applicationKey,  filepath,  lastModifiedTime,  responseFields,  contentType);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException("" + e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
			else
				return null;
		}
		if(expectedCode != 304 && !(expectedCode >= 200 && expectedCode <= 300) && !(expectedCode == HttpStatus.SC_NOT_FOUND && returnObj == null))
			throw new TestFailException("304 or between 200 and 300", Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
		return returnObj;
	}

	public static com.mozu.api.contracts.appdev.FileMetadata renamePackageFile(ApiContext apiContext, com.mozu.api.contracts.appdev.RenameInfo renameInfo, String applicationKey, int expectedCode) throws Exception
	{
		return renamePackageFile(apiContext,  renameInfo,  applicationKey,  null, expectedCode);
	}

	public static com.mozu.api.contracts.appdev.FileMetadata renamePackageFile(ApiContext apiContext, com.mozu.api.contracts.appdev.RenameInfo renameInfo, String applicationKey, String responseFields, int expectedCode) throws Exception
	{
		com.mozu.api.contracts.appdev.FileMetadata returnObj = new com.mozu.api.contracts.appdev.FileMetadata();
		ApplicationResource resource = new ApplicationResource(apiContext);
		try
		{
			returnObj = resource.renamePackageFile( renameInfo,  applicationKey,  responseFields);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException("" + e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
			else
				return null;
		}
		if(expectedCode != 304 && !(expectedCode >= 200 && expectedCode <= 300) && !(expectedCode == HttpStatus.SC_NOT_FOUND && returnObj == null))
			throw new TestFailException("304 or between 200 and 300", Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
		return returnObj;
	}

	public static void deletePackageFile(ApiContext apiContext, String applicationKey, String filepath, int expectedCode) throws Exception
	{
		ApplicationResource resource = new ApplicationResource(apiContext);
		try
		{
			resource.deletePackageFile( applicationKey,  filepath);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException("" + e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
			else
				return;
		}
		if(expectedCode != 304 && !(expectedCode >= 200 && expectedCode <= 300))
			throw new TestFailException("304 or between 200 and 300", Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
	}

}



