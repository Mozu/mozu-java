/**
 *     This code was auto-generated by a tool.     
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
*/
package com.mozu.test.framework.datafactory;

import java.util.List;
import java.util.ArrayList;
import com.mozu.api.ApiException;
import com.mozu.api.ApiContext;
import com.mozu.test.framework.core.TestFailException;
import com.mozu.api.resources.content.documentlists.DocumentResource;

/** <summary>
 * Use this subresource to manage documents in a document list.
 * </summary>
 */
public class DocumentFactory
{

	public static com.mozu.api.contracts.content.Document getDocument(ApiContext apiContext, com.mozu.api.DataViewMode dataViewMode, String documentListName, String documentId, int expectedCode, int successCode) throws Exception
	{
		com.mozu.api.contracts.content.Document returnObj = new com.mozu.api.contracts.content.Document();
		DocumentResource resource = new DocumentResource(apiContext);
		try
		{
			returnObj = resource.getDocument(dataViewMode,  documentListName,  documentId);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException(e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
			else
				return null;
		}
		if(expectedCode != successCode)
			 throw new TestFailException(successCode, Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
		return returnObj;

	}

	public static java.io.InputStream getDocumentContent(ApiContext apiContext, com.mozu.api.DataViewMode dataViewMode, String documentListName, String documentId, int expectedCode, int successCode) throws Exception
	{
		java.io.InputStream returnObj;
		DocumentResource resource = new DocumentResource(apiContext);
		try
		{
			returnObj = resource.getDocumentContent(dataViewMode,  documentListName,  documentId);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException(e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
			else
				return null;
		}
		if(expectedCode != successCode)
			 throw new TestFailException(successCode, Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
		return returnObj;

	}

	public static com.mozu.api.contracts.content.DocumentCollection getDocuments(ApiContext apiContext, com.mozu.api.DataViewMode dataViewMode, String documentListName, int expectedCode, int successCode) throws Exception
	{
		return getDocuments(apiContext, dataViewMode,  documentListName,  null,  null,  null,  null, expectedCode, successCode );
	}

	public static com.mozu.api.contracts.content.DocumentCollection getDocuments(ApiContext apiContext, com.mozu.api.DataViewMode dataViewMode, String documentListName, String filter, String sortBy, Integer pageSize, Integer startIndex, int expectedCode, int successCode) throws Exception
	{
		com.mozu.api.contracts.content.DocumentCollection returnObj = new com.mozu.api.contracts.content.DocumentCollection();
		DocumentResource resource = new DocumentResource(apiContext);
		try
		{
			returnObj = resource.getDocuments(dataViewMode,  documentListName,  filter,  sortBy,  pageSize,  startIndex);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException(e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
			else
				return null;
		}
		if(expectedCode != successCode)
			 throw new TestFailException(successCode, Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
		return returnObj;

	}

	public static com.mozu.api.contracts.content.Document createDocument(ApiContext apiContext, com.mozu.api.DataViewMode dataViewMode, com.mozu.api.contracts.content.Document document, String documentListName, int expectedCode, int successCode) throws Exception
	{
		com.mozu.api.contracts.content.Document returnObj = new com.mozu.api.contracts.content.Document();
		DocumentResource resource = new DocumentResource(apiContext);
		try
		{
			returnObj = resource.createDocument(dataViewMode,  document,  documentListName);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException(e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
			else
				return null;
		}
		if(expectedCode != successCode)
			 throw new TestFailException(successCode, Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
		return returnObj;

	}

	public static com.mozu.api.contracts.content.Document updateDocument(ApiContext apiContext, com.mozu.api.DataViewMode dataViewMode, com.mozu.api.contracts.content.Document document, String documentListName, String documentId, int expectedCode, int successCode) throws Exception
	{
		com.mozu.api.contracts.content.Document returnObj = new com.mozu.api.contracts.content.Document();
		DocumentResource resource = new DocumentResource(apiContext);
		try
		{
			returnObj = resource.updateDocument(dataViewMode,  document,  documentListName,  documentId);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException(e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
			else
				return null;
		}
		if(expectedCode != successCode)
			 throw new TestFailException(successCode, Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
		return returnObj;

	}

	public static void updateDocumentContent(ApiContext apiContext, com.mozu.api.DataViewMode dataViewMode, java.io.InputStream stream, String documentListName, String documentId, String  contentType, int expectedCode, int successCode) throws Exception
	{
				DocumentResource resource = new DocumentResource(apiContext);
		try
		{
			resource.updateDocumentContent(dataViewMode,  stream,  documentListName,  documentId,  contentType);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException(e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
		}
		if(expectedCode != successCode)
			 throw new TestFailException(successCode, Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");

	}

	public static void deleteDocument(ApiContext apiContext, com.mozu.api.DataViewMode dataViewMode, String documentListName, String documentId, int expectedCode, int successCode) throws Exception
	{
				DocumentResource resource = new DocumentResource(apiContext);
		try
		{
			resource.deleteDocument(dataViewMode,  documentListName,  documentId);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException(e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
		}
		if(expectedCode != successCode)
			 throw new TestFailException(successCode, Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");

	}

	public static void deleteDocumentContent(ApiContext apiContext, com.mozu.api.DataViewMode dataViewMode, String documentListName, String documentId, int expectedCode, int successCode) throws Exception
	{
				DocumentResource resource = new DocumentResource(apiContext);
		try
		{
			resource.deleteDocumentContent(dataViewMode,  documentListName,  documentId);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException(e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
		}
		if(expectedCode != successCode)
			 throw new TestFailException(successCode, Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");

	}

}



