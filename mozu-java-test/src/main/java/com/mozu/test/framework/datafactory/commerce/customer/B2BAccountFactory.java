/**
 *     This code was auto-generated by a tool.     
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
*/
package com.mozu.test.framework.datafactory.commerce.customer;

import java.util.List;
import java.util.HashMap;
import java.util.ArrayList;
import org.apache.http.HttpStatus;
import org.joda.time.DateTime;
import com.mozu.api.ApiException;
import com.mozu.api.ApiContext;
import com.mozu.test.framework.core.TestFailException;
import com.mozu.api.resources.commerce.customer.B2BAccountResource;

/** <summary>
 * The B2B feature includes the primary shared B2B account and a set of user account logins that have access to that primary account. This primary account has its own identifying data and customer attributes, as well as the list of users associated with it. These attributes and users can be managed through other operations of the B2B APIs.
 * </summary>
 */
public class B2BAccountFactory
{

	public static com.mozu.api.contracts.customer.B2BAccountCollection getB2BAccounts(ApiContext apiContext, int expectedCode) throws Exception
	{
		return getB2BAccounts(apiContext,  null,  null,  null,  null,  null,  null,  null,  null, expectedCode);
	}

	public static com.mozu.api.contracts.customer.B2BAccountCollection getB2BAccounts(ApiContext apiContext, Integer startIndex, Integer pageSize, String sortBy, String filter, String fields, String q, Integer qLimit, String responseFields, int expectedCode) throws Exception
	{
		com.mozu.api.contracts.customer.B2BAccountCollection returnObj = new com.mozu.api.contracts.customer.B2BAccountCollection();
		B2BAccountResource resource = new B2BAccountResource(apiContext);
		try
		{
			returnObj = resource.getB2BAccounts( startIndex,  pageSize,  sortBy,  filter,  fields,  q,  qLimit,  responseFields);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException("" + e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
			else
				return null;
		}
		if(expectedCode != 304 && !(expectedCode >= 200 && expectedCode <= 300) && !(expectedCode == HttpStatus.SC_NOT_FOUND && returnObj == null))
			throw new TestFailException("304 or between 200 and 300", Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
		return returnObj;
	}

	public static com.mozu.api.contracts.customer.CustomerAttribute getB2BAccountAttribute(ApiContext apiContext, Integer accountId, String attributeFQN, int expectedCode) throws Exception
	{
		return getB2BAccountAttribute(apiContext,  accountId,  attributeFQN,  null, expectedCode);
	}

	public static com.mozu.api.contracts.customer.CustomerAttribute getB2BAccountAttribute(ApiContext apiContext, Integer accountId, String attributeFQN, String responseFields, int expectedCode) throws Exception
	{
		com.mozu.api.contracts.customer.CustomerAttribute returnObj = new com.mozu.api.contracts.customer.CustomerAttribute();
		B2BAccountResource resource = new B2BAccountResource(apiContext);
		try
		{
			returnObj = resource.getB2BAccountAttribute( accountId,  attributeFQN,  responseFields);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException("" + e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
			else
				return null;
		}
		if(expectedCode != 304 && !(expectedCode >= 200 && expectedCode <= 300) && !(expectedCode == HttpStatus.SC_NOT_FOUND && returnObj == null))
			throw new TestFailException("304 or between 200 and 300", Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
		return returnObj;
	}

	public static com.mozu.api.contracts.customer.CustomerAttributeCollection getB2BAccountAttributes(ApiContext apiContext, Integer accountId, int expectedCode) throws Exception
	{
		return getB2BAccountAttributes(apiContext,  accountId,  null,  null,  null,  null,  null, expectedCode);
	}

	public static com.mozu.api.contracts.customer.CustomerAttributeCollection getB2BAccountAttributes(ApiContext apiContext, Integer accountId, Integer startIndex, Integer pageSize, String sortBy, String filter, String responseFields, int expectedCode) throws Exception
	{
		com.mozu.api.contracts.customer.CustomerAttributeCollection returnObj = new com.mozu.api.contracts.customer.CustomerAttributeCollection();
		B2BAccountResource resource = new B2BAccountResource(apiContext);
		try
		{
			returnObj = resource.getB2BAccountAttributes( accountId,  startIndex,  pageSize,  sortBy,  filter,  responseFields);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException("" + e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
			else
				return null;
		}
		if(expectedCode != 304 && !(expectedCode >= 200 && expectedCode <= 300) && !(expectedCode == HttpStatus.SC_NOT_FOUND && returnObj == null))
			throw new TestFailException("304 or between 200 and 300", Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
		return returnObj;
	}

	public static com.mozu.api.contracts.customer.UserRoleCollection getUserRolesAsync(ApiContext apiContext, Integer accountId, String userId, int expectedCode) throws Exception
	{
		return getUserRolesAsync(apiContext,  accountId,  userId,  null, expectedCode);
	}

	public static com.mozu.api.contracts.customer.UserRoleCollection getUserRolesAsync(ApiContext apiContext, Integer accountId, String userId, String responseFields, int expectedCode) throws Exception
	{
		com.mozu.api.contracts.customer.UserRoleCollection returnObj = new com.mozu.api.contracts.customer.UserRoleCollection();
		B2BAccountResource resource = new B2BAccountResource(apiContext);
		try
		{
			returnObj = resource.getUserRolesAsync( accountId,  userId,  responseFields);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException("" + e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
			else
				return null;
		}
		if(expectedCode != 304 && !(expectedCode >= 200 && expectedCode <= 300) && !(expectedCode == HttpStatus.SC_NOT_FOUND && returnObj == null))
			throw new TestFailException("304 or between 200 and 300", Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
		return returnObj;
	}

	public static com.mozu.api.contracts.customer.B2BUserCollection getUsers(ApiContext apiContext, Integer accountId, int expectedCode) throws Exception
	{
		return getUsers(apiContext,  accountId,  null,  null,  null,  null,  null,  null,  null, expectedCode);
	}

	public static com.mozu.api.contracts.customer.B2BUserCollection getUsers(ApiContext apiContext, Integer accountId, Integer startIndex, Integer pageSize, String sortBy, String filter, String q, Integer qLimit, String responseFields, int expectedCode) throws Exception
	{
		com.mozu.api.contracts.customer.B2BUserCollection returnObj = new com.mozu.api.contracts.customer.B2BUserCollection();
		B2BAccountResource resource = new B2BAccountResource(apiContext);
		try
		{
			returnObj = resource.getUsers( accountId,  startIndex,  pageSize,  sortBy,  filter,  q,  qLimit,  responseFields);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException("" + e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
			else
				return null;
		}
		if(expectedCode != 304 && !(expectedCode >= 200 && expectedCode <= 300) && !(expectedCode == HttpStatus.SC_NOT_FOUND && returnObj == null))
			throw new TestFailException("304 or between 200 and 300", Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
		return returnObj;
	}

	public static com.mozu.api.contracts.customer.B2BAccount getB2BAccount(ApiContext apiContext, Integer accountId, int expectedCode) throws Exception
	{
		return getB2BAccount(apiContext,  accountId,  null, expectedCode);
	}

	public static com.mozu.api.contracts.customer.B2BAccount getB2BAccount(ApiContext apiContext, Integer accountId, String responseFields, int expectedCode) throws Exception
	{
		com.mozu.api.contracts.customer.B2BAccount returnObj = new com.mozu.api.contracts.customer.B2BAccount();
		B2BAccountResource resource = new B2BAccountResource(apiContext);
		try
		{
			returnObj = resource.getB2BAccount( accountId,  responseFields);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException("" + e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
			else
				return null;
		}
		if(expectedCode != 304 && !(expectedCode >= 200 && expectedCode <= 300) && !(expectedCode == HttpStatus.SC_NOT_FOUND && returnObj == null))
			throw new TestFailException("304 or between 200 and 300", Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
		return returnObj;
	}

	public static com.mozu.api.contracts.customer.B2BAccount addAccount(ApiContext apiContext, com.mozu.api.contracts.customer.B2BAccount account, int expectedCode) throws Exception
	{
		return addAccount(apiContext,  account,  null, expectedCode);
	}

	public static com.mozu.api.contracts.customer.B2BAccount addAccount(ApiContext apiContext, com.mozu.api.contracts.customer.B2BAccount account, String responseFields, int expectedCode) throws Exception
	{
		com.mozu.api.contracts.customer.B2BAccount returnObj = new com.mozu.api.contracts.customer.B2BAccount();
		B2BAccountResource resource = new B2BAccountResource(apiContext);
		try
		{
			returnObj = resource.addAccount( account,  responseFields);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException("" + e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
			else
				return null;
		}
		if(expectedCode != 304 && !(expectedCode >= 200 && expectedCode <= 300) && !(expectedCode == HttpStatus.SC_NOT_FOUND && returnObj == null))
			throw new TestFailException("304 or between 200 and 300", Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
		return returnObj;
	}

	public static com.mozu.api.contracts.customer.CustomerAttribute addB2BAccountAttribute(ApiContext apiContext, com.mozu.api.contracts.customer.CustomerAttribute attribute, Integer accountId, int expectedCode) throws Exception
	{
		return addB2BAccountAttribute(apiContext,  attribute,  accountId,  null, expectedCode);
	}

	public static com.mozu.api.contracts.customer.CustomerAttribute addB2BAccountAttribute(ApiContext apiContext, com.mozu.api.contracts.customer.CustomerAttribute attribute, Integer accountId, String responseFields, int expectedCode) throws Exception
	{
		com.mozu.api.contracts.customer.CustomerAttribute returnObj = new com.mozu.api.contracts.customer.CustomerAttribute();
		B2BAccountResource resource = new B2BAccountResource(apiContext);
		try
		{
			returnObj = resource.addB2BAccountAttribute( attribute,  accountId,  responseFields);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException("" + e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
			else
				return null;
		}
		if(expectedCode != 304 && !(expectedCode >= 200 && expectedCode <= 300) && !(expectedCode == HttpStatus.SC_NOT_FOUND && returnObj == null))
			throw new TestFailException("304 or between 200 and 300", Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
		return returnObj;
	}

	public static java.io.InputStream addUserRoleAsync(ApiContext apiContext, Integer accountId, String userId, Integer roleId, int expectedCode) throws Exception
	{
		java.io.InputStream returnObj;
		B2BAccountResource resource = new B2BAccountResource(apiContext);
		try
		{
			returnObj = resource.addUserRoleAsync( accountId,  userId,  roleId);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException("" + e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
			else
				return null;
		}
		if(expectedCode != 304 && !(expectedCode >= 200 && expectedCode <= 300) && !(expectedCode == HttpStatus.SC_NOT_FOUND && returnObj == null))
			throw new TestFailException("304 or between 200 and 300", Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
		return returnObj;
	}

	public static com.mozu.api.contracts.customer.B2BUser addUser(ApiContext apiContext, com.mozu.api.contracts.customer.B2BUserAndAuthInfo user, Integer accountId, int expectedCode) throws Exception
	{
		return addUser(apiContext,  user,  accountId,  null, expectedCode);
	}

	public static com.mozu.api.contracts.customer.B2BUser addUser(ApiContext apiContext, com.mozu.api.contracts.customer.B2BUserAndAuthInfo user, Integer accountId, String responseFields, int expectedCode) throws Exception
	{
		com.mozu.api.contracts.customer.B2BUser returnObj = new com.mozu.api.contracts.customer.B2BUser();
		B2BAccountResource resource = new B2BAccountResource(apiContext);
		try
		{
			returnObj = resource.addUser( user,  accountId,  responseFields);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException("" + e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
			else
				return null;
		}
		if(expectedCode != 304 && !(expectedCode >= 200 && expectedCode <= 300) && !(expectedCode == HttpStatus.SC_NOT_FOUND && returnObj == null))
			throw new TestFailException("304 or between 200 and 300", Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
		return returnObj;
	}

	public static com.mozu.api.contracts.customer.CustomerAttribute updateB2BAccountAttribute(ApiContext apiContext, com.mozu.api.contracts.customer.CustomerAttribute attribute, Integer accountId, String attributeFQN, int expectedCode) throws Exception
	{
		return updateB2BAccountAttribute(apiContext,  attribute,  accountId,  attributeFQN,  null, expectedCode);
	}

	public static com.mozu.api.contracts.customer.CustomerAttribute updateB2BAccountAttribute(ApiContext apiContext, com.mozu.api.contracts.customer.CustomerAttribute attribute, Integer accountId, String attributeFQN, String responseFields, int expectedCode) throws Exception
	{
		com.mozu.api.contracts.customer.CustomerAttribute returnObj = new com.mozu.api.contracts.customer.CustomerAttribute();
		B2BAccountResource resource = new B2BAccountResource(apiContext);
		try
		{
			returnObj = resource.updateB2BAccountAttribute( attribute,  accountId,  attributeFQN,  responseFields);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException("" + e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
			else
				return null;
		}
		if(expectedCode != 304 && !(expectedCode >= 200 && expectedCode <= 300) && !(expectedCode == HttpStatus.SC_NOT_FOUND && returnObj == null))
			throw new TestFailException("304 or between 200 and 300", Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
		return returnObj;
	}

	public static java.io.InputStream removeUser(ApiContext apiContext, Integer accountId, String userId, int expectedCode) throws Exception
	{
		java.io.InputStream returnObj;
		B2BAccountResource resource = new B2BAccountResource(apiContext);
		try
		{
			returnObj = resource.removeUser( accountId,  userId);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException("" + e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
			else
				return null;
		}
		if(expectedCode != 304 && !(expectedCode >= 200 && expectedCode <= 300) && !(expectedCode == HttpStatus.SC_NOT_FOUND && returnObj == null))
			throw new TestFailException("304 or between 200 and 300", Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
		return returnObj;
	}

	public static com.mozu.api.contracts.customer.B2BUser updateUser(ApiContext apiContext, com.mozu.api.contracts.customer.B2BUser user, Integer accountId, String userId, int expectedCode) throws Exception
	{
		return updateUser(apiContext,  user,  accountId,  userId,  null, expectedCode);
	}

	public static com.mozu.api.contracts.customer.B2BUser updateUser(ApiContext apiContext, com.mozu.api.contracts.customer.B2BUser user, Integer accountId, String userId, String responseFields, int expectedCode) throws Exception
	{
		com.mozu.api.contracts.customer.B2BUser returnObj = new com.mozu.api.contracts.customer.B2BUser();
		B2BAccountResource resource = new B2BAccountResource(apiContext);
		try
		{
			returnObj = resource.updateUser( user,  accountId,  userId,  responseFields);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException("" + e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
			else
				return null;
		}
		if(expectedCode != 304 && !(expectedCode >= 200 && expectedCode <= 300) && !(expectedCode == HttpStatus.SC_NOT_FOUND && returnObj == null))
			throw new TestFailException("304 or between 200 and 300", Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
		return returnObj;
	}

	public static com.mozu.api.contracts.customer.B2BAccount updateAccount(ApiContext apiContext, com.mozu.api.contracts.customer.B2BAccount account, Integer accountId, int expectedCode) throws Exception
	{
		return updateAccount(apiContext,  account,  accountId,  null, expectedCode);
	}

	public static com.mozu.api.contracts.customer.B2BAccount updateAccount(ApiContext apiContext, com.mozu.api.contracts.customer.B2BAccount account, Integer accountId, String responseFields, int expectedCode) throws Exception
	{
		com.mozu.api.contracts.customer.B2BAccount returnObj = new com.mozu.api.contracts.customer.B2BAccount();
		B2BAccountResource resource = new B2BAccountResource(apiContext);
		try
		{
			returnObj = resource.updateAccount( account,  accountId,  responseFields);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException("" + e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
			else
				return null;
		}
		if(expectedCode != 304 && !(expectedCode >= 200 && expectedCode <= 300) && !(expectedCode == HttpStatus.SC_NOT_FOUND && returnObj == null))
			throw new TestFailException("304 or between 200 and 300", Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
		return returnObj;
	}

	public static java.io.InputStream deleteB2BAccountAttribute(ApiContext apiContext, Integer accountId, String attributeFQN, int expectedCode) throws Exception
	{
		java.io.InputStream returnObj;
		B2BAccountResource resource = new B2BAccountResource(apiContext);
		try
		{
			returnObj = resource.deleteB2BAccountAttribute( accountId,  attributeFQN);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException("" + e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
			else
				return null;
		}
		if(expectedCode != 304 && !(expectedCode >= 200 && expectedCode <= 300) && !(expectedCode == HttpStatus.SC_NOT_FOUND && returnObj == null))
			throw new TestFailException("304 or between 200 and 300", Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
		return returnObj;
	}

	public static java.io.InputStream removeUserRoleAsync(ApiContext apiContext, Integer accountId, String userId, Integer roleId, int expectedCode) throws Exception
	{
		java.io.InputStream returnObj;
		B2BAccountResource resource = new B2BAccountResource(apiContext);
		try
		{
			returnObj = resource.removeUserRoleAsync( accountId,  userId,  roleId);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException("" + e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
			else
				return null;
		}
		if(expectedCode != 304 && !(expectedCode >= 200 && expectedCode <= 300) && !(expectedCode == HttpStatus.SC_NOT_FOUND && returnObj == null))
			throw new TestFailException("304 or between 200 and 300", Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
		return returnObj;
	}

}



