/**
 *     This code was auto-generated by a tool.     
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
*/
package com.mozu.test.framework.datafactory.commerce.checkouts;

import java.util.List;
import java.util.HashMap;
import java.util.ArrayList;
import org.apache.http.HttpStatus;
import org.joda.time.DateTime;
import com.mozu.api.ApiException;
import com.mozu.api.ApiContext;
import com.mozu.test.framework.core.TestFailException;
import com.mozu.api.resources.commerce.checkouts.DestinationResource;

/** <summary>
 * Use this resource to manage the addresses a shopper intends to ship items to. This resource remains active while the Checkouts resource is active (the Checkouts resource only applies to sites that enable shipping to multiple destinations within the same order). The Checkouts resource remains active until the shopper submits their order.
 * </summary>
 */
public class DestinationFactory
{

	public static List<com.mozu.api.contracts.commerceruntime.fulfillment.Destination> getDestinations(ApiContext apiContext, String checkoutId, int expectedCode) throws Exception
	{
		List<com.mozu.api.contracts.commerceruntime.fulfillment.Destination> returnObj = new ArrayList<com.mozu.api.contracts.commerceruntime.fulfillment.Destination>();
		DestinationResource resource = new DestinationResource(apiContext);
		try
		{
			returnObj = resource.getDestinations( checkoutId);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException("" + e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
			else
				return null;
		}
		if(expectedCode != 304 && !(expectedCode >= 200 && expectedCode <= 300) && !(expectedCode == HttpStatus.SC_NOT_FOUND && returnObj == null))
			throw new TestFailException("304 or between 200 and 300", Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
		return returnObj;
	}

	public static com.mozu.api.contracts.commerceruntime.fulfillment.Destination getDestination(ApiContext apiContext, String checkoutId, String destinationId, int expectedCode) throws Exception
	{
		return getDestination(apiContext,  checkoutId,  destinationId,  null, expectedCode);
	}

	public static com.mozu.api.contracts.commerceruntime.fulfillment.Destination getDestination(ApiContext apiContext, String checkoutId, String destinationId, String responseFields, int expectedCode) throws Exception
	{
		com.mozu.api.contracts.commerceruntime.fulfillment.Destination returnObj = new com.mozu.api.contracts.commerceruntime.fulfillment.Destination();
		DestinationResource resource = new DestinationResource(apiContext);
		try
		{
			returnObj = resource.getDestination( checkoutId,  destinationId,  responseFields);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException("" + e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
			else
				return null;
		}
		if(expectedCode != 304 && !(expectedCode >= 200 && expectedCode <= 300) && !(expectedCode == HttpStatus.SC_NOT_FOUND && returnObj == null))
			throw new TestFailException("304 or between 200 and 300", Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
		return returnObj;
	}

	public static com.mozu.api.contracts.commerceruntime.fulfillment.Destination addDestination(ApiContext apiContext, com.mozu.api.contracts.commerceruntime.fulfillment.Destination destination, String checkoutId, int expectedCode) throws Exception
	{
		return addDestination(apiContext,  destination,  checkoutId,  null, expectedCode);
	}

	public static com.mozu.api.contracts.commerceruntime.fulfillment.Destination addDestination(ApiContext apiContext, com.mozu.api.contracts.commerceruntime.fulfillment.Destination destination, String checkoutId, String responseFields, int expectedCode) throws Exception
	{
		com.mozu.api.contracts.commerceruntime.fulfillment.Destination returnObj = new com.mozu.api.contracts.commerceruntime.fulfillment.Destination();
		DestinationResource resource = new DestinationResource(apiContext);
		try
		{
			returnObj = resource.addDestination( destination,  checkoutId,  responseFields);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException("" + e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
			else
				return null;
		}
		if(expectedCode != 304 && !(expectedCode >= 200 && expectedCode <= 300) && !(expectedCode == HttpStatus.SC_NOT_FOUND && returnObj == null))
			throw new TestFailException("304 or between 200 and 300", Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
		return returnObj;
	}

	public static com.mozu.api.contracts.commerceruntime.fulfillment.Destination updateDestination(ApiContext apiContext, com.mozu.api.contracts.commerceruntime.fulfillment.Destination destination, String checkoutId, String destinationId, int expectedCode) throws Exception
	{
		return updateDestination(apiContext,  destination,  checkoutId,  destinationId,  null, expectedCode);
	}

	public static com.mozu.api.contracts.commerceruntime.fulfillment.Destination updateDestination(ApiContext apiContext, com.mozu.api.contracts.commerceruntime.fulfillment.Destination destination, String checkoutId, String destinationId, String responseFields, int expectedCode) throws Exception
	{
		com.mozu.api.contracts.commerceruntime.fulfillment.Destination returnObj = new com.mozu.api.contracts.commerceruntime.fulfillment.Destination();
		DestinationResource resource = new DestinationResource(apiContext);
		try
		{
			returnObj = resource.updateDestination( destination,  checkoutId,  destinationId,  responseFields);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException("" + e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
			else
				return null;
		}
		if(expectedCode != 304 && !(expectedCode >= 200 && expectedCode <= 300) && !(expectedCode == HttpStatus.SC_NOT_FOUND && returnObj == null))
			throw new TestFailException("304 or between 200 and 300", Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
		return returnObj;
	}

	public static void removeDestination(ApiContext apiContext, String checkoutId, String destinationId, int expectedCode) throws Exception
	{
		DestinationResource resource = new DestinationResource(apiContext);
		try
		{
			resource.removeDestination( checkoutId,  destinationId);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException("" + e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
			else
				return;
		}
		if(expectedCode != 304 && !(expectedCode >= 200 && expectedCode <= 300))
			throw new TestFailException("304 or between 200 and 300", Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
	}

}



