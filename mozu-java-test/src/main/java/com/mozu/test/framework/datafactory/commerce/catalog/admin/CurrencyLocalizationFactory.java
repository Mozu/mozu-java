/**
 *     This code was auto-generated by a tool.     
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
*/
package com.mozu.test.framework.datafactory.commerce.catalog.admin;

import java.util.List;
import java.util.HashMap;
import java.util.ArrayList;
import org.apache.http.HttpStatus;
import org.joda.time.DateTime;
import com.mozu.api.ApiException;
import com.mozu.api.ApiContext;
import com.mozu.test.framework.core.TestFailException;
import com.mozu.api.resources.commerce.catalog.admin.CurrencyLocalizationResource;

/** <summary>
 * Manage the currency localization rules and exchange rates for any of the currencies that are supported for placing orders in.
 * </summary>
 */
public class CurrencyLocalizationFactory
{

	public static com.mozu.api.contracts.productadmin.CurrencyLocalizationCollection getCurrencyLocalizations(ApiContext apiContext, int expectedCode) throws Exception
	{
		return getCurrencyLocalizations(apiContext,  null, expectedCode);
	}

	public static com.mozu.api.contracts.productadmin.CurrencyLocalizationCollection getCurrencyLocalizations(ApiContext apiContext, String responseFields, int expectedCode) throws Exception
	{
		com.mozu.api.contracts.productadmin.CurrencyLocalizationCollection returnObj = new com.mozu.api.contracts.productadmin.CurrencyLocalizationCollection();
		CurrencyLocalizationResource resource = new CurrencyLocalizationResource(apiContext);
		try
		{
			returnObj = resource.getCurrencyLocalizations( responseFields);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException("" + e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
			else
				return null;
		}
		if(expectedCode != 304 && !(expectedCode >= 200 && expectedCode <= 300) && !(expectedCode == HttpStatus.SC_NOT_FOUND && returnObj == null))
			throw new TestFailException("304 or between 200 and 300", Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
		return returnObj;
	}

	public static com.mozu.api.contracts.productadmin.CurrencyExchangeRate getCurrencyExchangeRate(ApiContext apiContext, String currencyCode, String toCurrencyCode, int expectedCode) throws Exception
	{
		return getCurrencyExchangeRate(apiContext,  currencyCode,  toCurrencyCode,  null, expectedCode);
	}

	public static com.mozu.api.contracts.productadmin.CurrencyExchangeRate getCurrencyExchangeRate(ApiContext apiContext, String currencyCode, String toCurrencyCode, String responseFields, int expectedCode) throws Exception
	{
		com.mozu.api.contracts.productadmin.CurrencyExchangeRate returnObj = new com.mozu.api.contracts.productadmin.CurrencyExchangeRate();
		CurrencyLocalizationResource resource = new CurrencyLocalizationResource(apiContext);
		try
		{
			returnObj = resource.getCurrencyExchangeRate( currencyCode,  toCurrencyCode,  responseFields);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException("" + e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
			else
				return null;
		}
		if(expectedCode != 304 && !(expectedCode >= 200 && expectedCode <= 300) && !(expectedCode == HttpStatus.SC_NOT_FOUND && returnObj == null))
			throw new TestFailException("304 or between 200 and 300", Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
		return returnObj;
	}

	public static com.mozu.api.contracts.productadmin.CurrencyExchangeRateCollection getCurrencyExchangeRates(ApiContext apiContext, String currencyCode, int expectedCode) throws Exception
	{
		return getCurrencyExchangeRates(apiContext,  currencyCode,  null, expectedCode);
	}

	public static com.mozu.api.contracts.productadmin.CurrencyExchangeRateCollection getCurrencyExchangeRates(ApiContext apiContext, String currencyCode, String responseFields, int expectedCode) throws Exception
	{
		com.mozu.api.contracts.productadmin.CurrencyExchangeRateCollection returnObj = new com.mozu.api.contracts.productadmin.CurrencyExchangeRateCollection();
		CurrencyLocalizationResource resource = new CurrencyLocalizationResource(apiContext);
		try
		{
			returnObj = resource.getCurrencyExchangeRates( currencyCode,  responseFields);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException("" + e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
			else
				return null;
		}
		if(expectedCode != 304 && !(expectedCode >= 200 && expectedCode <= 300) && !(expectedCode == HttpStatus.SC_NOT_FOUND && returnObj == null))
			throw new TestFailException("304 or between 200 and 300", Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
		return returnObj;
	}

	public static com.mozu.api.contracts.productadmin.CurrencyLocalization getCurrencyLocalization(ApiContext apiContext, String currencyCode, int expectedCode) throws Exception
	{
		return getCurrencyLocalization(apiContext,  currencyCode,  null, expectedCode);
	}

	public static com.mozu.api.contracts.productadmin.CurrencyLocalization getCurrencyLocalization(ApiContext apiContext, String currencyCode, String responseFields, int expectedCode) throws Exception
	{
		com.mozu.api.contracts.productadmin.CurrencyLocalization returnObj = new com.mozu.api.contracts.productadmin.CurrencyLocalization();
		CurrencyLocalizationResource resource = new CurrencyLocalizationResource(apiContext);
		try
		{
			returnObj = resource.getCurrencyLocalization( currencyCode,  responseFields);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException("" + e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
			else
				return null;
		}
		if(expectedCode != 304 && !(expectedCode >= 200 && expectedCode <= 300) && !(expectedCode == HttpStatus.SC_NOT_FOUND && returnObj == null))
			throw new TestFailException("304 or between 200 and 300", Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
		return returnObj;
	}

	public static com.mozu.api.contracts.productadmin.CurrencyLocalization addCurrencyLocalization(ApiContext apiContext, com.mozu.api.contracts.productadmin.CurrencyLocalization currencyLocalization, int expectedCode) throws Exception
	{
		return addCurrencyLocalization(apiContext,  currencyLocalization,  null, expectedCode);
	}

	public static com.mozu.api.contracts.productadmin.CurrencyLocalization addCurrencyLocalization(ApiContext apiContext, com.mozu.api.contracts.productadmin.CurrencyLocalization currencyLocalization, String responseFields, int expectedCode) throws Exception
	{
		com.mozu.api.contracts.productadmin.CurrencyLocalization returnObj = new com.mozu.api.contracts.productadmin.CurrencyLocalization();
		CurrencyLocalizationResource resource = new CurrencyLocalizationResource(apiContext);
		try
		{
			returnObj = resource.addCurrencyLocalization( currencyLocalization,  responseFields);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException("" + e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
			else
				return null;
		}
		if(expectedCode != 304 && !(expectedCode >= 200 && expectedCode <= 300) && !(expectedCode == HttpStatus.SC_NOT_FOUND && returnObj == null))
			throw new TestFailException("304 or between 200 and 300", Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
		return returnObj;
	}

	public static void addCurrencyExchangeRates(ApiContext apiContext, List<com.mozu.api.contracts.productadmin.CurrencyExchangeRate> currencyExchangeRates, String currencyCode, int expectedCode) throws Exception
	{
		CurrencyLocalizationResource resource = new CurrencyLocalizationResource(apiContext);
		try
		{
			resource.addCurrencyExchangeRates( currencyExchangeRates,  currencyCode);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException("" + e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
			else
				return;
		}
		if(expectedCode != 304 && !(expectedCode >= 200 && expectedCode <= 300))
			throw new TestFailException("304 or between 200 and 300", Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
	}

	public static void updateCurrencyExchangeRates(ApiContext apiContext, List<com.mozu.api.contracts.productadmin.CurrencyExchangeRate> currencyExchangeRates, String currencyCode, int expectedCode) throws Exception
	{
		CurrencyLocalizationResource resource = new CurrencyLocalizationResource(apiContext);
		try
		{
			resource.updateCurrencyExchangeRates( currencyExchangeRates,  currencyCode);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException("" + e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
			else
				return;
		}
		if(expectedCode != 304 && !(expectedCode >= 200 && expectedCode <= 300))
			throw new TestFailException("304 or between 200 and 300", Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
	}

	public static com.mozu.api.contracts.productadmin.CurrencyLocalization updateCurrencyLocalization(ApiContext apiContext, com.mozu.api.contracts.productadmin.CurrencyLocalization currencyLocalization, String currencyCode, int expectedCode) throws Exception
	{
		return updateCurrencyLocalization(apiContext,  currencyLocalization,  currencyCode,  null, expectedCode);
	}

	public static com.mozu.api.contracts.productadmin.CurrencyLocalization updateCurrencyLocalization(ApiContext apiContext, com.mozu.api.contracts.productadmin.CurrencyLocalization currencyLocalization, String currencyCode, String responseFields, int expectedCode) throws Exception
	{
		com.mozu.api.contracts.productadmin.CurrencyLocalization returnObj = new com.mozu.api.contracts.productadmin.CurrencyLocalization();
		CurrencyLocalizationResource resource = new CurrencyLocalizationResource(apiContext);
		try
		{
			returnObj = resource.updateCurrencyLocalization( currencyLocalization,  currencyCode,  responseFields);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException("" + e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
			else
				return null;
		}
		if(expectedCode != 304 && !(expectedCode >= 200 && expectedCode <= 300) && !(expectedCode == HttpStatus.SC_NOT_FOUND && returnObj == null))
			throw new TestFailException("304 or between 200 and 300", Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
		return returnObj;
	}

	public static void deleteCurrencyLocalization(ApiContext apiContext, String currencyCode, int expectedCode) throws Exception
	{
		CurrencyLocalizationResource resource = new CurrencyLocalizationResource(apiContext);
		try
		{
			resource.deleteCurrencyLocalization( currencyCode);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException("" + e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
			else
				return;
		}
		if(expectedCode != 304 && !(expectedCode >= 200 && expectedCode <= 300))
			throw new TestFailException("304 or between 200 and 300", Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
	}

	public static void deleteCurrencyExchangeRate(ApiContext apiContext, String currencyCode, String toCurrencyCode, int expectedCode) throws Exception
	{
		CurrencyLocalizationResource resource = new CurrencyLocalizationResource(apiContext);
		try
		{
			resource.deleteCurrencyExchangeRate( currencyCode,  toCurrencyCode);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException("" + e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
			else
				return;
		}
		if(expectedCode != 304 && !(expectedCode >= 200 && expectedCode <= 300))
			throw new TestFailException("304 or between 200 and 300", Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
	}

}



