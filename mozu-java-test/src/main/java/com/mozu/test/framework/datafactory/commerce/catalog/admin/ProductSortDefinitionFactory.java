/**
 *     This code was auto-generated by a tool.     
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
*/
package com.mozu.test.framework.datafactory.commerce.catalog.admin;

import java.util.List;
import java.util.HashMap;
import java.util.ArrayList;
import org.apache.http.HttpStatus;
import org.joda.time.DateTime;
import com.mozu.api.ApiException;
import com.mozu.api.ApiContext;
import com.mozu.test.framework.core.TestFailException;
import com.mozu.api.resources.commerce.catalog.admin.ProductSortDefinitionResource;

/** <summary>
 * 
 * </summary>
 */
public class ProductSortDefinitionFactory
{

	public static com.mozu.api.contracts.productadmin.ProductSortDefinitionPagedCollection getProductSortDefinitions(ApiContext apiContext, com.mozu.api.DataViewMode dataViewMode, int expectedCode) throws Exception
	{
		return getProductSortDefinitions(apiContext, dataViewMode,  null,  null,  null,  null,  null, expectedCode);
	}

	public static com.mozu.api.contracts.productadmin.ProductSortDefinitionPagedCollection getProductSortDefinitions(ApiContext apiContext, com.mozu.api.DataViewMode dataViewMode, Integer startIndex, Integer pageSize, String sortBy, String filter, String responseFields, int expectedCode) throws Exception
	{
		com.mozu.api.contracts.productadmin.ProductSortDefinitionPagedCollection returnObj = new com.mozu.api.contracts.productadmin.ProductSortDefinitionPagedCollection();
		ProductSortDefinitionResource resource = new ProductSortDefinitionResource(apiContext, dataViewMode);
		try
		{
			returnObj = resource.getProductSortDefinitions( startIndex,  pageSize,  sortBy,  filter,  responseFields);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException("" + e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
			else
				return null;
		}
		if(expectedCode != 304 && !(expectedCode >= 200 && expectedCode <= 300) && !(expectedCode == HttpStatus.SC_NOT_FOUND && returnObj == null))
			throw new TestFailException("304 or between 200 and 300", Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
		return returnObj;
	}

	public static com.mozu.api.contracts.productadmin.ProductSortDefinition getProductSortDefinition(ApiContext apiContext, com.mozu.api.DataViewMode dataViewMode, Integer productSortDefinitionId, int expectedCode) throws Exception
	{
		return getProductSortDefinition(apiContext, dataViewMode,  productSortDefinitionId,  null, expectedCode);
	}

	public static com.mozu.api.contracts.productadmin.ProductSortDefinition getProductSortDefinition(ApiContext apiContext, com.mozu.api.DataViewMode dataViewMode, Integer productSortDefinitionId, String responseFields, int expectedCode) throws Exception
	{
		com.mozu.api.contracts.productadmin.ProductSortDefinition returnObj = new com.mozu.api.contracts.productadmin.ProductSortDefinition();
		ProductSortDefinitionResource resource = new ProductSortDefinitionResource(apiContext, dataViewMode);
		try
		{
			returnObj = resource.getProductSortDefinition( productSortDefinitionId,  responseFields);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException("" + e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
			else
				return null;
		}
		if(expectedCode != 304 && !(expectedCode >= 200 && expectedCode <= 300) && !(expectedCode == HttpStatus.SC_NOT_FOUND && returnObj == null))
			throw new TestFailException("304 or between 200 and 300", Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
		return returnObj;
	}

	public static com.mozu.api.contracts.productadmin.ProductSortDefinition addProductSortDefinition(ApiContext apiContext, com.mozu.api.DataViewMode dataViewMode, com.mozu.api.contracts.productadmin.ProductSortDefinition definition, int expectedCode) throws Exception
	{
		return addProductSortDefinition(apiContext, dataViewMode,  definition,  null,  null, expectedCode);
	}

	public static com.mozu.api.contracts.productadmin.ProductSortDefinition addProductSortDefinition(ApiContext apiContext, com.mozu.api.DataViewMode dataViewMode, com.mozu.api.contracts.productadmin.ProductSortDefinition definition, Boolean useProvidedId, String responseFields, int expectedCode) throws Exception
	{
		com.mozu.api.contracts.productadmin.ProductSortDefinition returnObj = new com.mozu.api.contracts.productadmin.ProductSortDefinition();
		ProductSortDefinitionResource resource = new ProductSortDefinitionResource(apiContext, dataViewMode);
		try
		{
			returnObj = resource.addProductSortDefinition( definition,  useProvidedId,  responseFields);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException("" + e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
			else
				return null;
		}
		if(expectedCode != 304 && !(expectedCode >= 200 && expectedCode <= 300) && !(expectedCode == HttpStatus.SC_NOT_FOUND && returnObj == null))
			throw new TestFailException("304 or between 200 and 300", Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
		return returnObj;
	}

	public static com.mozu.api.contracts.productadmin.ProductSortDefinition updateProductSortDefinition(ApiContext apiContext, com.mozu.api.DataViewMode dataViewMode, com.mozu.api.contracts.productadmin.ProductSortDefinition definition, Integer productSortDefinitionId, int expectedCode) throws Exception
	{
		return updateProductSortDefinition(apiContext, dataViewMode,  definition,  productSortDefinitionId,  null, expectedCode);
	}

	public static com.mozu.api.contracts.productadmin.ProductSortDefinition updateProductSortDefinition(ApiContext apiContext, com.mozu.api.DataViewMode dataViewMode, com.mozu.api.contracts.productadmin.ProductSortDefinition definition, Integer productSortDefinitionId, String responseFields, int expectedCode) throws Exception
	{
		com.mozu.api.contracts.productadmin.ProductSortDefinition returnObj = new com.mozu.api.contracts.productadmin.ProductSortDefinition();
		ProductSortDefinitionResource resource = new ProductSortDefinitionResource(apiContext, dataViewMode);
		try
		{
			returnObj = resource.updateProductSortDefinition( definition,  productSortDefinitionId,  responseFields);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException("" + e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
			else
				return null;
		}
		if(expectedCode != 304 && !(expectedCode >= 200 && expectedCode <= 300) && !(expectedCode == HttpStatus.SC_NOT_FOUND && returnObj == null))
			throw new TestFailException("304 or between 200 and 300", Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
		return returnObj;
	}

	public static java.io.InputStream deleteProductSortDefinition(ApiContext apiContext, com.mozu.api.DataViewMode dataViewMode, Integer productSortDefinitionId, int expectedCode) throws Exception
	{
		java.io.InputStream returnObj;
		ProductSortDefinitionResource resource = new ProductSortDefinitionResource(apiContext, dataViewMode);
		try
		{
			returnObj = resource.deleteProductSortDefinition( productSortDefinitionId);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException("" + e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
			else
				return null;
		}
		if(expectedCode != 304 && !(expectedCode >= 200 && expectedCode <= 300) && !(expectedCode == HttpStatus.SC_NOT_FOUND && returnObj == null))
			throw new TestFailException("304 or between 200 and 300", Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
		return returnObj;
	}

}



