/**
 *     This code was auto-generated by a tool.     
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
*/
package com.mozu.test.framework.datafactory;

import java.util.List;
import java.util.HashMap;
import java.util.ArrayList;
import org.apache.http.HttpStatus;
import org.joda.time.DateTime;
import com.mozu.api.ApiException;
import com.mozu.api.ApiContext;
import com.mozu.test.framework.core.TestFailException;
import com.mozu.api.resources.commerce.checkouts.OrderNoteResource;

/** <summary>
 * 
 * </summary>
 */
public class CheckoutsOrderNoteFactory
{

	public static List<com.mozu.api.contracts.commerceruntime.orders.OrderNote> getCheckoutNotes(ApiContext apiContext, String checkoutId, int expectedCode) throws Exception
	{
		List<com.mozu.api.contracts.commerceruntime.orders.OrderNote> returnObj = new ArrayList<com.mozu.api.contracts.commerceruntime.orders.OrderNote>();
		OrderNoteResource resource = new OrderNoteResource(apiContext);
		try
		{
			returnObj = resource.getCheckoutNotes( checkoutId);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException("" + e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
			else
				return null;
		}
		if(expectedCode != 304 && !(expectedCode >= 200 && expectedCode <= 300) && !(expectedCode == HttpStatus.SC_NOT_FOUND && returnObj == null))
			throw new TestFailException("304 or between 200 and 300", Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
		return returnObj;
	}

	public static com.mozu.api.contracts.commerceruntime.orders.OrderNote getCheckoutNote(ApiContext apiContext, String checkoutId, String noteId, int expectedCode) throws Exception
	{
		return getCheckoutNote(apiContext,  checkoutId,  noteId,  null, expectedCode);
	}

	public static com.mozu.api.contracts.commerceruntime.orders.OrderNote getCheckoutNote(ApiContext apiContext, String checkoutId, String noteId, String responseFields, int expectedCode) throws Exception
	{
		com.mozu.api.contracts.commerceruntime.orders.OrderNote returnObj = new com.mozu.api.contracts.commerceruntime.orders.OrderNote();
		OrderNoteResource resource = new OrderNoteResource(apiContext);
		try
		{
			returnObj = resource.getCheckoutNote( checkoutId,  noteId,  responseFields);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException("" + e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
			else
				return null;
		}
		if(expectedCode != 304 && !(expectedCode >= 200 && expectedCode <= 300) && !(expectedCode == HttpStatus.SC_NOT_FOUND && returnObj == null))
			throw new TestFailException("304 or between 200 and 300", Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
		return returnObj;
	}

	public static com.mozu.api.contracts.commerceruntime.orders.OrderNote createCheckoutNote(ApiContext apiContext, com.mozu.api.contracts.commerceruntime.orders.OrderNote orderNote, String checkoutId, int expectedCode) throws Exception
	{
		return createCheckoutNote(apiContext,  orderNote,  checkoutId,  null, expectedCode);
	}

	public static com.mozu.api.contracts.commerceruntime.orders.OrderNote createCheckoutNote(ApiContext apiContext, com.mozu.api.contracts.commerceruntime.orders.OrderNote orderNote, String checkoutId, String responseFields, int expectedCode) throws Exception
	{
		com.mozu.api.contracts.commerceruntime.orders.OrderNote returnObj = new com.mozu.api.contracts.commerceruntime.orders.OrderNote();
		OrderNoteResource resource = new OrderNoteResource(apiContext);
		try
		{
			returnObj = resource.createCheckoutNote( orderNote,  checkoutId,  responseFields);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException("" + e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
			else
				return null;
		}
		if(expectedCode != 304 && !(expectedCode >= 200 && expectedCode <= 300) && !(expectedCode == HttpStatus.SC_NOT_FOUND && returnObj == null))
			throw new TestFailException("304 or between 200 and 300", Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
		return returnObj;
	}

	public static com.mozu.api.contracts.commerceruntime.orders.OrderNote updateCheckoutNote(ApiContext apiContext, com.mozu.api.contracts.commerceruntime.orders.OrderNote orderNote, String checkoutId, String noteId, int expectedCode) throws Exception
	{
		return updateCheckoutNote(apiContext,  orderNote,  checkoutId,  noteId,  null, expectedCode);
	}

	public static com.mozu.api.contracts.commerceruntime.orders.OrderNote updateCheckoutNote(ApiContext apiContext, com.mozu.api.contracts.commerceruntime.orders.OrderNote orderNote, String checkoutId, String noteId, String responseFields, int expectedCode) throws Exception
	{
		com.mozu.api.contracts.commerceruntime.orders.OrderNote returnObj = new com.mozu.api.contracts.commerceruntime.orders.OrderNote();
		OrderNoteResource resource = new OrderNoteResource(apiContext);
		try
		{
			returnObj = resource.updateCheckoutNote( orderNote,  checkoutId,  noteId,  responseFields);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException("" + e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
			else
				return null;
		}
		if(expectedCode != 304 && !(expectedCode >= 200 && expectedCode <= 300) && !(expectedCode == HttpStatus.SC_NOT_FOUND && returnObj == null))
			throw new TestFailException("304 or between 200 and 300", Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
		return returnObj;
	}

	public static void deleteCheckoutNote(ApiContext apiContext, String checkoutId, String noteId, int expectedCode) throws Exception
	{
		OrderNoteResource resource = new OrderNoteResource(apiContext);
		try
		{
			resource.deleteCheckoutNote( checkoutId,  noteId);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException("" + e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
			else
				return;
		}
		if(expectedCode != 304 && !(expectedCode >= 200 && expectedCode <= 300))
			throw new TestFailException("304 or between 200 and 300", Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
	}

}



