/**
 *     This code was auto-generated by a tool.     
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
*/
package com.mozu.test.framework.datafactory;

import java.util.List;
import java.util.ArrayList;
import com.mozu.api.ApiException;
import com.mozu.api.ApiContext;
import com.mozu.test.framework.core.TestFailException;
import com.mozu.api.resources.platform.developer.ApplicationVersionResource;

/** <summary>
 * Use the Applications resource to manage the applications associated with a developer account.
 * </summary>
 */
public class ApplicationVersionFactory
{

	public static com.mozu.api.contracts.appdev.ApplicationCollection getAllApplications(ApiContext apiContext, int expectedCode, int successCode) throws Exception
	{
		com.mozu.api.contracts.appdev.ApplicationCollection returnObj = new com.mozu.api.contracts.appdev.ApplicationCollection();
		ApplicationVersionResource resource = new ApplicationVersionResource(apiContext);
		try
		{
			returnObj = resource.getAllApplications();
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException(e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
			else
				return null;
		}
		if(expectedCode != successCode)
			 throw new TestFailException(successCode, Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
		return returnObj;

	}

	public static com.mozu.api.contracts.appdev.Application getApplication(ApiContext apiContext, int expectedCode, int successCode) throws Exception
	{
		return getApplication(apiContext,  null, expectedCode, successCode );
	}

	public static com.mozu.api.contracts.appdev.Application getApplication(ApiContext apiContext, Integer applicationId, int expectedCode, int successCode) throws Exception
	{
		com.mozu.api.contracts.appdev.Application returnObj = new com.mozu.api.contracts.appdev.Application();
		ApplicationVersionResource resource = new ApplicationVersionResource(apiContext);
		try
		{
			returnObj = resource.getApplication( applicationId);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException(e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
			else
				return null;
		}
		if(expectedCode != successCode)
			 throw new TestFailException(successCode, Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
		return returnObj;

	}

	public static com.mozu.api.contracts.appdev.ApplicationVersion getApplicationVersion(ApiContext apiContext, Integer applicationVersionId, int expectedCode, int successCode) throws Exception
	{
		com.mozu.api.contracts.appdev.ApplicationVersion returnObj = new com.mozu.api.contracts.appdev.ApplicationVersion();
		ApplicationVersionResource resource = new ApplicationVersionResource(apiContext);
		try
		{
			returnObj = resource.getApplicationVersion( applicationVersionId);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException(e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
			else
				return null;
		}
		if(expectedCode != successCode)
			 throw new TestFailException(successCode, Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
		return returnObj;

	}

	public static com.mozu.api.contracts.appdev.PackageCollection getPackages(ApiContext apiContext, Integer applicationVersionId, int expectedCode, int successCode) throws Exception
	{
		com.mozu.api.contracts.appdev.PackageCollection returnObj = new com.mozu.api.contracts.appdev.PackageCollection();
		ApplicationVersionResource resource = new ApplicationVersionResource(apiContext);
		try
		{
			returnObj = resource.getPackages( applicationVersionId);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException(e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
			else
				return null;
		}
		if(expectedCode != successCode)
			 throw new TestFailException(successCode, Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
		return returnObj;

	}

	public static com.mozu.api.contracts.appdev.Package getPackage(ApiContext apiContext, Integer applicationVersionId, Integer packageId, int expectedCode, int successCode) throws Exception
	{
		com.mozu.api.contracts.appdev.Package returnObj = new com.mozu.api.contracts.appdev.Package();
		ApplicationVersionResource resource = new ApplicationVersionResource(apiContext);
		try
		{
			returnObj = resource.getPackage( applicationVersionId,  packageId);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException(e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
			else
				return null;
		}
		if(expectedCode != successCode)
			 throw new TestFailException(successCode, Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
		return returnObj;

	}

	public static com.mozu.api.contracts.appdev.FolderMetadata getPackageItemsMetadata(ApiContext apiContext, Integer applicationVersionId, Integer packageId, int expectedCode, int successCode) throws Exception
	{
		com.mozu.api.contracts.appdev.FolderMetadata returnObj = new com.mozu.api.contracts.appdev.FolderMetadata();
		ApplicationVersionResource resource = new ApplicationVersionResource(apiContext);
		try
		{
			returnObj = resource.getPackageItemsMetadata( applicationVersionId,  packageId);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException(e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
			else
				return null;
		}
		if(expectedCode != successCode)
			 throw new TestFailException(successCode, Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
		return returnObj;

	}

	public static com.mozu.api.contracts.appdev.FileMetadata getPackageItemMetadata(ApiContext apiContext, Integer applicationVersionId, Integer packageId, String itempath, int expectedCode, int successCode) throws Exception
	{
		com.mozu.api.contracts.appdev.FileMetadata returnObj = new com.mozu.api.contracts.appdev.FileMetadata();
		ApplicationVersionResource resource = new ApplicationVersionResource(apiContext);
		try
		{
			returnObj = resource.getPackageItemMetadata( applicationVersionId,  packageId,  itempath);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException(e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
			else
				return null;
		}
		if(expectedCode != successCode)
			 throw new TestFailException(successCode, Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
		return returnObj;

	}

	public static java.io.InputStream getPackageFilesZip(ApiContext apiContext, Integer applicationVersionId, Integer packageId, int expectedCode, int successCode) throws Exception
	{
		java.io.InputStream returnObj;
		ApplicationVersionResource resource = new ApplicationVersionResource(apiContext);
		try
		{
			returnObj = resource.getPackageFilesZip( applicationVersionId,  packageId);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException(e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
			else
				return null;
		}
		if(expectedCode != successCode)
			 throw new TestFailException(successCode, Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
		return returnObj;

	}

	public static com.mozu.api.contracts.appdev.Package addPackage(ApiContext apiContext, com.mozu.api.contracts.appdev.Package pkg, Integer applicationVersionId, int expectedCode, int successCode) throws Exception
	{
		com.mozu.api.contracts.appdev.Package returnObj = new com.mozu.api.contracts.appdev.Package();
		ApplicationVersionResource resource = new ApplicationVersionResource(apiContext);
		try
		{
			returnObj = resource.addPackage( pkg,  applicationVersionId);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException(e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
			else
				return null;
		}
		if(expectedCode != successCode)
			 throw new TestFailException(successCode, Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
		return returnObj;

	}

	public static com.mozu.api.contracts.appdev.FileMetadata changePackageFileNameOrPath(ApiContext apiContext, com.mozu.api.contracts.appdev.RenameInfo renameInfo, Integer applicationVersionId, Integer packageId, int expectedCode, int successCode) throws Exception
	{
		com.mozu.api.contracts.appdev.FileMetadata returnObj = new com.mozu.api.contracts.appdev.FileMetadata();
		ApplicationVersionResource resource = new ApplicationVersionResource(apiContext);
		try
		{
			returnObj = resource.changePackageFileNameOrPath( renameInfo,  applicationVersionId,  packageId);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException(e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
			else
				return null;
		}
		if(expectedCode != successCode)
			 throw new TestFailException(successCode, Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
		return returnObj;

	}

	public static com.mozu.api.contracts.appdev.FileMetadata addPackageFile(ApiContext apiContext, java.io.InputStream stream, Integer applicationVersionId, Integer packageId, String filepath, String  contentType, int expectedCode, int successCode) throws Exception
	{
		com.mozu.api.contracts.appdev.FileMetadata returnObj = new com.mozu.api.contracts.appdev.FileMetadata();
		ApplicationVersionResource resource = new ApplicationVersionResource(apiContext);
		try
		{
			returnObj = resource.addPackageFile( stream,  applicationVersionId,  packageId,  filepath,  contentType);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException(e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
			else
				return null;
		}
		if(expectedCode != successCode)
			 throw new TestFailException(successCode, Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
		return returnObj;

	}

	public static com.mozu.api.contracts.appdev.FileMetadata updatePackageFile(ApiContext apiContext, java.io.InputStream stream, Integer applicationVersionId, Integer packageId, String filepath, String  contentType, int expectedCode, int successCode) throws Exception
	{
		com.mozu.api.contracts.appdev.FileMetadata returnObj = new com.mozu.api.contracts.appdev.FileMetadata();
		ApplicationVersionResource resource = new ApplicationVersionResource(apiContext);
		try
		{
			returnObj = resource.updatePackageFile( stream,  applicationVersionId,  packageId,  filepath,  contentType);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException(e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
			else
				return null;
		}
		if(expectedCode != successCode)
			 throw new TestFailException(successCode, Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
		return returnObj;

	}

	public static void deletePackageFile(ApiContext apiContext, Integer applicationVersionId, Integer packageId, String filepath, int expectedCode, int successCode) throws Exception
	{
				ApplicationVersionResource resource = new ApplicationVersionResource(apiContext);
		try
		{
			resource.deletePackageFile( applicationVersionId,  packageId,  filepath);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException(e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
		}
		if(expectedCode != successCode)
			 throw new TestFailException(successCode, Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");

	}

}



