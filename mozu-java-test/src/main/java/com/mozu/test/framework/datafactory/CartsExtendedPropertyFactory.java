/**
 *     This code was auto-generated by a tool.     
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
*/
package com.mozu.test.framework.datafactory;

import java.util.List;
import java.util.ArrayList;
import com.mozu.api.ApiException;
import com.mozu.api.ApiContext;
import com.mozu.test.framework.core.TestFailException;
import com.mozu.api.resources.commerce.carts.ExtendedPropertyResource;

/** <summary>
 * 
 * </summary>
 */
public class CartsExtendedPropertyFactory
{

	public static List<com.mozu.api.contracts.commerceruntime.commerce.ExtendedProperty> getExtendedProperties(ApiContext apiContext, int expectedCode, int successCode) throws Exception
	{
		List<com.mozu.api.contracts.commerceruntime.commerce.ExtendedProperty> returnObj = new ArrayList<com.mozu.api.contracts.commerceruntime.commerce.ExtendedProperty>();
		ExtendedPropertyResource resource = new ExtendedPropertyResource(apiContext);
		try
		{
			returnObj = resource.getExtendedProperties();
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException(e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
			else
				return null;
		}
		if(expectedCode != successCode)
			throw new TestFailException(successCode, Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
		return returnObj;
	}

	public static List<com.mozu.api.contracts.commerceruntime.commerce.ExtendedProperty> addExtendedProperties(ApiContext apiContext, List<com.mozu.api.contracts.commerceruntime.commerce.ExtendedProperty> extendedProperties, int expectedCode, int successCode) throws Exception
	{
		List<com.mozu.api.contracts.commerceruntime.commerce.ExtendedProperty> returnObj = new ArrayList<com.mozu.api.contracts.commerceruntime.commerce.ExtendedProperty>();
		ExtendedPropertyResource resource = new ExtendedPropertyResource(apiContext);
		try
		{
			returnObj = resource.addExtendedProperties( extendedProperties);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException(e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
			else
				return null;
		}
		if(expectedCode != successCode)
			throw new TestFailException(successCode, Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
		return returnObj;
	}

	public static com.mozu.api.contracts.commerceruntime.commerce.ExtendedProperty updateExtendedProperty(ApiContext apiContext, com.mozu.api.contracts.commerceruntime.commerce.ExtendedProperty extendedProperty, String key, int expectedCode, int successCode) throws Exception
	{
		return updateExtendedProperty(apiContext,  extendedProperty,  key,  null,  null, expectedCode, successCode );
	}

	public static com.mozu.api.contracts.commerceruntime.commerce.ExtendedProperty updateExtendedProperty(ApiContext apiContext, com.mozu.api.contracts.commerceruntime.commerce.ExtendedProperty extendedProperty, String key, Boolean upsert, String responseFields, int expectedCode, int successCode) throws Exception
	{
		com.mozu.api.contracts.commerceruntime.commerce.ExtendedProperty returnObj = new com.mozu.api.contracts.commerceruntime.commerce.ExtendedProperty();
		ExtendedPropertyResource resource = new ExtendedPropertyResource(apiContext);
		try
		{
			returnObj = resource.updateExtendedProperty( extendedProperty,  key,  upsert,  responseFields);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException(e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
			else
				return null;
		}
		if(expectedCode != successCode)
			throw new TestFailException(successCode, Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
		return returnObj;
	}

	public static List<com.mozu.api.contracts.commerceruntime.commerce.ExtendedProperty> updateExtendedProperties(ApiContext apiContext, List<com.mozu.api.contracts.commerceruntime.commerce.ExtendedProperty> extendedProperties, int expectedCode, int successCode) throws Exception
	{
		return updateExtendedProperties(apiContext,  extendedProperties,  null, expectedCode, successCode );
	}

	public static List<com.mozu.api.contracts.commerceruntime.commerce.ExtendedProperty> updateExtendedProperties(ApiContext apiContext, List<com.mozu.api.contracts.commerceruntime.commerce.ExtendedProperty> extendedProperties, Boolean upsert, int expectedCode, int successCode) throws Exception
	{
		List<com.mozu.api.contracts.commerceruntime.commerce.ExtendedProperty> returnObj = new ArrayList<com.mozu.api.contracts.commerceruntime.commerce.ExtendedProperty>();
		ExtendedPropertyResource resource = new ExtendedPropertyResource(apiContext);
		try
		{
			returnObj = resource.updateExtendedProperties( extendedProperties,  upsert);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException(e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
			else
				return null;
		}
		if(expectedCode != successCode)
			throw new TestFailException(successCode, Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
		return returnObj;
	}

	public static void deleteExtendedProperties(ApiContext apiContext, List<String> keys, int expectedCode, int successCode) throws Exception
	{
		ExtendedPropertyResource resource = new ExtendedPropertyResource(apiContext);
		try
		{
			resource.deleteExtendedProperties( keys);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException(e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
			else
				return;
		}
		if(expectedCode != successCode)
			throw new TestFailException(successCode, Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
	}

	public static void deleteExtendedProperty(ApiContext apiContext, String key, int expectedCode, int successCode) throws Exception
	{
		ExtendedPropertyResource resource = new ExtendedPropertyResource(apiContext);
		try
		{
			resource.deleteExtendedProperty( key);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException(e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
			else
				return;
		}
		if(expectedCode != successCode)
			throw new TestFailException(successCode, Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
	}

}



