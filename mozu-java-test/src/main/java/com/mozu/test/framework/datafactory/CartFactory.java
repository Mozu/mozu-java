/**
 *     This code was auto-generated by a tool.     
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
*/
package com.mozu.test.framework.datafactory;

import java.util.List;
import java.util.ArrayList;
import com.mozu.api.ApiException;
import com.mozu.api.ApiContext;
import com.mozu.test.framework.core.TestFailException;
import com.mozu.api.resources.commerce.CartResource;

/** <summary>
 * Use the Carts resource to manage storefront shopping carts as items are added and removed. Each time a shopper's cart is modified, the Carts resource updates the estimated total with any applicable discounts.
 * </summary>
 */
public class CartFactory
{

	public static com.mozu.api.contracts.commerceruntime.carts.Cart getCart(ApiContext apiContext, String cartId, int expectedCode, int successCode) throws Exception
	{
		return getCart(apiContext,  cartId,  null, expectedCode, successCode );
	}

	public static com.mozu.api.contracts.commerceruntime.carts.Cart getCart(ApiContext apiContext, String cartId, String responseFields, int expectedCode, int successCode) throws Exception
	{
		com.mozu.api.contracts.commerceruntime.carts.Cart returnObj = new com.mozu.api.contracts.commerceruntime.carts.Cart();
		CartResource resource = new CartResource(apiContext);
		try
		{
			returnObj = resource.getCart( cartId,  responseFields);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException(e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
			else
				return null;
		}
		if(expectedCode != successCode)
			 throw new TestFailException(successCode, Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
		return returnObj;

	}

	public static com.mozu.api.contracts.commerceruntime.carts.Cart getOrCreateCart(ApiContext apiContext, int expectedCode, int successCode) throws Exception
	{
		return getOrCreateCart(apiContext,  null, expectedCode, successCode );
	}

	public static com.mozu.api.contracts.commerceruntime.carts.Cart getOrCreateCart(ApiContext apiContext, String responseFields, int expectedCode, int successCode) throws Exception
	{
		com.mozu.api.contracts.commerceruntime.carts.Cart returnObj = new com.mozu.api.contracts.commerceruntime.carts.Cart();
		CartResource resource = new CartResource(apiContext);
		try
		{
			returnObj = resource.getOrCreateCart( responseFields);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException(e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
			else
				return null;
		}
		if(expectedCode != successCode)
			 throw new TestFailException(successCode, Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
		return returnObj;

	}

	public static com.mozu.api.contracts.commerceruntime.carts.CartSummary getCartSummary(ApiContext apiContext, int expectedCode, int successCode) throws Exception
	{
		return getCartSummary(apiContext,  null, expectedCode, successCode );
	}

	public static com.mozu.api.contracts.commerceruntime.carts.CartSummary getCartSummary(ApiContext apiContext, String responseFields, int expectedCode, int successCode) throws Exception
	{
		com.mozu.api.contracts.commerceruntime.carts.CartSummary returnObj = new com.mozu.api.contracts.commerceruntime.carts.CartSummary();
		CartResource resource = new CartResource(apiContext);
		try
		{
			returnObj = resource.getCartSummary( responseFields);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException(e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
			else
				return null;
		}
		if(expectedCode != successCode)
			 throw new TestFailException(successCode, Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
		return returnObj;

	}

	public static com.mozu.api.contracts.commerceruntime.carts.CartSummary getUserCartSummary(ApiContext apiContext, String userId, int expectedCode, int successCode) throws Exception
	{
		return getUserCartSummary(apiContext,  userId,  null, expectedCode, successCode );
	}

	public static com.mozu.api.contracts.commerceruntime.carts.CartSummary getUserCartSummary(ApiContext apiContext, String userId, String responseFields, int expectedCode, int successCode) throws Exception
	{
		com.mozu.api.contracts.commerceruntime.carts.CartSummary returnObj = new com.mozu.api.contracts.commerceruntime.carts.CartSummary();
		CartResource resource = new CartResource(apiContext);
		try
		{
			returnObj = resource.getUserCartSummary( userId,  responseFields);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException(e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
			else
				return null;
		}
		if(expectedCode != successCode)
			 throw new TestFailException(successCode, Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
		return returnObj;

	}

	public static com.mozu.api.contracts.commerceruntime.carts.Cart getUserCart(ApiContext apiContext, String userId, int expectedCode, int successCode) throws Exception
	{
		return getUserCart(apiContext,  userId,  null, expectedCode, successCode );
	}

	public static com.mozu.api.contracts.commerceruntime.carts.Cart getUserCart(ApiContext apiContext, String userId, String responseFields, int expectedCode, int successCode) throws Exception
	{
		com.mozu.api.contracts.commerceruntime.carts.Cart returnObj = new com.mozu.api.contracts.commerceruntime.carts.Cart();
		CartResource resource = new CartResource(apiContext);
		try
		{
			returnObj = resource.getUserCart( userId,  responseFields);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException(e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
			else
				return null;
		}
		if(expectedCode != successCode)
			 throw new TestFailException(successCode, Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
		return returnObj;

	}

	public static com.mozu.api.contracts.commerceruntime.carts.Cart updateCart(ApiContext apiContext, com.mozu.api.contracts.commerceruntime.carts.Cart cart, int expectedCode, int successCode) throws Exception
	{
		return updateCart(apiContext,  cart,  null, expectedCode, successCode );
	}

	public static com.mozu.api.contracts.commerceruntime.carts.Cart updateCart(ApiContext apiContext, com.mozu.api.contracts.commerceruntime.carts.Cart cart, String responseFields, int expectedCode, int successCode) throws Exception
	{
		com.mozu.api.contracts.commerceruntime.carts.Cart returnObj = new com.mozu.api.contracts.commerceruntime.carts.Cart();
		CartResource resource = new CartResource(apiContext);
		try
		{
			returnObj = resource.updateCart( cart,  responseFields);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException(e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
			else
				return null;
		}
		if(expectedCode != successCode)
			 throw new TestFailException(successCode, Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
		return returnObj;

	}

	public static void deleteCart(ApiContext apiContext, String cartId, int expectedCode, int successCode) throws Exception
	{
				CartResource resource = new CartResource(apiContext);
		try
		{
			resource.deleteCart( cartId);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException(e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
		}
		if(expectedCode != successCode)
			 throw new TestFailException(successCode, Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");

	}

	public static void deleteCurrentCart(ApiContext apiContext, int expectedCode, int successCode) throws Exception
	{
				CartResource resource = new CartResource(apiContext);
		try
		{
			resource.deleteCurrentCart();
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException(e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
		}
		if(expectedCode != successCode)
			 throw new TestFailException(successCode, Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");

	}

}



