/**
 *     This code was auto-generated by a tool.     
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
*/
package com.mozu.test.framework.datafactory;

import java.util.List;
import java.util.ArrayList;
import org.apache.http.HttpStatus;
import com.mozu.api.ApiException;
import com.mozu.api.ApiContext;
import com.mozu.test.framework.core.TestFailException;
import com.mozu.api.resources.commerce.customer.accounts.CardResource;

/** <summary>
 * Use the Cards subresource to manage stored credit cards for customer accounts. Mozu stores limited card data in the Customer service for expedited ordering purposes; however, the complete card data is stored in the Payment service.
 * </summary>
 */
public class CardFactory
{

	public static com.mozu.api.contracts.customer.Card getAccountCard(ApiContext apiContext, Integer accountId, String cardId, int expectedCode) throws Exception
	{
		return getAccountCard(apiContext,  accountId,  cardId,  null, expectedCode);
	}

	public static com.mozu.api.contracts.customer.Card getAccountCard(ApiContext apiContext, Integer accountId, String cardId, String responseFields, int expectedCode) throws Exception
	{
		com.mozu.api.contracts.customer.Card returnObj = new com.mozu.api.contracts.customer.Card();
		CardResource resource = new CardResource(apiContext);
		try
		{
			returnObj = resource.getAccountCard( accountId,  cardId,  responseFields);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException("" + e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
			else
				return null;
		}
		if(expectedCode != 304 && !(expectedCode >= 200 && expectedCode <= 300) && !(expectedCode == HttpStatus.SC_NOT_FOUND && returnObj == null))
			throw new TestFailException("304 or between 200 and 300", Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
		return returnObj;
	}

	public static com.mozu.api.contracts.customer.CardCollection getAccountCards(ApiContext apiContext, Integer accountId, int expectedCode) throws Exception
	{
		return getAccountCards(apiContext,  accountId,  null, expectedCode);
	}

	public static com.mozu.api.contracts.customer.CardCollection getAccountCards(ApiContext apiContext, Integer accountId, String responseFields, int expectedCode) throws Exception
	{
		com.mozu.api.contracts.customer.CardCollection returnObj = new com.mozu.api.contracts.customer.CardCollection();
		CardResource resource = new CardResource(apiContext);
		try
		{
			returnObj = resource.getAccountCards( accountId,  responseFields);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException("" + e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
			else
				return null;
		}
		if(expectedCode != 304 && !(expectedCode >= 200 && expectedCode <= 300) && !(expectedCode == HttpStatus.SC_NOT_FOUND && returnObj == null))
			throw new TestFailException("304 or between 200 and 300", Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
		return returnObj;
	}

	public static com.mozu.api.contracts.customer.Card addAccountCard(ApiContext apiContext, com.mozu.api.contracts.customer.Card card, Integer accountId, int expectedCode) throws Exception
	{
		return addAccountCard(apiContext,  card,  accountId,  null, expectedCode);
	}

	public static com.mozu.api.contracts.customer.Card addAccountCard(ApiContext apiContext, com.mozu.api.contracts.customer.Card card, Integer accountId, String responseFields, int expectedCode) throws Exception
	{
		com.mozu.api.contracts.customer.Card returnObj = new com.mozu.api.contracts.customer.Card();
		CardResource resource = new CardResource(apiContext);
		try
		{
			returnObj = resource.addAccountCard( card,  accountId,  responseFields);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException("" + e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
			else
				return null;
		}
		if(expectedCode != 304 && !(expectedCode >= 200 && expectedCode <= 300) && !(expectedCode == HttpStatus.SC_NOT_FOUND && returnObj == null))
			throw new TestFailException("304 or between 200 and 300", Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
		return returnObj;
	}

	public static com.mozu.api.contracts.customer.Card updateAccountCard(ApiContext apiContext, com.mozu.api.contracts.customer.Card card, Integer accountId, String cardId, int expectedCode) throws Exception
	{
		return updateAccountCard(apiContext,  card,  accountId,  cardId,  null, expectedCode);
	}

	public static com.mozu.api.contracts.customer.Card updateAccountCard(ApiContext apiContext, com.mozu.api.contracts.customer.Card card, Integer accountId, String cardId, String responseFields, int expectedCode) throws Exception
	{
		com.mozu.api.contracts.customer.Card returnObj = new com.mozu.api.contracts.customer.Card();
		CardResource resource = new CardResource(apiContext);
		try
		{
			returnObj = resource.updateAccountCard( card,  accountId,  cardId,  responseFields);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException("" + e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
			else
				return null;
		}
		if(expectedCode != 304 && !(expectedCode >= 200 && expectedCode <= 300) && !(expectedCode == HttpStatus.SC_NOT_FOUND && returnObj == null))
			throw new TestFailException("304 or between 200 and 300", Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
		return returnObj;
	}

	public static void deleteAccountCard(ApiContext apiContext, Integer accountId, String cardId, int expectedCode) throws Exception
	{
		CardResource resource = new CardResource(apiContext);
		try
		{
			resource.deleteAccountCard( accountId,  cardId);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException("" + e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
			else
				return;
		}
		if(expectedCode != 304 && !(expectedCode >= 200 && expectedCode <= 300))
			throw new TestFailException("304 or between 200 and 300", Thread.currentThread().getStackTrace()[2].getMethodName(), "" + expectedCode, "");
	}

}



