/**
 *     This code was auto-generated by a tool.     
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
*/
package com.mozu.test.framework.datafactory;

import java.util.List;
import java.util.ArrayList;
import com.mozu.api.ApiException;
import com.mozu.api.ApiContext;
import com.mozu.test.framework.core.TestFailException;
import com.mozu.api.resources.platform.ReferenceDataResource;

/** <summary>
 * The Reference resource retrieves collections of standards the Mozu system currently supports. This includes content locales, top-level domains, units of measure, countries, currencies, time zones, and shipping or billing address schemas.
 * </summary>
 */
public class ReferenceDataFactory
{

	public static com.mozu.api.contracts.reference.AddressSchema getAddressSchema(ApiContext apiContext, int expectedCode, int successCode) throws Exception
	{
		return getAddressSchema(apiContext,  null, expectedCode, successCode );
	}

	public static com.mozu.api.contracts.reference.AddressSchema getAddressSchema(ApiContext apiContext, String countryCode, int expectedCode, int successCode) throws Exception
	{
		com.mozu.api.contracts.reference.AddressSchema returnObj = new com.mozu.api.contracts.reference.AddressSchema();
		ReferenceDataResource resource = new ReferenceDataResource(apiContext);
		try
		{
			returnObj = resource.getAddressSchema( countryCode);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException(e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
			else
				return null;
		}
		if(expectedCode != successCode)
			 throw new TestFailException(successCode, Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
		return returnObj;

	}

	public static com.mozu.api.contracts.reference.AddressSchemaCollection getAddressSchemas(ApiContext apiContext, int expectedCode, int successCode) throws Exception
	{
		com.mozu.api.contracts.reference.AddressSchemaCollection returnObj = new com.mozu.api.contracts.reference.AddressSchemaCollection();
		ReferenceDataResource resource = new ReferenceDataResource(apiContext);
		try
		{
			returnObj = resource.getAddressSchemas();
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException(e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
			else
				return null;
		}
		if(expectedCode != successCode)
			 throw new TestFailException(successCode, Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
		return returnObj;

	}

	public static com.mozu.api.contracts.core.Behavior getBehavior(ApiContext apiContext, Integer behaviorId, int expectedCode, int successCode) throws Exception
	{
		com.mozu.api.contracts.core.Behavior returnObj = new com.mozu.api.contracts.core.Behavior();
		ReferenceDataResource resource = new ReferenceDataResource(apiContext);
		try
		{
			returnObj = resource.getBehavior( behaviorId);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException(e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
			else
				return null;
		}
		if(expectedCode != successCode)
			 throw new TestFailException(successCode, Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
		return returnObj;

	}

	public static com.mozu.api.contracts.core.BehaviorCategoryCollection getBehaviorCategories(ApiContext apiContext, int expectedCode, int successCode) throws Exception
	{
		com.mozu.api.contracts.core.BehaviorCategoryCollection returnObj = new com.mozu.api.contracts.core.BehaviorCategoryCollection();
		ReferenceDataResource resource = new ReferenceDataResource(apiContext);
		try
		{
			returnObj = resource.getBehaviorCategories();
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException(e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
			else
				return null;
		}
		if(expectedCode != successCode)
			 throw new TestFailException(successCode, Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
		return returnObj;

	}

	public static com.mozu.api.contracts.core.BehaviorCategory getBehaviorCategory(ApiContext apiContext, Integer categoryId, int expectedCode, int successCode) throws Exception
	{
		com.mozu.api.contracts.core.BehaviorCategory returnObj = new com.mozu.api.contracts.core.BehaviorCategory();
		ReferenceDataResource resource = new ReferenceDataResource(apiContext);
		try
		{
			returnObj = resource.getBehaviorCategory( categoryId);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException(e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
			else
				return null;
		}
		if(expectedCode != successCode)
			 throw new TestFailException(successCode, Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
		return returnObj;

	}

	public static com.mozu.api.contracts.core.BehaviorCollection getBehaviors(ApiContext apiContext, int expectedCode, int successCode) throws Exception
	{
		return getBehaviors(apiContext,  null, expectedCode, successCode );
	}

	public static com.mozu.api.contracts.core.BehaviorCollection getBehaviors(ApiContext apiContext, String userType, int expectedCode, int successCode) throws Exception
	{
		com.mozu.api.contracts.core.BehaviorCollection returnObj = new com.mozu.api.contracts.core.BehaviorCollection();
		ReferenceDataResource resource = new ReferenceDataResource(apiContext);
		try
		{
			returnObj = resource.getBehaviors( userType);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException(e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
			else
				return null;
		}
		if(expectedCode != successCode)
			 throw new TestFailException(successCode, Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
		return returnObj;

	}

	public static com.mozu.api.contracts.reference.ContentLocaleCollection getContentLocales(ApiContext apiContext, int expectedCode, int successCode) throws Exception
	{
		com.mozu.api.contracts.reference.ContentLocaleCollection returnObj = new com.mozu.api.contracts.reference.ContentLocaleCollection();
		ReferenceDataResource resource = new ReferenceDataResource(apiContext);
		try
		{
			returnObj = resource.getContentLocales();
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException(e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
			else
				return null;
		}
		if(expectedCode != successCode)
			 throw new TestFailException(successCode, Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
		return returnObj;

	}

	public static com.mozu.api.contracts.reference.CountryCollection getCountries(ApiContext apiContext, int expectedCode, int successCode) throws Exception
	{
		com.mozu.api.contracts.reference.CountryCollection returnObj = new com.mozu.api.contracts.reference.CountryCollection();
		ReferenceDataResource resource = new ReferenceDataResource(apiContext);
		try
		{
			returnObj = resource.getCountries();
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException(e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
			else
				return null;
		}
		if(expectedCode != successCode)
			 throw new TestFailException(successCode, Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
		return returnObj;

	}

	public static com.mozu.api.contracts.reference.CurrencyCollection getCurrencies(ApiContext apiContext, int expectedCode, int successCode) throws Exception
	{
		com.mozu.api.contracts.reference.CurrencyCollection returnObj = new com.mozu.api.contracts.reference.CurrencyCollection();
		ReferenceDataResource resource = new ReferenceDataResource(apiContext);
		try
		{
			returnObj = resource.getCurrencies();
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException(e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
			else
				return null;
		}
		if(expectedCode != successCode)
			 throw new TestFailException(successCode, Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
		return returnObj;

	}

	public static com.mozu.api.contracts.reference.TimeZoneCollection getTimeZones(ApiContext apiContext, int expectedCode, int successCode) throws Exception
	{
		com.mozu.api.contracts.reference.TimeZoneCollection returnObj = new com.mozu.api.contracts.reference.TimeZoneCollection();
		ReferenceDataResource resource = new ReferenceDataResource(apiContext);
		try
		{
			returnObj = resource.getTimeZones();
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException(e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
			else
				return null;
		}
		if(expectedCode != successCode)
			 throw new TestFailException(successCode, Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
		return returnObj;

	}

	public static com.mozu.api.contracts.reference.TopLevelDomainCollection getTopLevelDomains(ApiContext apiContext, int expectedCode, int successCode) throws Exception
	{
		com.mozu.api.contracts.reference.TopLevelDomainCollection returnObj = new com.mozu.api.contracts.reference.TopLevelDomainCollection();
		ReferenceDataResource resource = new ReferenceDataResource(apiContext);
		try
		{
			returnObj = resource.getTopLevelDomains();
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException(e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
			else
				return null;
		}
		if(expectedCode != successCode)
			 throw new TestFailException(successCode, Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
		return returnObj;

	}

	public static com.mozu.api.contracts.reference.UnitOfMeasureCollection getUnitsOfMeasure(ApiContext apiContext, int expectedCode, int successCode) throws Exception
	{
		return getUnitsOfMeasure(apiContext,  null, expectedCode, successCode );
	}

	public static com.mozu.api.contracts.reference.UnitOfMeasureCollection getUnitsOfMeasure(ApiContext apiContext, String filter, int expectedCode, int successCode) throws Exception
	{
		com.mozu.api.contracts.reference.UnitOfMeasureCollection returnObj = new com.mozu.api.contracts.reference.UnitOfMeasureCollection();
		ReferenceDataResource resource = new ReferenceDataResource(apiContext);
		try
		{
			returnObj = resource.getUnitsOfMeasure( filter);
		}
		catch (ApiException e)
		{
			if(e.getHttpStatusCode() != expectedCode)
				throw new TestFailException(e.getHttpStatusCode(), Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
			else
				return null;
		}
		if(expectedCode != successCode)
			 throw new TestFailException(successCode, Thread.currentThread().getStackTrace()[2].getMethodName(), expectedCode, "");
		return returnObj;

	}

}



